package net.ajaskey.market.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("hi!");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    java.io.File file0 = null;
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData1 = net.ajaskey.market.ta.input.ParseData.parseFile(file0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_tickerData1);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    java.util.List<java.lang.String> list_str0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData1 = net.ajaskey.market.ta.input.ParseData.parseFiles(list_str0);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    net.ajaskey.market.ta.DailyData dailyData4 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(byte)10, 100, (int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData4);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)(short)1);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    int i4 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(byte)0, (int)'#', (int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    java.text.SimpleDateFormat simpleDateFormat0 = net.ajaskey.market.misc.Utils.sdf2;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(simpleDateFormat0);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData1 = net.ajaskey.market.ta.input.ParseData.parsePTVData("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("30-Jan-0001");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData2 = net.ajaskey.market.ta.input.ParseData.parsePTVData("", (int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("30-Jan-0001", (int)' ');
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE(100.0d);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = tickerData0.DailyDataString((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)(short)0);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    net.ajaskey.market.ta.TickerData tickerData1 = new net.ajaskey.market.ta.TickerData();
    double[] d_array2 = tickerData1.getTrueLowData();
    java.util.Calendar calendar6 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate(calendar6);
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate2(calendar6);
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar6);
    int i10 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar6);
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate2(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "30-Jan-0001"+ "'", str7.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Fri 30-Jan-0001"+ "'", str8.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Fri 30-Jan-0001"+ "'", str11.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    java.util.Calendar calendar0 = null;
    java.lang.String str1 = net.ajaskey.market.misc.Utils.getDayName(calendar0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "unknown-day"+ "'", str1.equals("unknown-day"));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    net.ajaskey.market.misc.Utils.NL = "";

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData2 = net.ajaskey.market.ta.input.ParseData.parsePTVData("hi!", (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData4);
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    java.util.Locale locale0 = net.ajaskey.market.misc.Utils.locale;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale0);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = null;
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getTrueLowData();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate2(calendar14);
    net.ajaskey.market.ta.DailyData dailyData17 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData9, calendar14);
    int i18 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData8, calendar14);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData20 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar14, (int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Fri 30-Jan-0001"+ "'", str16.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    net.ajaskey.market.misc.Utils.TAB = "Fri 30-Jan-0001";

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    net.ajaskey.market.ta.input.Fundamentals fundamentals3 = tickerData0.getFundies();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = tickerData0.DailyDataString((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals3);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData0 = null;
    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData0, "java.util.GregorianCalendar[time=-62164808652183,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=817,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)'a', false);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    double d2 = tickerData0.getCurrentPrice();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = tickerData0.DailyDataString((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    net.ajaskey.market.ta.input.ParseData.clearValidTickers();

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    net.ajaskey.market.misc.Utils utils0 = new net.ajaskey.market.misc.Utils();

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    java.text.SimpleDateFormat simpleDateFormat0 = net.ajaskey.market.misc.Utils.sdf;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(simpleDateFormat0);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((long)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "100"+ "'", str1.equals("100"));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    java.lang.String str0 = net.ajaskey.market.misc.Utils.NL;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str0 + "' != '" + ""+ "'", str0.equals(""));

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    net.ajaskey.market.ta.TickerData tickerData1 = new net.ajaskey.market.ta.TickerData();
    double[] d_array2 = tickerData1.getTrueLowData();
    java.util.Calendar calendar6 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate(calendar6);
    net.ajaskey.market.ta.DailyData dailyData14 = new net.ajaskey.market.ta.DailyData(calendar6, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    tickerData1.addData(dailyData14);
    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "30-Jan-0001"+ "'", str7.equals("30-Jan-0001"));

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    // The following exception was thrown during execution in test generation
    try {
    int i3 = industryData0.getRank((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("Fri");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("100", (int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("100");

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getVolumeData();
    double d32 = tickerData30.getChg65();
    double[] d_array33 = tickerData30.getOiData();
    double d34 = tickerData30.getMfi65();
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar38);
    net.ajaskey.market.ta.TickerData tickerData41 = null;
    net.ajaskey.market.ta.TickerData tickerData42 = new net.ajaskey.market.ta.TickerData();
    double[] d_array43 = tickerData42.getTrueLowData();
    java.util.Calendar calendar47 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate(calendar47);
    java.lang.String str49 = net.ajaskey.market.misc.Utils.stringDate2(calendar47);
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData42, calendar47);
    int i51 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData41, calendar47);
    boolean b52 = net.ajaskey.market.misc.Utils.sameYear(calendar38, calendar47);
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate2(calendar56);
    int i59 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData30, calendar47, calendar56);
    boolean b60 = net.ajaskey.market.misc.Utils.sameMonth(calendar17, calendar47);
    net.ajaskey.market.misc.Utils.printCalendar(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808651415,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=585,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808651415,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=585,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "java.util.GregorianCalendar[time=-62164808651415,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=585,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str40.equals("java.util.GregorianCalendar[time=-62164808651415,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=585,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "30-Jan-0001"+ "'", str48.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Fri 30-Jan-0001"+ "'", str49.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Fri 30-Jan-0001"+ "'", str58.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    int i0 = net.ajaskey.market.ta.input.ParseData.getValidTickerCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 1);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    int i0 = net.ajaskey.market.ta.input.ParseData.getMIN_VOLUME();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 0);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    int i4 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, 10, (int)(byte)(-1), (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    long long6 = industryData0.getfShares();
    // The following exception was thrown during execution in test generation
    try {
    int i8 = industryData0.getRank((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    long long14 = dailyData11.getDaysSinceBase();
    long long15 = dailyData11.getDaysSinceBase();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 693934L);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    net.ajaskey.market.misc.Utils.TAB = "30-Jan-0001";

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", 1);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10"+ "'", str1.equals("10"));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("unknown-day");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    java.util.List<java.lang.String> list_str0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData2 = net.ajaskey.market.ta.input.ParseData.parseFiles(list_str0, (int)' ');
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    // The following exception was thrown during execution in test generation
    try {
    double d7 = industryData0.getSlope((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    double d0 = net.ajaskey.market.ta.input.ParseData.getMIN_PRICE();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d0 == 100.0d);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(false);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    int i4 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'#', 10, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setShares(693934L);
    industryData0.setChg260((double)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((long)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0"+ "'", str1.equals("0"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    net.ajaskey.market.ta.TickerData tickerData3 = new net.ajaskey.market.ta.TickerData();
    double[] d_array4 = tickerData3.getTrueLowData();
    double d5 = tickerData3.getCurrentPrice();
    double[] d_array6 = tickerData3.getTrueHighData();
    java.lang.String str7 = tickerData3.getTicker();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData3);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("Unknown");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    double d7 = industryData0.getRawRs();
    // The following exception was thrown during execution in test generation
    try {
    int i9 = industryData0.getRank((int)(short)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("NotFound", (int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double d6 = tickerData0.getDiMinus();
    tickerData0.setTicker("hi!");
    double d9 = tickerData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    double d30 = tickerData0.getCurrentPrice();
    // The following exception was thrown during execution in test generation
    try {
    double d32 = tickerData0.getVolume((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808650557,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=443,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808650557,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=443,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 0.0d);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0"+ "'", str1.equals("0"));

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    java.io.File file0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.InterdayData> list_interdayData1 = net.ajaskey.market.ta.input.ParseData.parseInterdayFile(file0);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808651540,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=460,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b16 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate2(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001"+ "'", str17.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    net.ajaskey.market.misc.Utils.TAB = "0";

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    net.ajaskey.market.ta.DailyData dailyData4 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(byte)1, (int)(short)10, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData4);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.misc.Utils.printCalendar(calendar65);
    java.util.Calendar calendar81 = net.ajaskey.market.misc.Utils.makeCopy(calendar65);
    java.util.Calendar calendar82 = net.ajaskey.market.misc.Utils.makeCopy(calendar81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808650199,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=801,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808650199,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=801,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808650199,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=801,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808650199,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=801,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar82);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME(100);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = tickerData9.DailyDataString(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    java.lang.Double d13 = dailyData11.getLow();
    double d14 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 0.0d+ "'", d13.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setPriceInRange260((double)(byte)100);
    double d8 = industryData0.getRawRs();
    industryData0.setName("java.util.GregorianCalendar[time=-62164808650277,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=723,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    java.lang.Double d13 = dailyData11.getLow();
    double d14 = dailyData11.getTrueHigh();
    double d15 = dailyData11.getTrueLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 0.0d+ "'", d13.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    java.lang.String str0 = net.ajaskey.market.misc.Utils.TAB;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str0 + "' != '" + "0"+ "'", str0.equals("0"));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808651415,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=585,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getDiPlus();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = tickerData0.DailyDataString((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt(1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1"+ "'", str1.equals("1"));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808651197,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=803,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (int)'a');
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((long)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0"+ "'", str1.equals("0"));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setName("100");
    java.lang.String str3 = industryData0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "100"+ "'", str3.equals("100"));

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate2(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Fri 30-Jan-0001"+ "'", str4.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808651587,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=413,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    // The following exception was thrown during execution in test generation
    try {
    int i5 = industryData0.getRank((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData0 = null;
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData0);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    dailyData11.setTrueHigh((double)(byte)(-1));
    double d17 = dailyData11.getDailyPercentRng();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLrInt260();
    java.lang.Double d4 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    industryData0.setName("java.util.GregorianCalendar[time=-62164808651587,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=413,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    // The following exception was thrown during execution in test generation
    try {
    double d11 = industryData0.getSlope((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808651306,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=694,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setMarketCap("NotFound");
    double d14 = industryData0.getAvgVol();
    double d15 = industryData0.getRawRsSt();
    // The following exception was thrown during execution in test generation
    try {
    int i17 = industryData0.getRank((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getLow260();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = tickerData0.DailyDataString((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    double d3 = tickerData0.getPriceInRng260();
    double d4 = tickerData0.getDiMinus();
    double d5 = tickerData0.getLrAngle260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)100, (int)(short)(-1), (int)(short)1);
    java.lang.Double d8 = tickerData0.getSmaPerc23();
    double d9 = tickerData0.getPriceOffHigh260();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(0, true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("java.util.GregorianCalendar[time=-62164808652183,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=817,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    double d3 = industryData0.getAvgVol();
    industryData0.setAvgVol((double)100);
    // The following exception was thrown during execution in test generation
    try {
    int i7 = industryData0.getRank((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    double[] d_array14 = tickerData8.getTypicalPriceData();
    java.lang.String str15 = tickerData8.getTickerName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)100L);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getPriceOffLow260();
    double d5 = tickerData0.getPriceOffHigh260();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(false);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg65();
    double d8 = derivedData0.getCurrentPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    java.lang.Double d5 = tickerData0.getSmaPerc23();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)(byte)1, false);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getChg65();
    double d6 = derivedData0.getPriceOffLow260();
    double d7 = derivedData0.getChg130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getTrueLow();
    java.lang.Double d14 = dailyData11.getOpen();
    double d15 = dailyData11.getTrueLow();
    dailyData11.setTrueHigh((double)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 0.0d+ "'", d14.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)(short)100);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    java.lang.String str8 = industryData0.getRanks();
    // The following exception was thrown during execution in test generation
    try {
    double d10 = industryData0.getSlope(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " 11  "+ "'", str8.equals(" 11  "));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    java.lang.Double d30 = tickerData0.getSma130();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str32 = tickerData0.getDailyDataString((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808648358,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=642,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808648358,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=642,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d30);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setShares(693934L);
    java.lang.String str11 = industryData0.getMarketCap();
    // The following exception was thrown during execution in test generation
    try {
    int i13 = industryData0.getRank((int)(byte)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    java.util.List<java.lang.String> list_str0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData1 = net.ajaskey.market.ta.TickerData.build(list_str0);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)(short)(-1));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("Fri");

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    java.util.ArrayList<java.lang.String> arraylist_str1 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array3 = new java.lang.String[] { "30-Jan-0001" };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str1, str_array3);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str1, (int)'#');
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str1);
    net.ajaskey.market.ta.TickerData tickerData8 = net.ajaskey.market.ta.TickerData.getFromList("Unknown", list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData8);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    java.util.Calendar calendar0 = null;
    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName(calendar0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "unknown-month"+ "'", str1.equals("unknown-month"));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808650401,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=599,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double d11 = tickerData0.getLow260();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(0, false);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    java.lang.Double d13 = dailyData11.getClose();
    java.lang.Double d14 = dailyData11.getHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 1.0d+ "'", d13.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 10.0d+ "'", d14.equals(10.0d));

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setMarketCap("NotFound");
    long long14 = industryData0.getfShares();
    // The following exception was thrown during execution in test generation
    try {
    double d16 = industryData0.getSlope(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 0L);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808650526,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=474,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setSector("30-Jan-0001");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808650277,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=723,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    industryData0.setShares((long)(byte)10);
    industryData0.setName("unknown-day");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getChg65();
    double d3 = derivedData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0"+ "'", str1.equals("0"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getPriceOffLow260();
    double d5 = tickerData0.getRsi14();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808648779,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=221,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setName("100");
    double d3 = industryData0.getPriceInRange260();
    java.lang.String str4 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getLr260();
    double d8 = derivedData0.getMfi23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808648093,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=907,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", 100);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getMfi23();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setShares(693934L);
    java.lang.String str11 = industryData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    java.lang.String str8 = industryData0.getRanks();
    // The following exception was thrown during execution in test generation
    try {
    int i10 = industryData0.getRank((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " 11  "+ "'", str8.equals(" 11  "));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar12);
    net.ajaskey.market.ta.TickerData tickerData15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData15, calendar21);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar21);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData();
    double[] d_array28 = tickerData27.getVolumeData();
    double d29 = tickerData27.getChg65();
    double[] d_array30 = tickerData27.getOiData();
    double d31 = tickerData27.getMfi65();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar35);
    net.ajaskey.market.ta.TickerData tickerData38 = null;
    net.ajaskey.market.ta.TickerData tickerData39 = new net.ajaskey.market.ta.TickerData();
    double[] d_array40 = tickerData39.getTrueLowData();
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    net.ajaskey.market.ta.DailyData dailyData47 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData39, calendar44);
    int i48 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData38, calendar44);
    boolean b49 = net.ajaskey.market.misc.Utils.sameYear(calendar35, calendar44);
    java.util.Calendar calendar53 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str54 = net.ajaskey.market.misc.Utils.stringDate(calendar53);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar53);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData27, calendar44, calendar53);
    net.ajaskey.market.ta.TickerData tickerData57 = new net.ajaskey.market.ta.TickerData();
    double[] d_array58 = tickerData57.getVolumeData();
    double d59 = tickerData57.getChg65();
    double[] d_array60 = tickerData57.getOiData();
    double d61 = tickerData57.getMfi65();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar65);
    net.ajaskey.market.ta.TickerData tickerData68 = null;
    net.ajaskey.market.ta.TickerData tickerData69 = new net.ajaskey.market.ta.TickerData();
    double[] d_array70 = tickerData69.getTrueLowData();
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    net.ajaskey.market.ta.DailyData dailyData77 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData69, calendar74);
    int i78 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData68, calendar74);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar65, calendar74);
    java.util.Calendar calendar83 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str84 = net.ajaskey.market.misc.Utils.stringDate(calendar83);
    java.lang.String str85 = net.ajaskey.market.misc.Utils.stringDate2(calendar83);
    int i86 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData57, calendar74, calendar83);
    boolean b87 = net.ajaskey.market.misc.Utils.sameMonth(calendar44, calendar74);
    boolean b88 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar74);
    int i89 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar74);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str91 = tickerData0.DailyDataString((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808647391,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=609,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808647391,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=609,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "java.util.GregorianCalendar[time=-62164808647375,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=625,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str37.equals("java.util.GregorianCalendar[time=-62164808647375,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=625,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "30-Jan-0001"+ "'", str54.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d59 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d61 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "java.util.GregorianCalendar[time=-62164808647375,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=625,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str67.equals("java.util.GregorianCalendar[time=-62164808647375,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=625,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "30-Jan-0001"+ "'", str84.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Fri 30-Jan-0001"+ "'", str85.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == (-1));

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d23 = dailyData22.getClose();
    double d24 = dailyData22.getDailyPercentChg();
    tickerData0.addData(dailyData22);
    double d26 = tickerData0.getMfi23();
    double d27 = tickerData0.getLow260();
    double d28 = tickerData0.getCurrentPrice();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str30 = tickerData0.DailyDataString((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d23 + "' != '" + 1.0d+ "'", d23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    double d6 = derivedData0.getPriceInRng260();
    java.lang.Double d7 = derivedData0.getSmaPerc130();
    double d8 = derivedData0.getLr260();
    double d9 = derivedData0.getLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((-1));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.misc.Utils.printCalendar(calendar65);
    java.lang.String str81 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808647297,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=703,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808647297,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=703,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808647297,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=703,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808647297,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=703,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Fri 30-Jan-0001"+ "'", str81.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808649013,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=987,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getTrueLow();
    tickerData0.addData(dailyData50);
    long long54 = dailyData50.getDaysSinceBase();
    double d55 = dailyData50.getDailyRng();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808647188,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=812,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808647188,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=812,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 0.0d);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    net.ajaskey.market.ta.TickerData tickerData5 = new net.ajaskey.market.ta.TickerData();
    double[] d_array6 = tickerData5.getVolumeData();
    double d7 = tickerData5.getChg65();
    int i11 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData5, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType12 = tickerData5.getSma130Trend();
    double d13 = tickerData5.getLrInt260();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData5);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    java.lang.Double d13 = dailyData11.getClose();
    double d14 = dailyData11.getDailyRng();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 1.0d+ "'", d13.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.misc.Utils.printCalendar(calendar65);
    java.util.Calendar calendar81 = net.ajaskey.market.misc.Utils.makeCopy(calendar65);
    net.ajaskey.market.misc.Utils.printCalendar(calendar65);
    java.util.Calendar calendar87 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str88 = net.ajaskey.market.misc.Utils.stringDate(calendar87);
    java.lang.String str89 = net.ajaskey.market.misc.Utils.stringDate2(calendar87);
    net.ajaskey.market.ta.TickerData tickerData96 = new net.ajaskey.market.ta.TickerData("hi!", calendar87, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar97 = net.ajaskey.market.misc.Utils.makeCopy(calendar87);
    boolean b98 = net.ajaskey.market.misc.Utils.sameMonth(calendar65, calendar87);
    java.lang.String str99 = net.ajaskey.market.misc.Utils.getDayName(calendar87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "30-Jan-0001"+ "'", str88.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Fri 30-Jan-0001"+ "'", str89.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "Fri"+ "'", str99.equals("Fri"));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808648763,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=237,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", 100);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808648171,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=829,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    int i9 = industryData0.getRank((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808650526,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=474,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setPriceInRange260((double)(short)100);
    java.lang.String str15 = industryData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str15.equals("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(false);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)10);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    java.lang.String str13 = tickerData0.toString();
    double d14 = tickerData0.getMfi23();
    double d15 = tickerData0.getChg65();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null\tnull\tnull\r\n"+ "'", str13.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getDiPlus();
    double d4 = derivedData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    java.lang.Double d4 = tickerData0.getSma65();
    java.lang.Double d5 = tickerData0.getSma260();
    double d6 = tickerData0.getCurrentPrice();
    java.lang.String str7 = tickerData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)10L);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt(10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10"+ "'", str1.equals("10"));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808648358,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=642,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    java.lang.String str10 = tickerData0.getTickerExchange();
    double d11 = tickerData0.getLow260();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar15);
    net.ajaskey.market.ta.TickerData tickerData18 = null;
    net.ajaskey.market.ta.TickerData tickerData19 = new net.ajaskey.market.ta.TickerData();
    double[] d_array20 = tickerData19.getTrueLowData();
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.DailyData dailyData27 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData19, calendar24);
    int i28 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData18, calendar24);
    boolean b29 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar24);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getVolumeData();
    double d32 = tickerData30.getChg65();
    double[] d_array33 = tickerData30.getOiData();
    double d34 = tickerData30.getMfi65();
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar38);
    net.ajaskey.market.ta.TickerData tickerData41 = null;
    net.ajaskey.market.ta.TickerData tickerData42 = new net.ajaskey.market.ta.TickerData();
    double[] d_array43 = tickerData42.getTrueLowData();
    java.util.Calendar calendar47 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate(calendar47);
    java.lang.String str49 = net.ajaskey.market.misc.Utils.stringDate2(calendar47);
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData42, calendar47);
    int i51 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData41, calendar47);
    boolean b52 = net.ajaskey.market.misc.Utils.sameYear(calendar38, calendar47);
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate2(calendar56);
    int i59 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData30, calendar47, calendar56);
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getVolumeData();
    double d62 = tickerData60.getChg65();
    double[] d_array63 = tickerData60.getOiData();
    double d64 = tickerData60.getMfi65();
    java.util.Calendar calendar68 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str69 = net.ajaskey.market.misc.Utils.stringDate(calendar68);
    java.lang.String str70 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar68);
    net.ajaskey.market.ta.TickerData tickerData71 = null;
    net.ajaskey.market.ta.TickerData tickerData72 = new net.ajaskey.market.ta.TickerData();
    double[] d_array73 = tickerData72.getTrueLowData();
    java.util.Calendar calendar77 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str78 = net.ajaskey.market.misc.Utils.stringDate(calendar77);
    java.lang.String str79 = net.ajaskey.market.misc.Utils.stringDate2(calendar77);
    net.ajaskey.market.ta.DailyData dailyData80 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData72, calendar77);
    int i81 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData71, calendar77);
    boolean b82 = net.ajaskey.market.misc.Utils.sameYear(calendar68, calendar77);
    java.util.Calendar calendar86 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str87 = net.ajaskey.market.misc.Utils.stringDate(calendar86);
    java.lang.String str88 = net.ajaskey.market.misc.Utils.stringDate2(calendar86);
    int i89 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData60, calendar77, calendar86);
    boolean b90 = net.ajaskey.market.misc.Utils.sameMonth(calendar47, calendar77);
    boolean b91 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar77);
    net.ajaskey.market.misc.Utils.printCalendar(calendar77);
    java.util.Calendar calendar93 = net.ajaskey.market.misc.Utils.makeCopy(calendar77);
    net.ajaskey.market.misc.Utils.printCalendar(calendar77);
    net.ajaskey.market.ta.DailyData dailyData95 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "java.util.GregorianCalendar[time=-62164808646330,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=670,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str17.equals("java.util.GregorianCalendar[time=-62164808646330,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=670,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "java.util.GregorianCalendar[time=-62164808646314,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=686,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str40.equals("java.util.GregorianCalendar[time=-62164808646314,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=686,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "30-Jan-0001"+ "'", str48.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Fri 30-Jan-0001"+ "'", str49.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Fri 30-Jan-0001"+ "'", str58.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d62 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d64 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "30-Jan-0001"+ "'", str69.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "java.util.GregorianCalendar[time=-62164808646314,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=686,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str70.equals("java.util.GregorianCalendar[time=-62164808646314,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=686,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "30-Jan-0001"+ "'", str78.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Fri 30-Jan-0001"+ "'", str79.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "30-Jan-0001"+ "'", str87.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Fri 30-Jan-0001"+ "'", str88.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData95);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getMfi65();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma65Trend();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)'4', false);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d6 = industryData0.getChg260();
    java.lang.String str7 = industryData0.getSector();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str7.equals("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsRaw();
    double d5 = derivedData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    double d3 = derivedData0.getMfi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    long long3 = industryData0.getfShares();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 0L);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getMfi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getChg65();
    double d3 = derivedData0.getChg();
    double d4 = derivedData0.getChg();
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str10 = net.ajaskey.market.misc.Utils.stringDate(calendar9);
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate2(calendar9);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData("hi!", calendar9, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str19 = tickerData18.getTickerExchange();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData18);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "30-Jan-0001"+ "'", str10.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Fri 30-Jan-0001"+ "'", str11.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Unknown"+ "'", str19.equals("Unknown"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    java.lang.String str13 = dailyData11.toString();
    double d14 = dailyData11.getTrueHigh();
    double d15 = dailyData11.getDailyChg();
    java.lang.Double d16 = dailyData11.getVolume();
    java.lang.Double d17 = dailyData11.getOpen();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str13.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d17 + "' != '" + 0.0d+ "'", d17.equals(0.0d));

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808647952,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=48,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.methods.TaMethods taMethods8 = tickerData0.getTaMethods();
    double d9 = tickerData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    tickerData0.rSort();
    java.lang.Integer i4 = tickerData0.getDaysOfData();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = tickerData0.DailyDataString((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i4 + "' != '" + 0+ "'", i4.equals(0));

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    net.ajaskey.market.ta.DailyData dailyData12 = new net.ajaskey.market.ta.DailyData(calendar4, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar4);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.getString(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "30-Jan-0001"+ "'", str14.equals("30-Jan-0001"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.TickerData tickerData8 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData6, "java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData8);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getTypicalPriceData();
    tickerData0.rSort();
    java.util.Calendar calendar4 = null;
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.makeCopy(calendar4);
    java.util.Calendar calendar6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    boolean b16 = net.ajaskey.market.misc.Utils.sameYear(calendar6, calendar12);
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData("hi!", calendar21, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar31 = net.ajaskey.market.misc.Utils.makeCopy(calendar21);
    boolean b32 = net.ajaskey.market.misc.Utils.sameDate(calendar6, calendar21);
    // The following exception was thrown during execution in test generation
    try {
    int i33 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar4, calendar21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)' ');

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getVolumeData();
    double d32 = tickerData30.getChg65();
    double[] d_array33 = tickerData30.getOiData();
    double d34 = tickerData30.getMfi65();
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar38);
    net.ajaskey.market.ta.TickerData tickerData41 = null;
    net.ajaskey.market.ta.TickerData tickerData42 = new net.ajaskey.market.ta.TickerData();
    double[] d_array43 = tickerData42.getTrueLowData();
    java.util.Calendar calendar47 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate(calendar47);
    java.lang.String str49 = net.ajaskey.market.misc.Utils.stringDate2(calendar47);
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData42, calendar47);
    int i51 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData41, calendar47);
    boolean b52 = net.ajaskey.market.misc.Utils.sameYear(calendar38, calendar47);
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate2(calendar56);
    int i59 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData30, calendar47, calendar56);
    boolean b60 = net.ajaskey.market.misc.Utils.sameMonth(calendar17, calendar47);
    java.lang.String str61 = net.ajaskey.market.misc.Utils.getMonthName(calendar47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808645877,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=123,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808645877,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=123,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "java.util.GregorianCalendar[time=-62164808645862,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=138,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str40.equals("java.util.GregorianCalendar[time=-62164808645862,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=138,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "30-Jan-0001"+ "'", str48.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Fri 30-Jan-0001"+ "'", str49.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Fri 30-Jan-0001"+ "'", str58.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "NotFound"+ "'", str61.equals("NotFound"));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("10", 0);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getMfi14();
    double[] d_array11 = tickerData0.getTrueLowData();
    double d12 = tickerData0.getChg260();
    double d13 = tickerData0.getPriceOffHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setTicker("0");
    long long5 = industryData0.getfShares();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSma65();
    double d4 = derivedData0.getCurrentPrice();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType9 = tickerData0.getSma130Trend();
    double[] d_array10 = tickerData0.getTypicalPriceData();
    double[] d_array11 = tickerData0.getHighData();
    double d12 = tickerData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    double d3 = tickerData0.getMfi23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)10L, (double)693934L, 0.0d, (double)(short)100, 100.0d, (double)(byte)1);
    long long87 = dailyData86.getDaysSinceBase();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808645659,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=341,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808645659,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=341,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808645659,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=341,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808645659,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=341,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808645659,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=341,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808645659,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=341,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 693934L);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808647188,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=812,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)693934L);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    java.lang.String str10 = tickerData0.getTickerExchange();
    double d11 = tickerData0.getLow260();
    double[] d_array12 = tickerData0.getCloseData();
    double[] d_array13 = tickerData0.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)(byte)100);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808646314,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=686,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getPriceOffLow260();
    double d5 = tickerData0.getRsi14();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)(short)(-1), false);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    tickerData0.fillDataArrays((int)(byte)(-1), false);
    net.ajaskey.market.ta.DailyData dailyData10 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)'4', (int)(short)10, 0);
    double d11 = tickerData0.getLr260();
    tickerData0.rSort();
    net.ajaskey.market.ta.TrendType trendType13 = tickerData0.getSma65Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType13);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double d9 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808646751,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=249,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getAdx();
    double d11 = tickerData0.getChg();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma260Trend();
    java.util.Calendar calendar13 = null;
    net.ajaskey.market.ta.DailyData dailyData14 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar13);
    // The following exception was thrown during execution in test generation
    try {
    double d16 = tickerData0.getClose((int)(byte)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData14);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE(10.0d);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    net.ajaskey.market.misc.Utils.TAB = "hi!";

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808651415,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=585,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808649169,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=831,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808648171,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=829,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808645831,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=169,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc23();
    double d3 = derivedData0.getAtrPercent23();
    java.lang.Double d4 = derivedData0.getSma260();
    double d5 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10"+ "'", str1.equals("10"));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData("hi!", calendar20, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str35 = net.ajaskey.market.misc.Utils.stringDate(calendar34);
    net.ajaskey.market.ta.DailyData dailyData42 = new net.ajaskey.market.ta.DailyData(calendar34, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate2(calendar34);
    long long44 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar20, calendar34);
    java.util.Calendar calendar48 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar52 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str53 = net.ajaskey.market.misc.Utils.stringDate(calendar52);
    java.lang.String str54 = net.ajaskey.market.misc.Utils.stringDate2(calendar52);
    boolean b55 = net.ajaskey.market.misc.Utils.sameYear(calendar48, calendar52);
    java.lang.String str56 = net.ajaskey.market.misc.Utils.getString(calendar52);
    boolean b57 = net.ajaskey.market.misc.Utils.sameYear(calendar34, calendar52);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate2(calendar52);
    java.util.Calendar calendar59 = net.ajaskey.market.misc.Utils.makeCopy(calendar52);
    java.lang.String str60 = net.ajaskey.market.misc.Utils.stringDate(calendar52);
    java.lang.String str61 = net.ajaskey.market.misc.Utils.getMonthName(calendar52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "30-Jan-0001"+ "'", str35.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Fri 30-Jan-0001"+ "'", str43.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "30-Jan-0001"+ "'", str53.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Fri 30-Jan-0001"+ "'", str54.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "30-Jan-0001"+ "'", str56.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Fri 30-Jan-0001"+ "'", str58.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "30-Jan-0001"+ "'", str60.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "NotFound"+ "'", str61.equals("NotFound"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    java.lang.String str4 = industryData0.getSector();
    double d5 = industryData0.getPriceInRange260();
    long long6 = industryData0.getfShares();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, 10);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData8 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData8);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    java.lang.Double d4 = tickerData0.getSma130();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    net.ajaskey.market.misc.Utils.makeDir("NotFound");

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    java.lang.Double d9 = tickerData0.getSma23();
    double d10 = tickerData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    java.lang.Double d4 = tickerData0.getSma260();
    double[] d_array5 = tickerData0.getTrueLowData();
    tickerData0.rSort();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = tickerData0.DailyDataString((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    long long15 = dailyData11.getDaysSinceBase();
    double d16 = dailyData11.getDailyPercentRng();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)(short)10, true);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getMfi130();
    java.lang.Double d5 = tickerData0.getSmaPerc65();
    net.ajaskey.market.ta.TickerData tickerData6 = new net.ajaskey.market.ta.TickerData();
    double[] d_array7 = tickerData6.getTrueLowData();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate(calendar11);
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate2(calendar11);
    net.ajaskey.market.ta.DailyData dailyData14 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData6, calendar11);
    double[] d_array15 = tickerData6.getOiData();
    double[] d_array16 = tickerData6.getOiData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData6);
    // The following exception was thrown during execution in test generation
    try {
    tickerData6.generateDerived((int)'a', false);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "30-Jan-0001"+ "'", str12.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Fri 30-Jan-0001"+ "'", str13.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808650199,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=801,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", 1);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808649029,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=971,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    java.lang.Double d2 = tickerData0.getSma65();
    net.ajaskey.market.ta.input.Fundamentals fundamentals3 = tickerData0.getFundies();
    double d4 = tickerData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((long)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10"+ "'", str1.equals("10"));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    net.ajaskey.market.ta.TickerData tickerData55 = new net.ajaskey.market.ta.TickerData("hi!", calendar46, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar38, calendar46);
    // The following exception was thrown during execution in test generation
    try {
    double d58 = tickerData0.getOi(0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808645019,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=981,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808645019,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=981,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.lang.String str14 = tickerData0.toString();
    net.ajaskey.market.ta.input.Fundamentals fundamentals15 = tickerData0.getFundies();
    net.ajaskey.market.ta.TrendType trendType16 = tickerData0.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "null\tnull\tnull\r\n"+ "'", str14.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType16);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808650448,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=552,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setShares(693934L);
    industryData0.setAvgVol((double)(byte)10);
    long long13 = industryData0.getfShares();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 0L);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getLr260();
    net.ajaskey.market.ta.TickerData tickerData3 = new net.ajaskey.market.ta.TickerData();
    double[] d_array4 = tickerData3.getVolumeData();
    double d5 = tickerData3.getChg65();
    double[] d_array6 = tickerData3.getOiData();
    java.lang.Double d7 = tickerData3.getSma65();
    java.lang.Double d8 = tickerData3.getSma260();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData3);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME(0);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    double d6 = industryData0.getRawRs();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808646065,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=935,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double[] d_array14 = tickerData13.getTypicalPriceData();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = tickerData13.DailyDataString((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setAvgVol(0.0d);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    net.ajaskey.market.misc.Utils.makeDir("Fri 30-Jan-0001");

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    industryData0.setRawRsSt((double)0);
    // The following exception was thrown during execution in test generation
    try {
    double d5 = industryData0.getSlope((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808648841,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=159,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    java.lang.String str6 = industryData0.getTicker();
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808649918,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=82,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setAvgVol((double)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)100, (int)(short)(-1), (int)(short)1);
    net.ajaskey.market.ta.methods.TaMethods taMethods8 = tickerData0.getTaMethods();
    double d9 = tickerData0.getMfi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg();
    double d8 = derivedData0.getDiPlus();
    double d9 = derivedData0.getMfi65();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getTrueLowData();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate2(calendar15);
    net.ajaskey.market.ta.DailyData dailyData18 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData10, calendar15);
    double d19 = tickerData10.getAtrPercent23();
    tickerData10.fillDataArrays((int)(short)100, false);
    double[] d_array23 = tickerData10.getTrueHighData();
    net.ajaskey.market.ta.TrendType trendType24 = tickerData10.getSma65Trend();
    double[] d_array25 = tickerData10.getHighData();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData10);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001"+ "'", str17.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808647703,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=297,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    double d9 = tickerData0.getMfi14();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808645363,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=637,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.Double d9 = tickerData0.getSmaPerc260();
    double d10 = tickerData0.getAvgVol20();
    double[] d_array11 = tickerData0.getTypicalPriceData();
    double[] d_array12 = tickerData0.getCloseData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808644388,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=612,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808645877,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=123,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getAtrPercent23();
    double d6 = derivedData0.getLr260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    industryData0.setRawRsSt(100.0d);
    // The following exception was thrown during execution in test generation
    try {
    int i12 = industryData0.getRank((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getLrSlope260();
    java.lang.Double d7 = derivedData0.getSmaPerc23();
    double d8 = derivedData0.getAvgVol65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    java.util.Map<java.lang.String,java.lang.Integer> map_str_i0 = net.ajaskey.market.misc.Utils.mapNames;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map_str_i0);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    net.ajaskey.market.misc.Utils.NL = "Unknown";

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData1 = null;
    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808648841,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=159,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)(byte)(-1));

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("java.util.GregorianCalendar[time=-62164808649013,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=987,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808651306,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=694,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    java.lang.String str2 = industryData0.getSector();
    // The following exception was thrown during execution in test generation
    try {
    int i4 = industryData0.getRank((int)(byte)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    tickerData0.rSort();
    double d4 = tickerData0.getChg130();
    double d5 = tickerData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    java.lang.Double d4 = tickerData0.getSma65();
    java.lang.Double d5 = tickerData0.getSma260();
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str10 = net.ajaskey.market.misc.Utils.stringDate(calendar9);
    net.ajaskey.market.ta.DailyData dailyData17 = new net.ajaskey.market.ta.DailyData(calendar9, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d18 = dailyData17.getTrueHigh();
    dailyData17.setTrueHigh((double)(short)0);
    long long21 = dailyData17.getDaysSinceBase();
    double d22 = dailyData17.getTrueHigh();
    tickerData0.addData(dailyData17);
    dailyData17.setDailyChg((double)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "30-Jan-0001"+ "'", str10.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 10.0d);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    tickerData0.fillDataArrays((int)' ', false);
    java.lang.Double d11 = tickerData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d11);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("hi!");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsStRaw();
    double d5 = derivedData0.getAvgVol65();
    double d6 = derivedData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setTicker("0");
    double d5 = industryData0.getChg260();
    long long6 = industryData0.getShares();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getLrSlope260();
    java.lang.Double d7 = derivedData0.getSmaPerc23();
    java.lang.Double d8 = derivedData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    net.ajaskey.market.ta.TrendType trendType1 = tickerData0.getSma130Trend();
    double d2 = tickerData0.getPriceOffHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808650542,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=458,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("java.util.GregorianCalendar[time=-62164808647952,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=48,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808650199,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=801,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", 10);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    double d13 = dailyData11.getDailyRng();
    double d14 = dailyData11.getDailyRng();
    double d15 = dailyData11.getDailyPercentRng();
    double d16 = dailyData11.getDailyPercentChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    // The following exception was thrown during execution in test generation
    try {
    tickerData8.generateDerived(false);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    long long15 = dailyData11.getDaysSinceBase();
    double d16 = dailyData11.getTrueHigh();
    java.lang.String str17 = dailyData11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str17.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getTrueLow();
    java.lang.Double d14 = dailyData11.getOpen();
    dailyData11.setVolume((double)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 0.0d+ "'", d14.equals(0.0d));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getDiPlus();
    java.lang.Double d4 = derivedData0.getSma65();
    double d5 = derivedData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)1);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg();
    double d5 = tickerData0.getRsStRaw();
    double d6 = tickerData0.getDiPlus();
    java.lang.Integer i7 = tickerData0.getDaysOfData();
    double d8 = tickerData0.getMfi14();
    net.ajaskey.market.ta.methods.TaMethods taMethods9 = tickerData0.getTaMethods();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods9);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    double d2 = tickerData0.getCurrentPrice();
    double[] d_array3 = tickerData0.getTrueHighData();
    net.ajaskey.market.ta.TickerData tickerData4 = new net.ajaskey.market.ta.TickerData();
    double[] d_array5 = tickerData4.getVolumeData();
    double d6 = tickerData4.getChg65();
    double[] d_array7 = tickerData4.getOiData();
    double d8 = tickerData4.getMfi65();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar12);
    net.ajaskey.market.ta.TickerData tickerData15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData15, calendar21);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar21);
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate(calendar30);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate2(calendar30);
    int i33 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData4, calendar21, calendar30);
    net.ajaskey.market.ta.TickerData tickerData34 = new net.ajaskey.market.ta.TickerData();
    double[] d_array35 = tickerData34.getVolumeData();
    double d36 = tickerData34.getChg65();
    double[] d_array37 = tickerData34.getOiData();
    double d38 = tickerData34.getMfi65();
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    java.lang.String str44 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar42);
    net.ajaskey.market.ta.TickerData tickerData45 = null;
    net.ajaskey.market.ta.TickerData tickerData46 = new net.ajaskey.market.ta.TickerData();
    double[] d_array47 = tickerData46.getTrueLowData();
    java.util.Calendar calendar51 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str52 = net.ajaskey.market.misc.Utils.stringDate(calendar51);
    java.lang.String str53 = net.ajaskey.market.misc.Utils.stringDate2(calendar51);
    net.ajaskey.market.ta.DailyData dailyData54 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData46, calendar51);
    int i55 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData45, calendar51);
    boolean b56 = net.ajaskey.market.misc.Utils.sameYear(calendar42, calendar51);
    java.util.Calendar calendar60 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str61 = net.ajaskey.market.misc.Utils.stringDate(calendar60);
    java.lang.String str62 = net.ajaskey.market.misc.Utils.stringDate2(calendar60);
    int i63 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData34, calendar51, calendar60);
    boolean b64 = net.ajaskey.market.misc.Utils.sameMonth(calendar21, calendar51);
    net.ajaskey.market.ta.DailyData dailyData65 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar21);
    // The following exception was thrown during execution in test generation
    try {
    double d67 = tickerData0.getVolume((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808643832,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=168,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808643832,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=168,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "30-Jan-0001"+ "'", str31.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Fri 30-Jan-0001"+ "'", str32.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d36 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d38 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "java.util.GregorianCalendar[time=-62164808643832,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=168,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str44.equals("java.util.GregorianCalendar[time=-62164808643832,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=168,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "30-Jan-0001"+ "'", str52.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Fri 30-Jan-0001"+ "'", str53.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "30-Jan-0001"+ "'", str61.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Fri 30-Jan-0001"+ "'", str62.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData65);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg65();
    double d8 = derivedData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    java.lang.String str6 = industryData0.getTicker();
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808649918,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=82,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.String str9 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    double d6 = derivedData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)'a');

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getAtrPercent23();
    double d6 = derivedData0.getRsi14();
    double d7 = derivedData0.getChg65();
    double d8 = derivedData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808650760,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=240,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808651930,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=70,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getLrInt260();
    double d7 = derivedData0.getPriceOffHigh260();
    double d8 = derivedData0.getPriceOffHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getAtrPercent23();
    double d6 = derivedData0.getCurrentPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d6 = industryData0.getChg260();
    industryData0.setExch("hi!");
    // The following exception was thrown during execution in test generation
    try {
    int i10 = industryData0.getRank((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == (-1.0d));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getTrueLow();
    tickerData0.addData(dailyData50);
    long long54 = dailyData50.getDaysSinceBase();
    java.lang.Double d55 = dailyData50.getLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808643457,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=543,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808643457,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=543,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d55 + "' != '" + 0.0d+ "'", d55.equals(0.0d));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    java.lang.String str7 = tickerData0.getTicker();
    java.lang.Double d8 = tickerData0.getSma260();
    double[] d_array9 = tickerData0.getOiData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "HI!"+ "'", str7.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setPriceInRange260((double)(byte)100);
    double d8 = industryData0.getRawRs();
    industryData0.setAvgVol((double)100L);
    java.lang.String str11 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.util.Calendar calendar14 = null;
    net.ajaskey.market.ta.TickerData tickerData15 = new net.ajaskey.market.ta.TickerData();
    double[] d_array16 = tickerData15.getTrueLowData();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.DailyData dailyData23 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData15, calendar20);
    boolean b24 = net.ajaskey.market.misc.Utils.sameYear(calendar14, calendar20);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d28 = tickerData0.getAtrPercent23();
    java.lang.String str29 = tickerData0.getTicker();
    java.lang.String str30 = tickerData0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "null\tnull\tjava.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n\r\n"+ "'", str30.equals("null\tnull\tjava.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n\r\n"));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)(-1L));

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    double d2 = tickerData0.getCurrentPrice();
    java.util.Calendar calendar6 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate(calendar6);
    net.ajaskey.market.ta.DailyData dailyData14 = new net.ajaskey.market.ta.DailyData(calendar6, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d15 = dailyData14.getHigh();
    java.lang.Double d16 = dailyData14.getOpen();
    tickerData0.addData(dailyData14);
    double d18 = dailyData14.getDailyChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "30-Jan-0001"+ "'", str7.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 10.0d+ "'", d15.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.getDayName(calendar3);
    net.ajaskey.market.misc.Utils.printCalendar(calendar3);
    java.util.Calendar calendar7 = null;
    boolean b8 = net.ajaskey.market.misc.Utils.sameMonth(calendar3, calendar7);
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate2(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Fri"+ "'", str5.equals("Fri"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getDailyPercentRng();
    java.lang.Double d15 = dailyData11.getLow();
    java.lang.Double d16 = dailyData11.getOpen();
    dailyData11.setTrueHigh(10.0d);
    java.lang.String str19 = dailyData11.toString();
    double d20 = dailyData11.getDailyPercentChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str19.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsStRaw();
    double d5 = derivedData0.getAvgVol65();
    double d6 = derivedData0.getRsStRaw();
    java.lang.Double d7 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getChg();
    double d7 = derivedData0.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1"+ "'", str1.equals("1"));

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    double d12 = tickerData0.getMfi23();
    double d13 = tickerData0.getMfi130();
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate(calendar18);
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate2(calendar18);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData("hi!", calendar18, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    double d28 = tickerData27.getAvgVol20();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData27);
    double[] d_array30 = tickerData27.getOiData();
    java.lang.String str31 = tickerData27.getTicker();
    java.lang.String str32 = tickerData27.getTickerExchange();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "30-Jan-0001"+ "'", str19.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Fri 30-Jan-0001"+ "'", str20.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "HI!"+ "'", str31.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Unknown"+ "'", str32.equals("Unknown"));

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg();
    double d5 = tickerData0.getRsStRaw();
    double d6 = tickerData0.getAdx();
    java.lang.String str7 = tickerData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808643613,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=387,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getDailyPercentChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)10L, (double)693934L, 0.0d, (double)(short)100, 100.0d, (double)(byte)1);
    java.lang.Double d87 = dailyData86.getOpen();
    java.lang.Double d88 = dailyData86.getLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808643114,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=886,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808643114,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=886,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808643114,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=886,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808643114,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=886,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808643114,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=886,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808643114,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=886,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d87 + "' != '" + 10.0d+ "'", d87.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d88 + "' != '" + 0.0d+ "'", d88.equals(0.0d));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    net.ajaskey.market.ta.DailyData dailyData13 = new net.ajaskey.market.ta.DailyData(calendar5, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    tickerData0.addData(dailyData13);
    dailyData13.setDailyChg((double)'a');
    double d17 = dailyData13.getDailyPercentRng();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("0");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    java.lang.Double d6 = derivedData0.getSmaPerc23();
    java.lang.Double d7 = derivedData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getAvgVol65();
    double d8 = derivedData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getAdx();
    double d11 = tickerData0.getChg();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma260Trend();
    double[] d_array13 = tickerData0.getTrueLowData();
    java.lang.Double d14 = tickerData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d14);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    net.ajaskey.market.ta.TickerData tickerData55 = new net.ajaskey.market.ta.TickerData("hi!", calendar46, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar38, calendar46);
    double d57 = tickerData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808642833,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=57,MILLISECOND=167,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808642833,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=57,MILLISECOND=167,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d57 == 0.0d);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    java.lang.String str14 = tickerData8.getTicker();
    net.ajaskey.market.ta.TrendType trendType15 = tickerData8.getSma260Trend();
    java.lang.Double d16 = tickerData8.getSmaPerc260();
    java.lang.String str17 = tickerData8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "null\tnull\tnull\r\n"+ "'", str17.equals("null\tnull\tnull\r\n"));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getChg65();
    double d6 = derivedData0.getPriceOffLow260();
    java.lang.Double d7 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData5);
    net.ajaskey.market.ta.TickerData tickerData8 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData5, "30-Jan-0001");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData8);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double d6 = tickerData0.getDiMinus();
    tickerData0.setTicker("hi!");
    double d9 = tickerData0.getChg260();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getTrueLowData();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate2(calendar15);
    net.ajaskey.market.ta.DailyData dailyData18 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData10, calendar15);
    double d19 = tickerData10.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType20 = tickerData10.getSma130Trend();
    double[] d_array21 = tickerData10.getVolumeData();
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData10, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate(calendar30);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate2(calendar30);
    net.ajaskey.market.ta.TickerData tickerData39 = new net.ajaskey.market.ta.TickerData("hi!", calendar30, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData40 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData10, calendar30);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    net.ajaskey.market.ta.DailyData dailyData52 = new net.ajaskey.market.ta.DailyData(calendar44, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str53 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    long long54 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar30, calendar44);
    java.util.Calendar calendar58 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar62 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str63 = net.ajaskey.market.misc.Utils.stringDate(calendar62);
    java.lang.String str64 = net.ajaskey.market.misc.Utils.stringDate2(calendar62);
    boolean b65 = net.ajaskey.market.misc.Utils.sameYear(calendar58, calendar62);
    java.lang.String str66 = net.ajaskey.market.misc.Utils.getString(calendar62);
    boolean b67 = net.ajaskey.market.misc.Utils.sameYear(calendar44, calendar62);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar44);
    double[] d_array69 = tickerData0.getTrueHighData();
    java.lang.Double d70 = tickerData0.getSma260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001"+ "'", str17.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "30-Jan-0001"+ "'", str31.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Fri 30-Jan-0001"+ "'", str32.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Fri 30-Jan-0001"+ "'", str53.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "30-Jan-0001"+ "'", str63.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Fri 30-Jan-0001"+ "'", str64.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d70);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.TickerData tickerData8 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData6, "java.util.GregorianCalendar[time=-62164808649029,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=971,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData8);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808650526,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=474,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    java.lang.Double d4 = tickerData0.getSma65();
    net.ajaskey.market.ta.TickerData tickerData5 = new net.ajaskey.market.ta.TickerData();
    double[] d_array6 = tickerData5.getTrueLowData();
    java.util.Calendar calendar10 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate(calendar10);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate2(calendar10);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar10);
    double d14 = tickerData5.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType15 = tickerData5.getSma130Trend();
    double[] d_array16 = tickerData5.getVolumeData();
    int i20 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData5, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate2(calendar25);
    net.ajaskey.market.ta.TickerData tickerData34 = new net.ajaskey.market.ta.TickerData("hi!", calendar25, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData35 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar25);
    java.util.Calendar calendar39 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate(calendar39);
    net.ajaskey.market.ta.DailyData dailyData47 = new net.ajaskey.market.ta.DailyData(calendar39, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar39);
    long long49 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar25, calendar39);
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar39);
    java.lang.String str51 = net.ajaskey.market.misc.Utils.getString(calendar39);
    java.util.Calendar calendar52 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long53 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar39, calendar52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Fri 30-Jan-0001"+ "'", str12.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Fri 30-Jan-0001"+ "'", str27.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "30-Jan-0001"+ "'", str40.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "30-Jan-0001"+ "'", str51.equals("30-Jan-0001"));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setMarketCap("NotFound");
    double d14 = industryData0.getAvgVol();
    double d15 = industryData0.getRawRsSt();
    java.lang.String str16 = industryData0.getTicker();
    industryData0.setShares(693934L);
    industryData0.setChg260((double)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808644848,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=152,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    long long15 = dailyData11.getDaysSinceBase();
    double d16 = dailyData11.getDailyChg();
    double d17 = dailyData11.getDailyPercentRng();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((long)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1"+ "'", str1.equals("1"));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME(1);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("");

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    java.lang.Double d8 = tickerData0.getSmaPerc23();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc130();
    double d4 = derivedData0.getChg65();
    double d5 = derivedData0.getPriceInRng260();
    java.lang.Double d6 = derivedData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOiData();
    int i11 = tickerData0.getDataCount();
    double d12 = tickerData0.getCurrentPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setName("100");
    double d3 = industryData0.getPriceInRange260();
    java.lang.String str4 = industryData0.getRanks();
    java.lang.String str5 = industryData0.getSector();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getMfi14();
    double[] d_array11 = tickerData0.getTrueLowData();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma23Trend();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = tickerData0.DailyDataString((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    double d9 = tickerData0.getLow260();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate2(calendar14);
    net.ajaskey.market.ta.TickerData tickerData23 = new net.ajaskey.market.ta.TickerData("hi!", calendar14, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str24 = tickerData23.getTickerExchange();
    java.util.Calendar calendar25 = null;
    net.ajaskey.market.ta.TickerData tickerData26 = new net.ajaskey.market.ta.TickerData();
    double[] d_array27 = tickerData26.getTrueLowData();
    java.util.Calendar calendar31 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate(calendar31);
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate2(calendar31);
    net.ajaskey.market.ta.DailyData dailyData34 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData26, calendar31);
    boolean b35 = net.ajaskey.market.misc.Utils.sameYear(calendar25, calendar31);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData37 = net.ajaskey.market.ta.TickerData.getSlice(tickerData23, calendar31, (int)(byte)(-1));
    java.util.Calendar calendar41 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str42 = net.ajaskey.market.misc.Utils.stringDate(calendar41);
    net.ajaskey.market.ta.DailyData dailyData49 = new net.ajaskey.market.ta.DailyData(calendar41, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar53 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b54 = net.ajaskey.market.misc.Utils.sameYear(calendar41, calendar53);
    boolean b55 = net.ajaskey.market.misc.Utils.sameYear(calendar31, calendar53);
    net.ajaskey.market.ta.DailyData dailyData56 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar53);
    java.lang.String str57 = net.ajaskey.market.misc.Utils.getDayName(calendar53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Fri 30-Jan-0001"+ "'", str16.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Unknown"+ "'", str24.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "30-Jan-0001"+ "'", str32.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Fri 30-Jan-0001"+ "'", str33.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "30-Jan-0001"+ "'", str42.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Fri"+ "'", str57.equals("Fri"));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    java.lang.String str13 = tickerData0.toString();
    double d14 = tickerData0.getMfi23();
    java.lang.String str15 = tickerData0.toString();
    double d16 = tickerData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null\tnull\tnull\r\n"+ "'", str13.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "null\tnull\tnull\r\n"+ "'", str15.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(short)(-1), 0, (int)(short)1);
    net.ajaskey.market.ta.DailyData dailyData10 = new net.ajaskey.market.ta.DailyData(calendar3, (double)'#', (double)(byte)100, (double)(byte)(-1), (double)(short)(-1), (double)100, (double)(-1L));
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    java.lang.String str16 = net.ajaskey.market.misc.Utils.getDayName(calendar14);
    net.ajaskey.market.ta.TickerData tickerData17 = new net.ajaskey.market.ta.TickerData();
    double[] d_array18 = tickerData17.getVolumeData();
    double d19 = tickerData17.getChg65();
    double[] d_array20 = tickerData17.getOiData();
    double d21 = tickerData17.getMfi65();
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar25);
    net.ajaskey.market.ta.TickerData tickerData28 = null;
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData();
    double[] d_array30 = tickerData29.getTrueLowData();
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str35 = net.ajaskey.market.misc.Utils.stringDate(calendar34);
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate2(calendar34);
    net.ajaskey.market.ta.DailyData dailyData37 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData29, calendar34);
    int i38 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData28, calendar34);
    boolean b39 = net.ajaskey.market.misc.Utils.sameYear(calendar25, calendar34);
    java.util.Calendar calendar43 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str44 = net.ajaskey.market.misc.Utils.stringDate(calendar43);
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate2(calendar43);
    int i46 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData17, calendar34, calendar43);
    java.util.Calendar calendar50 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str51 = net.ajaskey.market.misc.Utils.stringDate(calendar50);
    net.ajaskey.market.ta.DailyData dailyData58 = new net.ajaskey.market.ta.DailyData(calendar50, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar62 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b63 = net.ajaskey.market.misc.Utils.sameYear(calendar50, calendar62);
    long long64 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar43, calendar62);
    boolean b65 = net.ajaskey.market.misc.Utils.sameMonth(calendar14, calendar43);
    boolean b66 = net.ajaskey.market.misc.Utils.sameDate(calendar3, calendar14);
    java.util.Calendar calendar67 = null;
    java.util.Calendar calendar68 = net.ajaskey.market.misc.Utils.makeCopy(calendar67);
    boolean b69 = net.ajaskey.market.misc.Utils.sameDate(calendar3, calendar67);
    java.lang.String str70 = net.ajaskey.market.misc.Utils.getMonthName(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Fri"+ "'", str16.equals("Fri"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "java.util.GregorianCalendar[time=-62164808641944,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=56,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str27.equals("java.util.GregorianCalendar[time=-62164808641944,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=56,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "30-Jan-0001"+ "'", str35.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Fri 30-Jan-0001"+ "'", str36.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "30-Jan-0001"+ "'", str44.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Fri 30-Jan-0001"+ "'", str45.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "30-Jan-0001"+ "'", str51.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "unknown-month"+ "'", str70.equals("unknown-month"));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getAtr23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((long)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1"+ "'", str1.equals("1"));

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    java.lang.Double d10 = tickerData0.getSma260();
    net.ajaskey.market.ta.TrendType trendType11 = tickerData0.getSma130Trend();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(byte)(-1), (-1), 0);
    double d16 = tickerData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getDailyPercentRng();
    dailyData11.setTrueHigh((double)(short)(-1));
    dailyData11.setTrueHigh((-1.0d));
    double d19 = dailyData11.getDailyChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    net.ajaskey.market.ta.DailyData dailyData13 = new net.ajaskey.market.ta.DailyData(calendar5, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    tickerData0.addData(dailyData13);
    tickerData0.setTicker("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    java.lang.Double d17 = tickerData0.getSmaPerc65();
    tickerData0.setTicker("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d17);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    tickerData0.setTickerExchange("HI!");
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma260Trend();
    double d8 = tickerData0.getAvgVol65();
    double[] d_array9 = tickerData0.getHighData();
    double d10 = tickerData0.getChg130();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)'a', false);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808642428,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=57,MILLISECOND=572,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.util.Calendar calendar14 = dailyData11.getDate();
    dailyData11.setTrueHigh((-1.0d));
    dailyData11.setDailyChg(1.0d);
    dailyData11.setTrueHigh((double)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceInRng260();
    double d3 = derivedData0.getMfi14();
    double d4 = derivedData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setRawRsSt((double)100.0f);
    // The following exception was thrown during execution in test generation
    try {
    int i9 = industryData0.getRank((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double d9 = tickerData0.getDiPlus();
    java.util.Calendar[] calendar_array10 = tickerData0.getDateData();
    double d11 = tickerData0.getChg130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getLr260();
    double d8 = derivedData0.getChg260();
    double d9 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setTicker("0");
    double d5 = industryData0.getChg260();
    // The following exception was thrown during execution in test generation
    try {
    int i7 = industryData0.getRank((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == (-1.0d));

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    double d3 = derivedData0.getMfi14();
    java.lang.Double d4 = derivedData0.getSmaPerc23();
    double d5 = derivedData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)10, (int)(byte)1, (int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808647188,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=812,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    double d13 = tickerData0.getPriceOffLow260();
    double d14 = tickerData0.getAvgVol20();
    double d15 = tickerData0.getLow260();
    java.lang.String str16 = tickerData0.toString();
    double d17 = tickerData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "null\tnull\tnull\r\n"+ "'", str16.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d11 = industryData0.getAvgVol();
    industryData0.setRawRsSt((double)(short)100);
    java.lang.String str14 = industryData0.getMarketCap();
    industryData0.setChg260((double)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    double d14 = tickerData13.getChg23();
    double d15 = tickerData13.getChg260();
    double d16 = tickerData13.getAvgVol20();
    int i20 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData13, (int)(short)1, 1, (int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808642662,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=57,MILLISECOND=338,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    java.lang.Double d9 = tickerData0.getSma23();
    net.ajaskey.market.ta.methods.TaMethods taMethods10 = tickerData0.getTaMethods();
    double d11 = tickerData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    tickerData0.rSort();
    double d4 = tickerData0.getChg130();
    double d5 = tickerData0.getAvgVol20();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = tickerData0.DailyDataString((int)(short)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData11);
    java.lang.Double d14 = tickerData0.getSmaPerc260();
    double[] d_array15 = tickerData0.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getMfi130();
    java.lang.Double d5 = tickerData0.getSmaPerc65();
    java.lang.Double d6 = tickerData0.getSma65();
    double d7 = tickerData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getTrueLow();
    double d14 = dailyData11.getDailyRng();
    java.lang.Double d15 = dailyData11.getOpen();
    java.util.Calendar calendar16 = dailyData11.getDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar16);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsStRaw();
    double d5 = derivedData0.getAvgVol65();
    double d6 = derivedData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.TickerData tickerData8 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData6, "java.util.GregorianCalendar[time=-62164808647609,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=391,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData8);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_VOLUME((int)(short)10);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    industryData0.setRank(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("", (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "100"+ "'", str1.equals("100"));

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    industryData0.setRawRsSt(100.0d);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setShares((long)'a');
    java.lang.String str14 = industryData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.util.Calendar calendar14 = null;
    net.ajaskey.market.ta.TickerData tickerData15 = new net.ajaskey.market.ta.TickerData();
    double[] d_array16 = tickerData15.getTrueLowData();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.DailyData dailyData23 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData15, calendar20);
    boolean b24 = net.ajaskey.market.misc.Utils.sameYear(calendar14, calendar20);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d28 = tickerData0.getAtrPercent23();
    java.lang.String str29 = tickerData0.getTicker();
    double d30 = tickerData0.getAtrPercent23();
    double d31 = tickerData0.getAtr23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE(1.0d);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    double d13 = tickerData0.getPriceOffLow260();
    double d14 = tickerData0.getAvgVol20();
    double d15 = tickerData0.getAvgVol20();
    java.lang.Double d16 = tickerData0.getSma23();
    java.util.Calendar[] calendar_array17 = tickerData0.getDateData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array17);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    tickerData0.rSort();
    double d4 = tickerData0.getChg130();
    double d5 = tickerData0.getAvgVol20();
    double[] d_array6 = tickerData0.getOpenData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsStRaw();
    double d5 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setPriceInRange260((double)(byte)100);
    double d8 = industryData0.getRawRs();
    industryData0.setMarketCap("");
    java.lang.String str11 = industryData0.getTicker();
    java.lang.String str12 = industryData0.getExch();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getChg65();
    double d6 = derivedData0.getRsi14();
    java.lang.Double d7 = derivedData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    industryData0.setRawRsSt((double)0);
    // The following exception was thrown during execution in test generation
    try {
    int i5 = industryData0.getRank(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    java.lang.Double d5 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar12);
    net.ajaskey.market.ta.TickerData tickerData15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData15, calendar21);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar21);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData();
    double[] d_array28 = tickerData27.getVolumeData();
    double d29 = tickerData27.getChg65();
    double[] d_array30 = tickerData27.getOiData();
    double d31 = tickerData27.getMfi65();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar35);
    net.ajaskey.market.ta.TickerData tickerData38 = null;
    net.ajaskey.market.ta.TickerData tickerData39 = new net.ajaskey.market.ta.TickerData();
    double[] d_array40 = tickerData39.getTrueLowData();
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    net.ajaskey.market.ta.DailyData dailyData47 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData39, calendar44);
    int i48 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData38, calendar44);
    boolean b49 = net.ajaskey.market.misc.Utils.sameYear(calendar35, calendar44);
    java.util.Calendar calendar53 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str54 = net.ajaskey.market.misc.Utils.stringDate(calendar53);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar53);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData27, calendar44, calendar53);
    net.ajaskey.market.ta.TickerData tickerData57 = new net.ajaskey.market.ta.TickerData();
    double[] d_array58 = tickerData57.getVolumeData();
    double d59 = tickerData57.getChg65();
    double[] d_array60 = tickerData57.getOiData();
    double d61 = tickerData57.getMfi65();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar65);
    net.ajaskey.market.ta.TickerData tickerData68 = null;
    net.ajaskey.market.ta.TickerData tickerData69 = new net.ajaskey.market.ta.TickerData();
    double[] d_array70 = tickerData69.getTrueLowData();
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    net.ajaskey.market.ta.DailyData dailyData77 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData69, calendar74);
    int i78 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData68, calendar74);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar65, calendar74);
    java.util.Calendar calendar83 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str84 = net.ajaskey.market.misc.Utils.stringDate(calendar83);
    java.lang.String str85 = net.ajaskey.market.misc.Utils.stringDate2(calendar83);
    int i86 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData57, calendar74, calendar83);
    boolean b87 = net.ajaskey.market.misc.Utils.sameMonth(calendar44, calendar74);
    boolean b88 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar74);
    int i89 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar74);
    java.lang.Double d90 = tickerData0.getSma65();
    java.lang.Double d91 = tickerData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808641242,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=758,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808641242,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=758,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "java.util.GregorianCalendar[time=-62164808641242,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=758,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str37.equals("java.util.GregorianCalendar[time=-62164808641242,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=758,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "30-Jan-0001"+ "'", str54.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d59 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d61 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "java.util.GregorianCalendar[time=-62164808641242,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=758,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str67.equals("java.util.GregorianCalendar[time=-62164808641242,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=758,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "30-Jan-0001"+ "'", str84.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Fri 30-Jan-0001"+ "'", str85.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d91);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    java.lang.String str4 = industryData0.getSector();
    double d5 = industryData0.getPriceInRange260();
    // The following exception was thrown during execution in test generation
    try {
    double d7 = industryData0.getSlope(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    double[] d_array3 = tickerData0.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setTicker("0");
    long long5 = industryData0.getShares();
    industryData0.setChg260((double)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    java.lang.String str6 = industryData0.getTicker();
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808649918,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=82,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d9 = industryData0.getRawRs();
    industryData0.setRawRs((double)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double[] d_array6 = tickerData0.getTrueHighData();
    tickerData0.setTicker("NotFound");
    java.lang.String str9 = tickerData0.toString();
    tickerData0.fillDataArrays((int)(byte)100, true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "NOTFOUND\tnull\tnull\r\n"+ "'", str9.equals("NOTFOUND\tnull\tnull\r\n"));

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    dailyData11.setDailyChg(1.0d);
    java.lang.Double d14 = dailyData11.getOpen();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 0.0d+ "'", d14.equals(0.0d));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    double d9 = industryData0.getRawRsSt();
    double d10 = industryData0.getRawRs();
    // The following exception was thrown during execution in test generation
    try {
    double d12 = industryData0.getSlope((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 100.0d);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getAtrPercent23();
    double d6 = derivedData0.getRsi14();
    double d7 = derivedData0.getChg65();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getTrueLowData();
    double d10 = tickerData8.getCurrentPrice();
    double[] d_array11 = tickerData8.getTrueHighData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    net.ajaskey.market.ta.TickerData tickerData42 = new net.ajaskey.market.ta.TickerData();
    double[] d_array43 = tickerData42.getVolumeData();
    double d44 = tickerData42.getChg65();
    double[] d_array45 = tickerData42.getOiData();
    double d46 = tickerData42.getMfi65();
    java.util.Calendar calendar50 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str51 = net.ajaskey.market.misc.Utils.stringDate(calendar50);
    java.lang.String str52 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar50);
    net.ajaskey.market.ta.TickerData tickerData53 = null;
    net.ajaskey.market.ta.TickerData tickerData54 = new net.ajaskey.market.ta.TickerData();
    double[] d_array55 = tickerData54.getTrueLowData();
    java.util.Calendar calendar59 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str60 = net.ajaskey.market.misc.Utils.stringDate(calendar59);
    java.lang.String str61 = net.ajaskey.market.misc.Utils.stringDate2(calendar59);
    net.ajaskey.market.ta.DailyData dailyData62 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData54, calendar59);
    int i63 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData53, calendar59);
    boolean b64 = net.ajaskey.market.misc.Utils.sameYear(calendar50, calendar59);
    java.util.Calendar calendar68 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str69 = net.ajaskey.market.misc.Utils.stringDate(calendar68);
    java.lang.String str70 = net.ajaskey.market.misc.Utils.stringDate2(calendar68);
    int i71 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData42, calendar59, calendar68);
    boolean b72 = net.ajaskey.market.misc.Utils.sameMonth(calendar29, calendar59);
    net.ajaskey.market.ta.DailyData dailyData73 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData8, calendar29);
    double[] d_array74 = tickerData8.getTrueLowData();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData8);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808640973,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=27,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808640973,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=27,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "30-Jan-0001"+ "'", str51.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "java.util.GregorianCalendar[time=-62164808640973,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=27,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str52.equals("java.util.GregorianCalendar[time=-62164808640973,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=27,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "30-Jan-0001"+ "'", str60.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Fri 30-Jan-0001"+ "'", str61.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "30-Jan-0001"+ "'", str69.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Fri 30-Jan-0001"+ "'", str70.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array74);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("java.util.GregorianCalendar[time=-62164808642802,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=57,MILLISECOND=198,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double d6 = tickerData0.getDiMinus();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = tickerData0.DailyDataString(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData1 = null;
    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808644388,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=612,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    double d14 = tickerData8.getChg260();
    java.lang.Double d15 = tickerData8.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d15);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    net.ajaskey.market.ta.TickerData tickerData2 = new net.ajaskey.market.ta.TickerData();
    double[] d_array3 = tickerData2.getVolumeData();
    double d4 = tickerData2.getChg65();
    int i8 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData2, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType9 = tickerData2.getSma130Trend();
    double d10 = tickerData2.getHigh260();
    double[] d_array11 = tickerData2.getOiData();
    double d12 = tickerData2.getMfi14();
    double d13 = tickerData2.getDiMinus();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData2);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("NOTFOUND\tnull\tnull\r\n");

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank(0);
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808648436,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=564,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    java.lang.Double d9 = tickerData0.getSma23();
    net.ajaskey.market.ta.methods.TaMethods taMethods10 = tickerData0.getTaMethods();
    double[] d_array11 = tickerData0.getHighData();
    java.lang.Double d12 = tickerData0.getSmaPerc23();
    java.lang.String str13 = tickerData0.getTickerName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'#', (int)(short)10, (int)(byte)0);
    tickerData0.rSort();
    double d9 = tickerData0.getLrInt260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.util.Calendar calendar14 = null;
    net.ajaskey.market.ta.TickerData tickerData15 = new net.ajaskey.market.ta.TickerData();
    double[] d_array16 = tickerData15.getTrueLowData();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.DailyData dailyData23 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData15, calendar20);
    boolean b24 = net.ajaskey.market.misc.Utils.sameYear(calendar14, calendar20);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData();
    double[] d_array28 = tickerData27.getVolumeData();
    double d29 = tickerData27.getChg65();
    double[] d_array30 = tickerData27.getOiData();
    double d31 = tickerData27.getMfi65();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar35);
    net.ajaskey.market.ta.TickerData tickerData38 = null;
    net.ajaskey.market.ta.TickerData tickerData39 = new net.ajaskey.market.ta.TickerData();
    double[] d_array40 = tickerData39.getTrueLowData();
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    net.ajaskey.market.ta.DailyData dailyData47 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData39, calendar44);
    int i48 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData38, calendar44);
    boolean b49 = net.ajaskey.market.misc.Utils.sameYear(calendar35, calendar44);
    java.util.Calendar calendar53 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str54 = net.ajaskey.market.misc.Utils.stringDate(calendar53);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar53);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData27, calendar44, calendar53);
    boolean b57 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "java.util.GregorianCalendar[time=-62164808640645,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=355,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str37.equals("java.util.GregorianCalendar[time=-62164808640645,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=355,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "30-Jan-0001"+ "'", str54.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    double d4 = derivedData0.getRsi14();
    java.lang.Double d5 = derivedData0.getSmaPerc65();
    double d6 = derivedData0.getLrAngle260();
    double d7 = derivedData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getTypicalPriceData();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = tickerData0.DailyDataString(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData("hi!", calendar20, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    double[] d_array31 = tickerData0.getOiData();
    java.lang.Double d32 = tickerData0.getSma130();
    double[] d_array33 = tickerData0.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array33);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808641741,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=259,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    industryData0.setChg260((double)0.0f);
    // The following exception was thrown during execution in test generation
    try {
    int i5 = industryData0.getRank((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, 0, (int)(byte)0, (int)(short)100);
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    double d15 = dailyData11.getDailyRng();
    java.lang.Double d16 = dailyData11.getOi();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)(-1), 100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = tickerData0.DailyDataString((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.getMonthName((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NotFound"+ "'", str1.equals("NotFound"));

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808640895,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=105,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    java.lang.String str13 = tickerData0.toString();
    double d14 = tickerData0.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null\tnull\tnull\r\n"+ "'", str13.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg();
    double d5 = tickerData0.getRsStRaw();
    double d6 = tickerData0.getDiPlus();
    java.lang.Integer i7 = tickerData0.getDaysOfData();
    int i11 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, 0, (int)'#', 10);
    java.lang.Double d12 = tickerData0.getSmaPerc130();
    net.ajaskey.market.ta.TrendType trendType13 = tickerData0.getSma23Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType13);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double d2 = tickerData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    tickerData0.fillDataArrays((int)(byte)(-1), false);
    net.ajaskey.market.ta.DailyData dailyData10 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)'4', (int)(short)10, 0);
    net.ajaskey.market.ta.input.Fundamentals fundamentals11 = tickerData0.getFundies();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals11);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getLrAngle260();
    double d3 = derivedData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc23();
    double d3 = derivedData0.getAtrPercent23();
    double d4 = derivedData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    tickerData0.fillDataArrays((int)(byte)0, true);
    java.lang.String str8 = tickerData0.toString();
    double d9 = tickerData0.getAtrPercent23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "null\tnull\tnull\r\n"+ "'", str8.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    double d6 = derivedData0.getPriceInRng260();
    java.lang.Double d7 = derivedData0.getSmaPerc130();
    double d8 = derivedData0.getLr260();
    double d9 = derivedData0.getMfi130();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getVolumeData();
    double d12 = tickerData10.getChg65();
    tickerData10.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType15 = tickerData10.getSma65Trend();
    double[] d_array16 = tickerData10.getTypicalPriceData();
    java.lang.String str17 = tickerData10.getTicker();
    net.ajaskey.market.ta.TrendType trendType18 = tickerData10.getSma65Trend();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData10);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "HI!"+ "'", str17.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType18);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)(short)1);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    double[] d_array5 = tickerData0.getTrueLowData();
    double d6 = tickerData0.getHigh260();
    double d7 = tickerData0.getAdx();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.makeCopy(calendar11);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar11);
    java.util.Calendar calendar14 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long15 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar11, calendar14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    java.util.ArrayList<java.lang.String> arraylist_str1 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array3 = new java.lang.String[] { "30-Jan-0001" };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str1, str_array3);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str1, (int)'#');
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str1);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str1);
    net.ajaskey.market.ta.TickerData tickerData10 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808641303,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=697,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData10);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getPriceOffHigh260();
    double d6 = derivedData0.getPriceInRng260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData11);
    double[] d_array14 = tickerData11.getHighData();
    java.lang.Double d15 = tickerData11.getSmaPerc65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d15);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setName("100");
    double d3 = industryData0.getPriceInRange260();
    industryData0.setRawRsSt((double)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    java.util.Calendar calendar31 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate(calendar31);
    net.ajaskey.market.ta.DailyData dailyData39 = new net.ajaskey.market.ta.DailyData(calendar31, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar43 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b44 = net.ajaskey.market.misc.Utils.sameYear(calendar31, calendar43);
    boolean b45 = net.ajaskey.market.misc.Utils.sameYear(calendar21, calendar43);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.getMonthName(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "30-Jan-0001"+ "'", str32.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "NotFound"+ "'", str46.equals("NotFound"));

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    double d14 = tickerData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    net.ajaskey.market.ta.TrendType trendType14 = tickerData0.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType14);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double[] d_array14 = tickerData13.getTypicalPriceData();
    double[] d_array15 = tickerData13.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getChg130();
    double d7 = derivedData0.getRsRaw();
    double d8 = derivedData0.getLrAngle260();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getTrueLowData();
    java.lang.Double d11 = tickerData9.getSmaPerc23();
    net.ajaskey.market.ta.input.Fundamentals fundamentals12 = tickerData9.getFundies();
    double[] d_array13 = tickerData9.getTypicalPriceData();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData9);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.Double d9 = tickerData0.getSmaPerc260();
    double d10 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    double d21 = tickerData12.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType22 = tickerData12.getSma130Trend();
    double[] d_array23 = tickerData12.getVolumeData();
    int i27 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData12, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar32 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate(calendar32);
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate2(calendar32);
    net.ajaskey.market.ta.TickerData tickerData41 = new net.ajaskey.market.ta.TickerData("hi!", calendar32, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData42 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar32);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    net.ajaskey.market.ta.DailyData dailyData54 = new net.ajaskey.market.ta.DailyData(calendar46, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    long long56 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar32, calendar46);
    net.ajaskey.market.ta.TickerData tickerData63 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar32, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    net.ajaskey.market.ta.DailyData dailyData64 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar32);
    net.ajaskey.market.ta.TrendType trendType65 = tickerData0.getSma130Trend();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "30-Jan-0001"+ "'", str33.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Fri 30-Jan-0001"+ "'", str34.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType65);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array21 = tickerData0.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    tickerData0.fillDataArrays((int)(byte)(-1), false);
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getVolumeData();
    double d9 = tickerData7.getChg65();
    double[] d_array10 = tickerData7.getOiData();
    int i14 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData7, (int)'#', (int)(short)10, (int)(byte)0);
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData7);
    double d16 = tickerData0.getLrSlope260();
    java.lang.Integer i17 = tickerData0.getDaysOfData();
    java.lang.Double d18 = tickerData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 1+ "'", i17.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d18);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808640099,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=901,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808640099,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=901,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    double d2 = tickerData0.getAtrPercent23();
    java.lang.String str3 = tickerData0.getTickerName();
    java.lang.Double d4 = tickerData0.getSmaPerc65();
    java.lang.String str5 = tickerData0.toString();
    double d6 = tickerData0.getChg130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "null\tnull\tnull\r\n"+ "'", str5.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    net.ajaskey.market.ta.TickerData tickerData28 = null;
    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData.mergeData(tickerData13, tickerData28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setShares(1L);
    java.lang.String str3 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    java.lang.String str7 = tickerData0.getTicker();
    net.ajaskey.market.ta.TrendType trendType8 = tickerData0.getSma65Trend();
    double d9 = tickerData0.getRsRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "HI!"+ "'", str7.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    net.ajaskey.market.ta.DailyData dailyData22 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(byte)(-1), 0, (int)' ');
    java.lang.String str23 = tickerData0.getTicker();
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate2(calendar28);
    net.ajaskey.market.ta.TickerData tickerData37 = new net.ajaskey.market.ta.TickerData("hi!", calendar28, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str38 = tickerData37.getTickerExchange();
    java.util.Calendar calendar39 = null;
    net.ajaskey.market.ta.TickerData tickerData40 = new net.ajaskey.market.ta.TickerData();
    double[] d_array41 = tickerData40.getTrueLowData();
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate(calendar45);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate2(calendar45);
    net.ajaskey.market.ta.DailyData dailyData48 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData40, calendar45);
    boolean b49 = net.ajaskey.market.misc.Utils.sameYear(calendar39, calendar45);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData51 = net.ajaskey.market.ta.TickerData.getSlice(tickerData37, calendar45, (int)(byte)(-1));
    java.util.Calendar calendar55 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str56 = net.ajaskey.market.misc.Utils.stringDate(calendar55);
    net.ajaskey.market.ta.DailyData dailyData63 = new net.ajaskey.market.ta.DailyData(calendar55, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar67 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b68 = net.ajaskey.market.misc.Utils.sameYear(calendar55, calendar67);
    boolean b69 = net.ajaskey.market.misc.Utils.sameYear(calendar45, calendar67);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData71 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar45, (-1));
    double d72 = tickerData0.getLrInt260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Fri 30-Jan-0001"+ "'", str30.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Unknown"+ "'", str38.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "30-Jan-0001"+ "'", str46.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Fri 30-Jan-0001"+ "'", str47.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "30-Jan-0001"+ "'", str56.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d72 == 0.0d);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    double d6 = derivedData0.getPriceInRng260();
    java.lang.Double d7 = derivedData0.getSmaPerc130();
    double d8 = derivedData0.getLow260();
    double d9 = derivedData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    industryData0.setRank((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getMfi130();
    double d4 = derivedData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getChg23();
    java.util.Calendar calendar7 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate(calendar7);
    net.ajaskey.market.ta.DailyData dailyData15 = new net.ajaskey.market.ta.DailyData(calendar7, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d16 = dailyData15.getTrueHigh();
    java.lang.String str17 = dailyData15.toString();
    java.lang.Double d18 = dailyData15.getOpen();
    dailyData15.setVolume((double)1L);
    java.lang.String str21 = dailyData15.toString();
    tickerData0.addData(dailyData15);
    double d23 = tickerData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "30-Jan-0001"+ "'", str8.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str17.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d18 + "' != '" + 0.0d+ "'", d18.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     1     0      1.00      0.00"+ "'", str21.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     1     0      1.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808640583,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=417,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    java.lang.Double d13 = dailyData11.getLow();
    double d14 = dailyData11.getDailyRng();
    dailyData11.setTrueLow((double)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 0.0d+ "'", d13.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    java.lang.Double d28 = tickerData13.getSma23();
    java.lang.Double d29 = tickerData13.getSmaPerc23();
    tickerData13.rSort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d28 + "' != '" + 0.0d+ "'", d28.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d29 + "' != '" + 0.0d+ "'", d29.equals(0.0d));

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }


    net.ajaskey.market.misc.Utils.TAB = "100";

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getPriceOffHigh260();
    net.ajaskey.market.ta.TickerData tickerData6 = new net.ajaskey.market.ta.TickerData();
    double[] d_array7 = tickerData6.getTrueLowData();
    double d8 = tickerData6.getCurrentPrice();
    double[] d_array9 = tickerData6.getTrueHighData();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getVolumeData();
    double d12 = tickerData10.getChg65();
    double[] d_array13 = tickerData10.getOiData();
    double d14 = tickerData10.getMfi65();
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate(calendar18);
    java.lang.String str20 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar18);
    net.ajaskey.market.ta.TickerData tickerData21 = null;
    net.ajaskey.market.ta.TickerData tickerData22 = new net.ajaskey.market.ta.TickerData();
    double[] d_array23 = tickerData22.getTrueLowData();
    java.util.Calendar calendar27 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate(calendar27);
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate2(calendar27);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData22, calendar27);
    int i31 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData21, calendar27);
    boolean b32 = net.ajaskey.market.misc.Utils.sameYear(calendar18, calendar27);
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate(calendar36);
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate2(calendar36);
    int i39 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData10, calendar27, calendar36);
    net.ajaskey.market.ta.TickerData tickerData40 = new net.ajaskey.market.ta.TickerData();
    double[] d_array41 = tickerData40.getVolumeData();
    double d42 = tickerData40.getChg65();
    double[] d_array43 = tickerData40.getOiData();
    double d44 = tickerData40.getMfi65();
    java.util.Calendar calendar48 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str49 = net.ajaskey.market.misc.Utils.stringDate(calendar48);
    java.lang.String str50 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar48);
    net.ajaskey.market.ta.TickerData tickerData51 = null;
    net.ajaskey.market.ta.TickerData tickerData52 = new net.ajaskey.market.ta.TickerData();
    double[] d_array53 = tickerData52.getTrueLowData();
    java.util.Calendar calendar57 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate(calendar57);
    java.lang.String str59 = net.ajaskey.market.misc.Utils.stringDate2(calendar57);
    net.ajaskey.market.ta.DailyData dailyData60 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData52, calendar57);
    int i61 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData51, calendar57);
    boolean b62 = net.ajaskey.market.misc.Utils.sameYear(calendar48, calendar57);
    java.util.Calendar calendar66 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate(calendar66);
    java.lang.String str68 = net.ajaskey.market.misc.Utils.stringDate2(calendar66);
    int i69 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData40, calendar57, calendar66);
    boolean b70 = net.ajaskey.market.misc.Utils.sameMonth(calendar27, calendar57);
    net.ajaskey.market.ta.DailyData dailyData71 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData6, calendar27);
    double[] d_array72 = tickerData6.getTrueLowData();
    double d73 = tickerData6.getAvgVol20();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData6);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "30-Jan-0001"+ "'", str19.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "java.util.GregorianCalendar[time=-62164808639694,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=306,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str20.equals("java.util.GregorianCalendar[time=-62164808639694,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=306,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "30-Jan-0001"+ "'", str28.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Fri 30-Jan-0001"+ "'", str29.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "30-Jan-0001"+ "'", str37.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Fri 30-Jan-0001"+ "'", str38.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d42 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "30-Jan-0001"+ "'", str49.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "java.util.GregorianCalendar[time=-62164808639694,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=306,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str50.equals("java.util.GregorianCalendar[time=-62164808639694,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=306,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "30-Jan-0001"+ "'", str58.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Fri 30-Jan-0001"+ "'", str59.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "30-Jan-0001"+ "'", str67.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Fri 30-Jan-0001"+ "'", str68.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d73 == 0.0d);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808647703,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=297,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d6 = industryData0.getChg260();
    industryData0.setRawRsSt((double)10);
    // The following exception was thrown during execution in test generation
    try {
    double d10 = industryData0.getSlope((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == (-1.0d));

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }


    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array4);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str2);
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData7);
    net.ajaskey.market.ta.TickerData tickerData9 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808647640,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=360,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData7);
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData7);
    net.ajaskey.market.ta.TickerData tickerData11 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808644863,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=137,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData11);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d23 = dailyData22.getClose();
    double d24 = dailyData22.getDailyPercentChg();
    tickerData0.addData(dailyData22);
    double d26 = tickerData0.getChg65();
    double[] d_array27 = tickerData0.getOpenData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d23 + "' != '" + 1.0d+ "'", d23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array27);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808650526,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=474,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setPriceInRange260((double)0L);
    industryData0.setRank((int)(short)(-1));
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808651930,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=70,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }


    java.util.Calendar calendar0 = null;
    java.util.Calendar calendar1 = net.ajaskey.market.misc.Utils.makeCopy(calendar0);
    net.ajaskey.market.ta.TickerData tickerData2 = new net.ajaskey.market.ta.TickerData();
    double[] d_array3 = tickerData2.getTrueLowData();
    java.util.Calendar calendar7 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate(calendar7);
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate2(calendar7);
    net.ajaskey.market.ta.DailyData dailyData10 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData2, calendar7);
    double d11 = tickerData2.getAtrPercent23();
    tickerData2.fillDataArrays((int)(short)100, false);
    double[] d_array15 = tickerData2.getTrueHighData();
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate(calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar19);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    net.ajaskey.market.ta.TickerData tickerData35 = new net.ajaskey.market.ta.TickerData("hi!", calendar26, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.makeCopy(calendar26);
    boolean b37 = net.ajaskey.market.misc.Utils.sameDate(calendar19, calendar36);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData2, calendar36);
    boolean b39 = net.ajaskey.market.misc.Utils.sameDate(calendar1, calendar36);
    net.ajaskey.market.misc.Utils.printCalendar(calendar36);
    net.ajaskey.market.misc.Utils.printCalendar(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "30-Jan-0001"+ "'", str8.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Fri 30-Jan-0001"+ "'", str9.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "java.util.GregorianCalendar[time=-62164808639600,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=400,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str21.equals("java.util.GregorianCalendar[time=-62164808639600,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=400,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    java.lang.Double d4 = tickerData0.getSma260();
    double[] d_array5 = tickerData0.getTrueLowData();
    double d6 = tickerData0.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)1, (double)(short)1, (double)(short)1, (-1.0d), (double)'4', (double)(byte)10);
    net.ajaskey.market.ta.DailyData dailyData93 = new net.ajaskey.market.ta.DailyData(calendar3, (double)1, (double)'a', (double)'a', (double)(short)0, 0.0d, (double)10L);
    java.lang.String str94 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808639584,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=416,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808639584,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=416,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808639584,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=416,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808639584,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=416,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808639584,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=416,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808639584,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=416,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "java.util.GregorianCalendar[time=-62164861199000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str94.equals("java.util.GregorianCalendar[time=-62164861199000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.util.Calendar calendar14 = null;
    net.ajaskey.market.ta.TickerData tickerData15 = new net.ajaskey.market.ta.TickerData();
    double[] d_array16 = tickerData15.getTrueLowData();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.DailyData dailyData23 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData15, calendar20);
    boolean b24 = net.ajaskey.market.misc.Utils.sameYear(calendar14, calendar20);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d28 = tickerData0.getAtrPercent23();
    java.lang.String str29 = tickerData0.getTicker();
    java.lang.Double d30 = tickerData0.getSmaPerc130();
    double[] d_array31 = tickerData0.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    tickerData0.fillDataArrays((int)(byte)(-1), false);
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getVolumeData();
    double d9 = tickerData7.getChg65();
    double[] d_array10 = tickerData7.getOiData();
    int i14 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData7, (int)'#', (int)(short)10, (int)(byte)0);
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData7);
    double d16 = tickerData0.getLrSlope260();
    double[] d_array17 = tickerData0.getVolumeData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(d_array17);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg();
    double d5 = tickerData0.getRsStRaw();
    double d6 = tickerData0.getDiPlus();
    java.lang.Integer i7 = tickerData0.getDaysOfData();
    double d8 = tickerData0.getMfi14();
    double d9 = tickerData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma65Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    net.ajaskey.market.ta.TickerData tickerData1 = null;
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    net.ajaskey.market.ta.DailyData dailyData13 = new net.ajaskey.market.ta.DailyData(calendar5, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    net.ajaskey.market.ta.DailyData dailyData14 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData1, calendar5);
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate(calendar18);
    net.ajaskey.market.ta.DailyData dailyData26 = new net.ajaskey.market.ta.DailyData(calendar18, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar27 = dailyData26.getDate();
    boolean b28 = net.ajaskey.market.misc.Utils.sameMonth(calendar5, calendar27);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData30 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar5, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "30-Jan-0001"+ "'", str19.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "java.util.GregorianCalendar[time=-62164861199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str31.equals("java.util.GregorianCalendar[time=-62164861199000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, 0, (int)(byte)0, (int)(short)100);
    java.lang.Double d10 = tickerData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    net.ajaskey.market.ta.TrendType trendType14 = tickerData0.getSma130Trend();
    int i15 = tickerData0.getDataCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)100.0f);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    double d12 = tickerData0.getMfi23();
    double d13 = tickerData0.getMfi130();
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate(calendar18);
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate2(calendar18);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData("hi!", calendar18, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    double d28 = tickerData27.getAvgVol20();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData27);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str31 = tickerData0.DailyDataString((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "30-Jan-0001"+ "'", str19.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Fri 30-Jan-0001"+ "'", str20.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("null\tnull\tnull\r\n", (int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d23 = dailyData22.getClose();
    double d24 = dailyData22.getDailyPercentChg();
    tickerData0.addData(dailyData22);
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar29);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(byte)(-1), (int)(short)1, (int)' ');
    tickerData0.generateDerived(false);
    tickerData0.generateDerived(false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d23 + "' != '" + 1.0d+ "'", d23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)'#', (int)'#', (int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    double d24 = dailyData20.getDailyPercentChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }


    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.TickerData tickerData14 = new net.ajaskey.market.ta.TickerData("hi!", calendar5, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str15 = tickerData14.getTickerExchange();
    java.util.Calendar calendar16 = null;
    net.ajaskey.market.ta.TickerData tickerData17 = new net.ajaskey.market.ta.TickerData();
    double[] d_array18 = tickerData17.getTrueLowData();
    java.util.Calendar calendar22 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate(calendar22);
    java.lang.String str24 = net.ajaskey.market.misc.Utils.stringDate2(calendar22);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData17, calendar22);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar16, calendar22);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData28 = net.ajaskey.market.ta.TickerData.getSlice(tickerData14, calendar22, (int)(byte)(-1));
    java.util.Calendar calendar32 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate(calendar32);
    net.ajaskey.market.ta.DailyData dailyData40 = new net.ajaskey.market.ta.DailyData(calendar32, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b45 = net.ajaskey.market.misc.Utils.sameYear(calendar32, calendar44);
    boolean b46 = net.ajaskey.market.misc.Utils.sameYear(calendar22, calendar44);
    net.ajaskey.market.ta.TickerData tickerData53 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808642428,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=57,MILLISECOND=572,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar22, (double)(-1), (double)10L, (double)(short)100, (double)100L, (double)(byte)100, (double)(byte)100);
    java.lang.String str54 = net.ajaskey.market.misc.Utils.getMonthName(calendar22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Unknown"+ "'", str15.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "30-Jan-0001"+ "'", str23.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001"+ "'", str24.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "30-Jan-0001"+ "'", str33.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "NotFound"+ "'", str54.equals("NotFound"));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    double[] d_array9 = tickerData0.getOiData();
    double d10 = tickerData0.getMfi14();
    double d11 = tickerData0.getDiMinus();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, false);
    java.lang.Double d14 = tickerData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d14);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d11 = industryData0.getAvgVol();
    double d12 = industryData0.getChg260();
    java.util.List<java.lang.Integer> list_i13 = industryData0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i13);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    java.lang.Double d4 = derivedData0.getSma130();
    double d5 = derivedData0.getChg260();
    double d6 = derivedData0.getChg130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    double d12 = tickerData0.getMfi23();
    double d13 = tickerData0.getMfi130();
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate(calendar18);
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate2(calendar18);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData("hi!", calendar18, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    double d28 = tickerData27.getAvgVol20();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData27);
    double d30 = tickerData0.getMfi14();
    double[] d_array31 = tickerData0.getOpenData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "30-Jan-0001"+ "'", str19.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Fri 30-Jan-0001"+ "'", str20.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("NotFound");

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    double d39 = tickerData0.getChg260();
    double d40 = tickerData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808639148,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=852,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808639148,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=852,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d39 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d40 == 0.0d);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar12 = dailyData11.getDate();
    double d13 = dailyData11.getDailyPercentRng();
    double d14 = dailyData11.getTrueLow();
    java.lang.Double d15 = dailyData11.getLow();
    dailyData11.setDailyChg((double)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData8 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData8);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getPriceOffLow260();
    double d4 = derivedData0.getLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getAvgVol20();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getRsi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.util.Calendar calendar14 = null;
    net.ajaskey.market.ta.TickerData tickerData15 = new net.ajaskey.market.ta.TickerData();
    double[] d_array16 = tickerData15.getTrueLowData();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.DailyData dailyData23 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData15, calendar20);
    boolean b24 = net.ajaskey.market.misc.Utils.sameYear(calendar14, calendar20);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d28 = tickerData0.getAtrPercent23();
    java.lang.String str29 = tickerData0.getTicker();
    double d30 = tickerData0.getRsi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 0.0d);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d6 = industryData0.getChg260();
    industryData0.setName("Fri 30-Jan-0001");
    long long9 = industryData0.getfShares();
    industryData0.setPriceInRange260((double)(short)1);
    double d12 = industryData0.getRawRsSt();
    industryData0.setShares((long)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }


    java.util.Calendar calendar0 = null;
    java.util.Calendar calendar1 = net.ajaskey.market.misc.Utils.makeCopy(calendar0);
    net.ajaskey.market.ta.TickerData tickerData2 = new net.ajaskey.market.ta.TickerData();
    double[] d_array3 = tickerData2.getTrueLowData();
    java.util.Calendar calendar7 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate(calendar7);
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate2(calendar7);
    net.ajaskey.market.ta.DailyData dailyData10 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData2, calendar7);
    double d11 = tickerData2.getAtrPercent23();
    tickerData2.fillDataArrays((int)(short)100, false);
    double[] d_array15 = tickerData2.getTrueHighData();
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate(calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar19);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    net.ajaskey.market.ta.TickerData tickerData35 = new net.ajaskey.market.ta.TickerData("hi!", calendar26, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.makeCopy(calendar26);
    boolean b37 = net.ajaskey.market.misc.Utils.sameDate(calendar19, calendar36);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData2, calendar36);
    boolean b39 = net.ajaskey.market.misc.Utils.sameDate(calendar1, calendar36);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate(calendar1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "30-Jan-0001"+ "'", str8.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Fri 30-Jan-0001"+ "'", str9.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "java.util.GregorianCalendar[time=-62164808639038,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=962,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str21.equals("java.util.GregorianCalendar[time=-62164808639038,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=962,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "08-Jul-2016"+ "'", str40.equals("08-Jul-2016"));

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)10L, (double)693934L, 0.0d, (double)(short)100, 100.0d, (double)(byte)1);
    dailyData86.setTrueLow(1.0d);
    java.util.Calendar calendar89 = dailyData86.getDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808639007,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=993,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808639007,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=993,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808639007,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=993,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808639007,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=993,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808639007,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=993,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808639007,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=993,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar89);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808650011,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=989,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    tickerData0.setTicker("NotFound");
    java.lang.String str4 = tickerData0.getTickerExchange();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    double d15 = tickerData0.getChg23();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d18 = tickerData0.getChg();
    double d19 = tickerData0.getRsi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }


    net.ajaskey.market.misc.Utils.TAB = "NOTFOUND\tnull\tnull\r\n";

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    net.ajaskey.market.ta.DailyData dailyData22 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(byte)(-1), 0, (int)' ');
    java.lang.String str23 = tickerData0.getTicker();
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate2(calendar28);
    net.ajaskey.market.ta.TickerData tickerData37 = new net.ajaskey.market.ta.TickerData("hi!", calendar28, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str38 = tickerData37.getTickerExchange();
    java.util.Calendar calendar39 = null;
    net.ajaskey.market.ta.TickerData tickerData40 = new net.ajaskey.market.ta.TickerData();
    double[] d_array41 = tickerData40.getTrueLowData();
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate(calendar45);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate2(calendar45);
    net.ajaskey.market.ta.DailyData dailyData48 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData40, calendar45);
    boolean b49 = net.ajaskey.market.misc.Utils.sameYear(calendar39, calendar45);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData51 = net.ajaskey.market.ta.TickerData.getSlice(tickerData37, calendar45, (int)(byte)(-1));
    java.util.Calendar calendar55 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str56 = net.ajaskey.market.misc.Utils.stringDate(calendar55);
    net.ajaskey.market.ta.DailyData dailyData63 = new net.ajaskey.market.ta.DailyData(calendar55, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar67 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b68 = net.ajaskey.market.misc.Utils.sameYear(calendar55, calendar67);
    boolean b69 = net.ajaskey.market.misc.Utils.sameYear(calendar45, calendar67);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData71 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar45, (-1));
    java.lang.String str72 = tickerData0.getTickerExchange();
    // The following exception was thrown during execution in test generation
    try {
    double d74 = tickerData0.getLow((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Fri 30-Jan-0001"+ "'", str30.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Unknown"+ "'", str38.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "30-Jan-0001"+ "'", str46.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Fri 30-Jan-0001"+ "'", str47.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "30-Jan-0001"+ "'", str56.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma23Trend();
    java.lang.Double d8 = tickerData0.getSmaPerc130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    net.ajaskey.market.ta.TrendType trendType3 = tickerData0.getSma23Trend();
    tickerData0.fillDataArrays((int)(byte)0, false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType3);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "35"+ "'", str1.equals("35"));

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    java.util.List<java.lang.Integer> list_i8 = industryData0.getRank();
    java.lang.String str9 = industryData0.getMarketCap();
    industryData0.setMarketCap("HI!");
    // The following exception was thrown during execution in test generation
    try {
    double d13 = industryData0.getSlope(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    dailyData20.setVolume((double)693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setMarketCap("NotFound");
    industryData0.setSlope(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808650401,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=599,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setChg260((double)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    double d19 = tickerData0.getAvgVol65();
    java.lang.String str20 = tickerData0.getTicker();
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    net.ajaskey.market.ta.DailyData dailyData32 = new net.ajaskey.market.ta.DailyData(calendar24, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d33 = dailyData32.getTrueHigh();
    java.lang.String str34 = dailyData32.toString();
    java.lang.Double d35 = dailyData32.getVolume();
    java.lang.Double d36 = dailyData32.getClose();
    tickerData0.addData(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str34.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d35 + "' != '" + 0.0d+ "'", d35.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d36 + "' != '" + 1.0d+ "'", d36.equals(1.0d));

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc23();
    double d4 = derivedData0.getLrSlope260();
    double d5 = derivedData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getChg260();
    double[] d_array9 = tickerData0.getOpenData();
    java.lang.String str10 = tickerData0.getTickerExchange();
    double d11 = tickerData0.getAvgVol65();
    double d12 = tickerData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    java.lang.Double d5 = tickerData0.getSmaPerc23();
    java.lang.Double d6 = tickerData0.getSma65();
    net.ajaskey.market.ta.input.Fundamentals fundamentals7 = tickerData0.getFundies();
    double d8 = tickerData0.getPriceInRng260();
    java.lang.String str9 = tickerData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsStRaw();
    double d5 = derivedData0.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    double d13 = tickerData0.getPriceOffLow260();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    net.ajaskey.market.ta.DailyData dailyData25 = new net.ajaskey.market.ta.DailyData(calendar17, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d26 = dailyData25.getTrueHigh();
    dailyData25.setTrueHigh((double)(short)0);
    long long29 = dailyData25.getDaysSinceBase();
    double d30 = dailyData25.getTrueLow();
    double d31 = dailyData25.getDailyPercentChg();
    java.lang.Double d32 = dailyData25.getClose();
    tickerData0.addData(dailyData25);
    dailyData25.setVolume((double)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d32 + "' != '" + 1.0d+ "'", d32.equals(1.0d));

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    double d16 = tickerData0.getChg();
    net.ajaskey.market.ta.input.Fundamentals fundamentals17 = tickerData0.getFundies();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals17);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setName("Unknown");
    industryData0.setSlope(0.0d);
    double d7 = industryData0.getPriceInRange260();
    double d8 = industryData0.getRawRs();
    industryData0.setShares((long)(short)10);
    java.lang.String str11 = industryData0.getRanks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808649419,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=581,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    net.ajaskey.market.ta.TickerData tickerData5 = new net.ajaskey.market.ta.TickerData();
    double[] d_array6 = tickerData5.getVolumeData();
    double d7 = tickerData5.getChg65();
    int i11 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData5, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData5, true);
    double d14 = tickerData5.getDiPlus();
    net.ajaskey.market.ta.methods.TaMethods taMethods15 = tickerData5.getTaMethods();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData5);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods15);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    double d13 = tickerData0.getPriceOffLow260();
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808642568,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=57,MILLISECOND=432,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getAtrPercent23();
    double d6 = derivedData0.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

}

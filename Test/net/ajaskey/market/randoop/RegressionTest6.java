package net.ajaskey.market.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test001"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getLr260();
    double d8 = derivedData0.getChg260();
    double d9 = derivedData0.getLow260();
    java.lang.Double d10 = derivedData0.getSma130();
    java.lang.Double d11 = derivedData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d10 + "' != '" + 0.0d+ "'", d10.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d11 + "' != '" + 0.0d+ "'", d11.equals(0.0d));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test002"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    double d13 = dailyData11.getDailyRng();
    double d14 = dailyData11.getDailyRng();
    long long15 = dailyData11.getDaysSinceBase();
    dailyData11.setTrueLow(32.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 693934L);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test003"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double[] d_array6 = tickerData0.getTrueHighData();
    double[] d_array7 = tickerData0.getOpenData();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getTrueLowData();
    java.util.Calendar calendar13 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate(calendar13);
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate2(calendar13);
    net.ajaskey.market.ta.DailyData dailyData16 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData8, calendar13);
    double d17 = tickerData8.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType18 = tickerData8.getSma130Trend();
    double[] d_array19 = tickerData8.getVolumeData();
    int i23 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData8, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate2(calendar28);
    net.ajaskey.market.ta.TickerData tickerData37 = new net.ajaskey.market.ta.TickerData("hi!", calendar28, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData8, calendar28);
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str51 = net.ajaskey.market.misc.Utils.stringDate2(calendar42);
    long long52 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar28, calendar42);
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar60 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str61 = net.ajaskey.market.misc.Utils.stringDate(calendar60);
    java.lang.String str62 = net.ajaskey.market.misc.Utils.stringDate2(calendar60);
    boolean b63 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar60);
    java.lang.String str64 = net.ajaskey.market.misc.Utils.getString(calendar60);
    boolean b65 = net.ajaskey.market.misc.Utils.sameYear(calendar42, calendar60);
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate2(calendar60);
    java.util.Calendar calendar67 = net.ajaskey.market.misc.Utils.makeCopy(calendar60);
    java.lang.String str68 = net.ajaskey.market.misc.Utils.getMonthName(calendar67);
    java.lang.String str69 = net.ajaskey.market.misc.Utils.stringDate(calendar67);
    java.lang.String str70 = net.ajaskey.market.misc.Utils.stringDate(calendar67);
    net.ajaskey.market.ta.DailyData dailyData71 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "30-Jan-0001"+ "'", str14.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Fri 30-Jan-0001"+ "'", str15.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Fri 30-Jan-0001"+ "'", str30.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Fri 30-Jan-0001"+ "'", str51.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long52 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "30-Jan-0001"+ "'", str61.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Fri 30-Jan-0001"+ "'", str62.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "30-Jan-0001"+ "'", str64.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Fri 30-Jan-0001"+ "'", str66.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "unknown-month"+ "'", str68.equals("unknown-month"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "30-Jan-0001"+ "'", str69.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "30-Jan-0001"+ "'", str70.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData71);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test004"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    double[] d_array5 = tickerData0.getTrueLowData();
    double d6 = tickerData0.getHigh260();
    double d7 = tickerData0.getAdx();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.makeCopy(calendar11);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar11);
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    double[] d_array15 = tickerData0.getLowData();
    double d16 = tickerData0.getAtrPercent23();
    double d17 = tickerData0.getMfi23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test005"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)(byte)1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData10 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData11 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData12 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData12);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test006"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test007"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    java.lang.String str8 = industryData0.getName();
    java.lang.String str9 = industryData0.getTicker();
    double d10 = industryData0.getRawRsSt();
    industryData0.setRawRsSt((double)(short)1);
    industryData0.setRawRs((double)(-100));
    long long15 = industryData0.getShares();
    double d16 = industryData0.getPriceInRange260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test008"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    tickerData0.fillDataArrays((int)' ', false);
    double d11 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    int i18 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData12, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType19 = tickerData12.getSma130Trend();
    double[] d_array20 = tickerData12.getTrueHighData();
    double d21 = tickerData12.getMfi14();
    net.ajaskey.market.ta.TickerData tickerData22 = new net.ajaskey.market.ta.TickerData();
    double[] d_array23 = tickerData22.getVolumeData();
    double d24 = tickerData22.getChg65();
    int i28 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData22, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType29 = tickerData22.getSma130Trend();
    double[] d_array30 = tickerData22.getTrueHighData();
    java.lang.Double d31 = tickerData22.getSma23();
    double d32 = tickerData22.getLrInt260();
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    net.ajaskey.market.ta.DailyData dailyData37 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData22, calendar36);
    int i38 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData12, calendar36);
    java.lang.String str39 = net.ajaskey.market.misc.Utils.getDayName(calendar36);
    java.util.Calendar calendar40 = net.ajaskey.market.misc.Utils.makeCopy(calendar36);
    java.util.Calendar calendar41 = null;
    net.ajaskey.market.ta.TickerData tickerData42 = new net.ajaskey.market.ta.TickerData();
    double[] d_array43 = tickerData42.getTrueLowData();
    java.util.Calendar calendar47 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate(calendar47);
    java.lang.String str49 = net.ajaskey.market.misc.Utils.stringDate2(calendar47);
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData42, calendar47);
    boolean b51 = net.ajaskey.market.misc.Utils.sameYear(calendar41, calendar47);
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate2(calendar56);
    net.ajaskey.market.ta.TickerData tickerData65 = new net.ajaskey.market.ta.TickerData("hi!", calendar56, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar66 = net.ajaskey.market.misc.Utils.makeCopy(calendar56);
    boolean b67 = net.ajaskey.market.misc.Utils.sameDate(calendar41, calendar56);
    boolean b68 = net.ajaskey.market.misc.Utils.sameDate(calendar40, calendar56);
    net.ajaskey.market.ta.DailyData dailyData69 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "unknown-day"+ "'", str39.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "30-Jan-0001"+ "'", str48.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Fri 30-Jan-0001"+ "'", str49.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Fri 30-Jan-0001"+ "'", str58.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData69);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test009"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData11);
    double[] d_array14 = tickerData11.getHighData();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData11, false);
    double[] d_array17 = tickerData11.getVolumeData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test010"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getRsRaw();
    java.lang.Double d6 = derivedData0.getSma23();
    java.lang.Double d7 = derivedData0.getSma260();
    java.lang.Double d8 = derivedData0.getSma260();
    double d9 = derivedData0.getChg260();
    double d10 = derivedData0.getLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test011"); }


    net.ajaskey.market.ta.TickerData tickerData1 = new net.ajaskey.market.ta.TickerData();
    double[] d_array2 = tickerData1.getTrueLowData();
    java.util.Calendar calendar6 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate(calendar6);
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate2(calendar6);
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar6);
    double d10 = tickerData1.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType11 = tickerData1.getSma130Trend();
    double[] d_array12 = tickerData1.getVolumeData();
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData1, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData("hi!", calendar21, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData31 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar21);
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    net.ajaskey.market.ta.DailyData dailyData43 = new net.ajaskey.market.ta.DailyData(calendar35, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str44 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    long long45 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar21, calendar35);
    net.ajaskey.market.ta.TickerData tickerData52 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar21, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    tickerData52.generateDerived((int)(byte)0, true);
    double d56 = tickerData52.getRsi14();
    net.ajaskey.market.ta.TrendType trendType57 = tickerData52.getSma260Trend();
    double[] d_array58 = tickerData52.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "30-Jan-0001"+ "'", str7.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Fri 30-Jan-0001"+ "'", str8.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Fri 30-Jan-0001"+ "'", str44.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d56 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(trendType57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(d_array58);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test012"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    double d13 = dailyData11.getDailyRng();
    double d14 = dailyData11.getDailyRng();
    double d15 = dailyData11.getDailyChg();
    java.util.Calendar calendar16 = dailyData11.getDate();
    dailyData11.setDailyChg((double)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar16);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test013"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    java.lang.String str14 = tickerData8.getTicker();
    double[] d_array15 = tickerData8.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    double d18 = tickerData16.getCurrentPrice();
    double d19 = tickerData16.getAtr23();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData16);
    double d21 = tickerData16.getRsRaw();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData8, tickerData16);
    java.lang.Double d23 = tickerData8.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d23);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test014"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808615980,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=24,MILLISECOND=20,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (int)(short)(-1));
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test015"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    net.ajaskey.market.ta.TickerData tickerData55 = new net.ajaskey.market.ta.TickerData("hi!", calendar46, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar38, calendar46);
    double d57 = tickerData0.getAvgVol65();
    java.util.Calendar calendar62 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str63 = net.ajaskey.market.misc.Utils.stringDate(calendar62);
    java.lang.String str64 = net.ajaskey.market.misc.Utils.stringDate2(calendar62);
    net.ajaskey.market.ta.TickerData tickerData71 = new net.ajaskey.market.ta.TickerData("hi!", calendar62, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str72 = tickerData71.getTickerExchange();
    java.util.Calendar calendar73 = null;
    net.ajaskey.market.ta.TickerData tickerData74 = new net.ajaskey.market.ta.TickerData();
    double[] d_array75 = tickerData74.getTrueLowData();
    java.util.Calendar calendar79 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str80 = net.ajaskey.market.misc.Utils.stringDate(calendar79);
    java.lang.String str81 = net.ajaskey.market.misc.Utils.stringDate2(calendar79);
    net.ajaskey.market.ta.DailyData dailyData82 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData74, calendar79);
    boolean b83 = net.ajaskey.market.misc.Utils.sameYear(calendar73, calendar79);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData85 = net.ajaskey.market.ta.TickerData.getSlice(tickerData71, calendar79, (int)(byte)(-1));
    net.ajaskey.market.ta.DailyData dailyData86 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar79);
    net.ajaskey.market.ta.DailyData dailyData93 = new net.ajaskey.market.ta.DailyData(calendar79, (double)2017L, (double)1, (double)(-1), (double)'4', (double)(byte)0, 1.0d);
    dailyData93.setTrueHigh(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808601544,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=456,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808601544,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=456,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "30-Jan-0001"+ "'", str63.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Fri 30-Jan-0001"+ "'", str64.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Unknown"+ "'", str72.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "30-Jan-0001"+ "'", str80.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Fri 30-Jan-0001"+ "'", str81.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData86);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test016"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank((int)(short)10);
    industryData0.setSlope(0.0d);
    industryData0.setSlope((double)(byte)100);
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test017"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    long long15 = dailyData11.getDaysSinceBase();
    double d16 = dailyData11.getTrueLow();
    double d17 = dailyData11.getDailyPercentChg();
    java.lang.Double d18 = dailyData11.getClose();
    dailyData11.setTrueLow((double)'a');
    long long21 = dailyData11.getDaysSinceBase();
    double d22 = dailyData11.getTrueHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d18 + "' != '" + 1.0d+ "'", d18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 10.0d);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test018"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getChg65();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getMfi14();
    double d5 = derivedData0.getHigh260();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test019"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d11 = industryData0.getAvgVol();
    industryData0.setShares((long)(short)100);
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808635603,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=4,MILLISECOND=397,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d16 = industryData0.getPriceInRange260();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808629597,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=10,MILLISECOND=403,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank(0);
    industryData0.setRawRsSt(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test020"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    double[] d_array5 = tickerData0.getTrueLowData();
    double d6 = tickerData0.getHigh260();
    double d7 = tickerData0.getAdx();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.makeCopy(calendar11);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar11);
    double d14 = tickerData0.getLow260();
    java.lang.Integer i15 = tickerData0.getDaysOfData();
    double[] d_array16 = tickerData0.getCloseData();
    double d17 = tickerData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test021"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getChg23();
    double[] d_array4 = tickerData0.getOpenData();
    java.lang.String str5 = tickerData0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "null\tnull\tnull\r\n"+ "'", str5.equals("null\tnull\tnull\r\n"));

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test022"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    tickerData0.setTicker("NotFound");
    double d4 = tickerData0.getPriceOffHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test023"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getDiPlus();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getMfi23();
    double d6 = derivedData0.getLrInt260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test024"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    java.lang.Double d6 = derivedData0.getSma260();
    double d7 = derivedData0.getMfi23();
    double d8 = derivedData0.getAtr23();
    double d9 = derivedData0.getHigh260();
    double d10 = derivedData0.getAvgVol20();
    java.lang.Double d11 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d11 + "' != '" + 0.0d+ "'", d11.equals(0.0d));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test025"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType9 = tickerData0.getSma130Trend();
    double[] d_array10 = tickerData0.getTypicalPriceData();
    double[] d_array11 = tickerData0.getHighData();
    double[] d_array12 = tickerData0.getCloseData();
    double d13 = tickerData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test026"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    double d3 = industryData0.getAvgVol();
    java.lang.String str4 = industryData0.getRanks();
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808646455,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=545,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.String str7 = industryData0.getMarketCap();
    double d8 = industryData0.getPriceInRange260();
    industryData0.setRank((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    double d12 = industryData0.getSlope((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "java.util.GregorianCalendar[time=-62164808646455,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=545,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str7.equals("java.util.GregorianCalendar[time=-62164808646455,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=545,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test027"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg65();
    java.lang.Double d8 = derivedData0.getSmaPerc23();
    double d9 = derivedData0.getMfi65();
    double d10 = derivedData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test028"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    net.ajaskey.market.ta.TickerData tickerData1 = null;
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    net.ajaskey.market.ta.DailyData dailyData13 = new net.ajaskey.market.ta.DailyData(calendar5, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    net.ajaskey.market.ta.DailyData dailyData14 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData1, calendar5);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData16 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar5, (int)'a');
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    java.util.Calendar calendar22 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate(calendar22);
    java.lang.String str24 = net.ajaskey.market.misc.Utils.stringDate2(calendar22);
    net.ajaskey.market.ta.TickerData tickerData31 = new net.ajaskey.market.ta.TickerData("hi!", calendar22, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str32 = tickerData31.getTickerExchange();
    java.util.Calendar calendar33 = null;
    net.ajaskey.market.ta.TickerData tickerData34 = new net.ajaskey.market.ta.TickerData();
    double[] d_array35 = tickerData34.getTrueLowData();
    java.util.Calendar calendar39 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate(calendar39);
    java.lang.String str41 = net.ajaskey.market.misc.Utils.stringDate2(calendar39);
    net.ajaskey.market.ta.DailyData dailyData42 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData34, calendar39);
    boolean b43 = net.ajaskey.market.misc.Utils.sameYear(calendar33, calendar39);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData45 = net.ajaskey.market.ta.TickerData.getSlice(tickerData31, calendar39, (int)(byte)(-1));
    java.util.Calendar calendar49 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str50 = net.ajaskey.market.misc.Utils.stringDate(calendar49);
    net.ajaskey.market.ta.DailyData dailyData57 = new net.ajaskey.market.ta.DailyData(calendar49, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar61 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b62 = net.ajaskey.market.misc.Utils.sameYear(calendar49, calendar61);
    boolean b63 = net.ajaskey.market.misc.Utils.sameYear(calendar39, calendar61);
    java.lang.String str64 = net.ajaskey.market.misc.Utils.stringDate2(calendar61);
    boolean b65 = net.ajaskey.market.misc.Utils.sameMonth(calendar5, calendar61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001"+ "'", str17.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "30-Jan-0001"+ "'", str23.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001"+ "'", str24.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Unknown"+ "'", str32.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "30-Jan-0001"+ "'", str40.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Fri 30-Jan-0001"+ "'", str41.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "30-Jan-0001"+ "'", str50.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Fri 30-Jan-0001"+ "'", str64.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test029"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    double d15 = tickerData13.getAvgVol65();
    net.ajaskey.market.ta.methods.TaMethods taMethods16 = tickerData13.getTaMethods();
    tickerData13.setTicker("java.util.GregorianCalendar[time=-62164808624015,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=15,MILLISECOND=985,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods16);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test030"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    double d4 = derivedData0.getAtrPercent23();
    double d5 = derivedData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test031"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg65();
    java.lang.Double d8 = derivedData0.getSmaPerc23();
    double d9 = derivedData0.getMfi65();
    java.lang.Double d10 = derivedData0.getSmaPerc23();
    double d11 = derivedData0.getPriceInRng260();
    double d12 = derivedData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d10 + "' != '" + 0.0d+ "'", d10.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test032"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getMfi130();
    net.ajaskey.market.ta.TickerData tickerData5 = new net.ajaskey.market.ta.TickerData();
    double[] d_array6 = tickerData5.getTrueLowData();
    java.util.Calendar calendar10 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate(calendar10);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate2(calendar10);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar10);
    double d14 = tickerData5.getAtrPercent23();
    tickerData5.fillDataArrays((int)(short)100, false);
    double d18 = tickerData5.getPriceOffLow260();
    java.util.Calendar calendar19 = null;
    net.ajaskey.market.ta.TickerData tickerData20 = new net.ajaskey.market.ta.TickerData();
    double[] d_array21 = tickerData20.getTrueLowData();
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate2(calendar25);
    net.ajaskey.market.ta.DailyData dailyData28 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData20, calendar25);
    boolean b29 = net.ajaskey.market.misc.Utils.sameYear(calendar19, calendar25);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar25);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.getDayName(calendar25);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar25);
    net.ajaskey.market.ta.DailyData dailyData33 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Fri 30-Jan-0001"+ "'", str12.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Fri 30-Jan-0001"+ "'", str27.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "unknown-day"+ "'", str31.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "java.util.GregorianCalendar[time=-62164808601341,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=659,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str32.equals("java.util.GregorianCalendar[time=-62164808601341,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=659,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData33);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test033"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    java.lang.String str10 = tickerData0.getTickerExchange();
    double d11 = tickerData0.getLow260();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TrendType trendType13 = tickerData0.getSma65Trend();
    double d14 = tickerData0.getRsStRaw();
    double d15 = tickerData0.getRsStRaw();
    net.ajaskey.market.ta.TrendType trendType16 = tickerData0.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType16);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test034"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.Double d24 = dailyData20.getVolume();
    java.lang.Double d25 = dailyData20.getOi();
    long long26 = dailyData20.getDaysSinceBase();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d24 + "' != '" + 0.0d+ "'", d24.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d25 + "' != '" + 0.0d+ "'", d25.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 693934L);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test035"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d11 = industryData0.getAvgVol();
    industryData0.setExch("Fri 30-Jan-0001  1.00  97.00  97.00  0.00     0    10      0.00      0.00");
    industryData0.setChg260(100.0d);
    double d16 = industryData0.getRawRsSt();
    industryData0.setChg260(32.0d);
    industryData0.setChg260(10.0d);
    industryData0.setName("java.util.GregorianCalendar[time=-62164808603993,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=36,MILLISECOND=7,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test036"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    java.lang.Double d8 = tickerData0.getSmaPerc23();
    double d9 = tickerData0.getChg23();
    double[] d_array10 = tickerData0.getTrueHighData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test037"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    double d14 = tickerData13.getChg23();
    double d15 = tickerData13.getChg260();
    double d16 = tickerData13.getAvgVol20();
    double d17 = tickerData13.getAdx();
    net.ajaskey.market.ta.TrendType trendType18 = tickerData13.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(trendType18);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test038"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.Double d24 = dailyData20.getVolume();
    java.lang.Double d25 = dailyData20.getOi();
    java.lang.Double d26 = dailyData20.getClose();
    java.lang.Double d27 = dailyData20.getLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d24 + "' != '" + 0.0d+ "'", d24.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d25 + "' != '" + 0.0d+ "'", d25.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d26 + "' != '" + 1.0d+ "'", d26.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d27 + "' != '" + 0.0d+ "'", d27.equals(0.0d));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test039"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    tickerData8.setTicker("java.util.GregorianCalendar[time=-62164808610398,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=29,MILLISECOND=602,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test040"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.util.Calendar calendar14 = dailyData11.getDate();
    dailyData11.setTrueHigh((double)(byte)0);
    java.lang.Double d17 = dailyData11.getLow();
    java.lang.Double d18 = dailyData11.getVolume();
    java.lang.String str19 = dailyData11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d17 + "' != '" + 0.0d+ "'", d17.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d18 + "' != '" + 0.0d+ "'", d18.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str19.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test041"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg65();
    double d8 = derivedData0.getRsi14();
    double d9 = derivedData0.getAtrPercent23();
    double d10 = derivedData0.getPriceOffLow260();
    double d11 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test042"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setMarketCap("NotFound");
    double d14 = industryData0.getAvgVol();
    double d15 = industryData0.getRawRsSt();
    java.lang.String str16 = industryData0.getTicker();
    industryData0.setShares(693934L);
    java.util.List<java.lang.Integer> list_i19 = industryData0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i19);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test043"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    java.util.Calendar calendar33 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate(calendar33);
    net.ajaskey.market.ta.DailyData dailyData41 = new net.ajaskey.market.ta.DailyData(calendar33, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b46 = net.ajaskey.market.misc.Utils.sameYear(calendar33, calendar45);
    long long47 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar26, calendar45);
    net.ajaskey.market.ta.DailyData dailyData54 = new net.ajaskey.market.ta.DailyData(calendar45, (double)100L, 0.0d, 32.0d, (double)2016L, (double)(-1L), (double)100.0f);
    long long55 = dailyData54.getDaysSinceBase();
    long long56 = dailyData54.getDaysSinceBase();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808601263,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=737,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808601263,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=737,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "30-Jan-0001"+ "'", str34.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long55 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 693934L);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test044"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808651119,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=881,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test045"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOpenData();
    double d11 = tickerData0.getLr260();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar15);
    java.util.Calendar calendar22 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate(calendar22);
    java.lang.String str24 = net.ajaskey.market.misc.Utils.stringDate2(calendar22);
    net.ajaskey.market.ta.TickerData tickerData31 = new net.ajaskey.market.ta.TickerData("hi!", calendar22, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar32 = net.ajaskey.market.misc.Utils.makeCopy(calendar22);
    boolean b33 = net.ajaskey.market.misc.Utils.sameDate(calendar15, calendar32);
    net.ajaskey.market.misc.Utils.printCalendar(calendar32);
    net.ajaskey.market.ta.DailyData dailyData41 = new net.ajaskey.market.ta.DailyData(calendar32, 0.0d, (double)(short)0, (double)'a', 0.0d, (-1.0d), (double)'a');
    tickerData0.addData(dailyData41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "java.util.GregorianCalendar[time=-62164808601232,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=768,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str17.equals("java.util.GregorianCalendar[time=-62164808601232,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=768,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "30-Jan-0001"+ "'", str23.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001"+ "'", str24.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test046"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    java.lang.Double d9 = tickerData0.getSma23();
    net.ajaskey.market.ta.methods.TaMethods taMethods10 = tickerData0.getTaMethods();
    double[] d_array11 = tickerData0.getHighData();
    java.lang.Double d12 = tickerData0.getSmaPerc23();
    double d13 = tickerData0.getRsRaw();
    double d14 = tickerData0.getChg260();
    double d15 = tickerData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test047"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(short)100, 0, (int)'4');
    net.ajaskey.market.ta.DailyData dailyData5 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData5);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test048"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc23();
    double d4 = derivedData0.getCurrentPrice();
    double d5 = derivedData0.getPriceOffHigh260();
    double d6 = derivedData0.getPriceInRng260();
    double d7 = derivedData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test049"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getDailyPercentRng();
    java.lang.Double d15 = dailyData11.getOpen();
    dailyData11.setTrueHigh((double)693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test050"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getRanks();
    long long9 = industryData0.getShares();
    industryData0.setAvgVol((double)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "101  "+ "'", str8.equals("101  "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test051"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.Double d9 = tickerData0.getSmaPerc260();
    double d10 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    double d21 = tickerData12.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType22 = tickerData12.getSma130Trend();
    double[] d_array23 = tickerData12.getVolumeData();
    int i27 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData12, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar32 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate(calendar32);
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate2(calendar32);
    net.ajaskey.market.ta.TickerData tickerData41 = new net.ajaskey.market.ta.TickerData("hi!", calendar32, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData42 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar32);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    net.ajaskey.market.ta.DailyData dailyData54 = new net.ajaskey.market.ta.DailyData(calendar46, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    long long56 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar32, calendar46);
    net.ajaskey.market.ta.TickerData tickerData63 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar32, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    net.ajaskey.market.ta.DailyData dailyData64 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar32);
    double d65 = tickerData0.getLr260();
    int i66 = tickerData0.getDataCount();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "30-Jan-0001"+ "'", str33.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Fri 30-Jan-0001"+ "'", str34.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d65 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test052"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.getDayName(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = new net.ajaskey.market.ta.TickerData();
    double[] d_array7 = tickerData6.getVolumeData();
    double d8 = tickerData6.getChg65();
    double[] d_array9 = tickerData6.getOiData();
    double d10 = tickerData6.getMfi65();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    java.lang.String str16 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar14);
    net.ajaskey.market.ta.TickerData tickerData17 = null;
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getTrueLowData();
    java.util.Calendar calendar23 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str24 = net.ajaskey.market.misc.Utils.stringDate(calendar23);
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate2(calendar23);
    net.ajaskey.market.ta.DailyData dailyData26 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData18, calendar23);
    int i27 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData17, calendar23);
    boolean b28 = net.ajaskey.market.misc.Utils.sameYear(calendar14, calendar23);
    java.util.Calendar calendar32 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate(calendar32);
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate2(calendar32);
    int i35 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData6, calendar23, calendar32);
    java.util.Calendar calendar39 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate(calendar39);
    net.ajaskey.market.ta.DailyData dailyData47 = new net.ajaskey.market.ta.DailyData(calendar39, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar51 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b52 = net.ajaskey.market.misc.Utils.sameYear(calendar39, calendar51);
    long long53 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar32, calendar51);
    boolean b54 = net.ajaskey.market.misc.Utils.sameMonth(calendar3, calendar32);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.getDayName(calendar32);
    net.ajaskey.market.ta.DailyData dailyData62 = new net.ajaskey.market.ta.DailyData(calendar32, (double)0.0f, 32.0d, (-1.0d), (double)(short)10, (double)100.0f, (double)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "unknown-day"+ "'", str5.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "java.util.GregorianCalendar[time=-62164808601170,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=830,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str16.equals("java.util.GregorianCalendar[time=-62164808601170,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=830,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "30-Jan-0001"+ "'", str24.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Fri 30-Jan-0001"+ "'", str25.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "30-Jan-0001"+ "'", str33.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Fri 30-Jan-0001"+ "'", str34.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "30-Jan-0001"+ "'", str40.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long53 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "unknown-day"+ "'", str55.equals("unknown-day"));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test053"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double d9 = tickerData0.getDiPlus();
    java.util.Calendar[] calendar_array10 = tickerData0.getDateData();
    java.lang.Double d11 = tickerData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d11);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test054"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setName("Unknown");
    industryData0.setName("null\tnull\tjava.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n\r\n");
    industryData0.setAvgVol(0.0d);
    java.lang.String str9 = industryData0.getExch();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test055"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    industryData0.setShares((long)'a');
    industryData0.setRank(1);
    // The following exception was thrown during execution in test generation
    try {
    double d14 = industryData0.getSlope((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test056"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    double d13 = tickerData0.getMfi23();
    tickerData0.rSort();
    net.ajaskey.market.ta.TrendType trendType15 = tickerData0.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test057"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    double d7 = tickerData0.getLr260();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.lang.String str9 = tickerData0.toString();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getVolumeData();
    double d12 = tickerData10.getChg65();
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData10, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType17 = tickerData10.getSma130Trend();
    double d18 = tickerData10.getAdx();
    java.lang.Double d19 = tickerData10.getSmaPerc23();
    java.util.Calendar calendar23 = net.ajaskey.market.misc.Utils.buildCalendar((int)(short)(-1), 0, (int)(short)1);
    net.ajaskey.market.ta.DailyData dailyData30 = new net.ajaskey.market.ta.DailyData(calendar23, (double)'#', (double)(byte)100, (double)(byte)(-1), (double)(short)(-1), (double)100, (double)(-1L));
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str35 = net.ajaskey.market.misc.Utils.stringDate(calendar34);
    java.lang.String str36 = net.ajaskey.market.misc.Utils.getDayName(calendar34);
    net.ajaskey.market.ta.TickerData tickerData37 = new net.ajaskey.market.ta.TickerData();
    double[] d_array38 = tickerData37.getVolumeData();
    double d39 = tickerData37.getChg65();
    double[] d_array40 = tickerData37.getOiData();
    double d41 = tickerData37.getMfi65();
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate(calendar45);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar45);
    net.ajaskey.market.ta.TickerData tickerData48 = null;
    net.ajaskey.market.ta.TickerData tickerData49 = new net.ajaskey.market.ta.TickerData();
    double[] d_array50 = tickerData49.getTrueLowData();
    java.util.Calendar calendar54 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate(calendar54);
    java.lang.String str56 = net.ajaskey.market.misc.Utils.stringDate2(calendar54);
    net.ajaskey.market.ta.DailyData dailyData57 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData49, calendar54);
    int i58 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData48, calendar54);
    boolean b59 = net.ajaskey.market.misc.Utils.sameYear(calendar45, calendar54);
    java.util.Calendar calendar63 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str64 = net.ajaskey.market.misc.Utils.stringDate(calendar63);
    java.lang.String str65 = net.ajaskey.market.misc.Utils.stringDate2(calendar63);
    int i66 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData37, calendar54, calendar63);
    java.util.Calendar calendar70 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str71 = net.ajaskey.market.misc.Utils.stringDate(calendar70);
    net.ajaskey.market.ta.DailyData dailyData78 = new net.ajaskey.market.ta.DailyData(calendar70, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar82 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b83 = net.ajaskey.market.misc.Utils.sameYear(calendar70, calendar82);
    long long84 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar63, calendar82);
    boolean b85 = net.ajaskey.market.misc.Utils.sameMonth(calendar34, calendar63);
    boolean b86 = net.ajaskey.market.misc.Utils.sameDate(calendar23, calendar34);
    java.lang.String str87 = net.ajaskey.market.misc.Utils.getString(calendar23);
    net.ajaskey.market.ta.DailyData dailyData88 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData10, calendar23);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData90 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar23, (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "HI!\tnull\tnull\r\n"+ "'", str9.equals("HI!\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "30-Jan-0001"+ "'", str35.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "unknown-day"+ "'", str36.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d39 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d41 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "30-Jan-0001"+ "'", str46.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "java.util.GregorianCalendar[time=-62164808601092,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=908,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str47.equals("java.util.GregorianCalendar[time=-62164808601092,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=38,MILLISECOND=908,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "30-Jan-0001"+ "'", str55.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Fri 30-Jan-0001"+ "'", str56.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "30-Jan-0001"+ "'", str64.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Fri 30-Jan-0001"+ "'", str65.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "30-Jan-0001"+ "'", str71.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long84 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "01-Jan-0002"+ "'", str87.equals("01-Jan-0002"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData88);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test058"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOiData();
    int i11 = tickerData0.getDataCount();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((-100), true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test059"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.String str24 = dailyData20.toString();
    java.lang.Double d25 = dailyData20.getClose();
    java.lang.Double d26 = dailyData20.getHigh();
    double d27 = dailyData20.getDailyChg();
    java.lang.Double d28 = dailyData20.getLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str24.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d25 + "' != '" + 1.0d+ "'", d25.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d26 + "' != '" + 10.0d+ "'", d26.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d28 + "' != '" + 0.0d+ "'", d28.equals(0.0d));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test060"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    java.lang.Double d8 = tickerData0.getSma260();
    java.lang.Double d9 = tickerData0.getSmaPerc65();
    java.lang.Integer i10 = tickerData0.getDaysOfData();
    java.util.Calendar calendar11 = null;
    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.DailyData dailyData12 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i10);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test061"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc23();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    double d6 = derivedData0.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test062"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getMfi130();
    double d4 = tickerData0.getAvgVol20();
    double d5 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test063"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.String str24 = dailyData20.toString();
    java.lang.Double d25 = dailyData20.getClose();
    java.lang.Double d26 = dailyData20.getHigh();
    double d27 = dailyData20.getDailyChg();
    dailyData20.setDailyChg(32.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str24.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d25 + "' != '" + 1.0d+ "'", d25.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d26 + "' != '" + 10.0d+ "'", d26.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 0.0d);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test064"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc23();
    java.lang.Double d3 = derivedData0.getSma260();
    double d4 = derivedData0.getRsStRaw();
    double d5 = derivedData0.getPriceInRng260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test065"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.util.Calendar calendar14 = dailyData11.getDate();
    dailyData11.setTrueHigh((-1.0d));
    java.util.Calendar calendar17 = dailyData11.getDate();
    dailyData11.setDailyChg(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test066"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceInRng260();
    double d3 = derivedData0.getMfi14();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getPriceOffLow260();
    double d6 = derivedData0.getChg130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test067"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    double d13 = dailyData11.getDailyRng();
    java.lang.Double d14 = dailyData11.getVolume();
    java.lang.Double d15 = dailyData11.getOi();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 0.0d+ "'", d14.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test068"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double[] d_array6 = tickerData0.getTrueHighData();
    tickerData0.setTicker("NotFound");
    java.lang.String str9 = tickerData0.toString();
    double d10 = tickerData0.getChg();
    double d11 = tickerData0.getRsi14();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    java.lang.String str14 = tickerData0.toString();
    double d15 = tickerData0.getChg130();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = tickerData0.DailyDataString(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "NOTFOUND\tnull\tnull\r\n"+ "'", str9.equals("NOTFOUND\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "NOTFOUND\tnull\tnull\r\n"+ "'", str14.equals("NOTFOUND\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test069"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getChg65();
    double d5 = derivedData0.getLow260();
    double d6 = derivedData0.getRsRaw();
    double d7 = derivedData0.getAtrPercent23();
    double d8 = derivedData0.getRsStRaw();
    double d9 = derivedData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test070"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    double d3 = industryData0.getPriceInRange260();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808641601,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=399,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test071"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getAtrPercent23();
    double d6 = derivedData0.getPriceOffHigh260();
    double d7 = derivedData0.getAtrPercent23();
    double d8 = derivedData0.getChg260();
    double d9 = derivedData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test072"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)100, (int)(short)(-1), (int)(short)1);
    java.lang.String str8 = tickerData0.getTicker();
    java.lang.Integer i9 = tickerData0.getDaysOfData();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i9);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test073"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808622580,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=17,MILLISECOND=420,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (-100));
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test074"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    java.lang.String str9 = industryData0.getTicker();
    industryData0.setChg260((double)100);
    industryData0.setSlope(52.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test075"); }


    java.util.ArrayList<java.lang.String> arraylist_str1 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str1, str_array3);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str1, (int)(byte)1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData8 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str1);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData10 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData11 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str1);
    net.ajaskey.market.ta.TickerData tickerData12 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808630252,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=9,MILLISECOND=748,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData12);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test076"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    double d7 = tickerData0.getLr260();
    double[] d_array8 = tickerData0.getTrueHighData();
    tickerData0.fillDataArrays(1, false);
    double[] d_array12 = tickerData0.getTrueHighData();
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData();
    double[] d_array14 = tickerData13.getVolumeData();
    double d15 = tickerData13.getChg65();
    double[] d_array16 = tickerData13.getOiData();
    double d17 = tickerData13.getMfi65();
    tickerData13.fillDataArrays((int)(byte)0, true);
    java.lang.String str21 = tickerData13.toString();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData13);
    double d23 = tickerData0.getPriceOffLow260();
    double d24 = tickerData0.getLow260();
    double d25 = tickerData0.getRsRaw();
    double d26 = tickerData0.getCurrentPrice();
    net.ajaskey.market.ta.input.Fundamentals fundamentals27 = tickerData0.getFundies();
    java.util.Calendar calendar31 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate(calendar31);
    net.ajaskey.market.ta.DailyData dailyData39 = new net.ajaskey.market.ta.DailyData(calendar31, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar40 = dailyData39.getDate();
    double d41 = dailyData39.getDailyPercentRng();
    double d42 = dailyData39.getTrueLow();
    dailyData39.setDailyChg((double)' ');
    long long45 = dailyData39.getDaysSinceBase();
    double d46 = dailyData39.getDailyRng();
    tickerData0.addData(dailyData39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "null\tnull\tnull\r\n"+ "'", str21.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "30-Jan-0001"+ "'", str32.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d41 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d42 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d46 == 0.0d);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test077"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getChg260();
    double d9 = tickerData0.getAtr23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    java.lang.Double d11 = tickerData0.getSmaPerc65();
    double d12 = tickerData0.getLow260();
    double[] d_array13 = tickerData0.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test078"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar[] calendar_array9 = tickerData0.getDateData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array9);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test079"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getMfi14();
    double[] d_array11 = tickerData0.getTrueLowData();
    double d12 = tickerData0.getPriceInRng260();
    java.util.Calendar calendar16 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate(calendar16);
    net.ajaskey.market.ta.DailyData dailyData24 = new net.ajaskey.market.ta.DailyData(calendar16, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    dailyData24.setTrueLow(0.0d);
    java.lang.Double d27 = dailyData24.getHigh();
    java.util.Calendar calendar28 = dailyData24.getDate();
    java.lang.String str29 = net.ajaskey.market.misc.Utils.getMonthName(calendar28);
    java.util.Calendar calendar33 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate(calendar33);
    long long35 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar28, calendar33);
    java.util.Calendar calendar36 = null;
    int i37 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar33, calendar36);
    java.lang.Double d38 = tickerData0.getSma65();
    net.ajaskey.market.ta.TrendType trendType39 = tickerData0.getSma65Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "30-Jan-0001"+ "'", str17.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d27 + "' != '" + 10.0d+ "'", d27.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "unknown-month"+ "'", str29.equals("unknown-month"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "30-Jan-0001"+ "'", str34.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType39);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test080"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRawRsSt(0.0d);
    industryData0.setMarketCap("1");
    java.lang.String str8 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1"+ "'", str8.equals("1"));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test081"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'#', (int)(short)10, (int)(byte)0);
    java.lang.String str8 = tickerData0.getTickerName();
    double d9 = tickerData0.getDiPlus();
    java.lang.Double d10 = tickerData0.getSmaPerc260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getVolumeData();
    double d13 = tickerData11.getChg65();
    double[] d_array14 = tickerData11.getOiData();
    double d15 = tickerData11.getMfi65();
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate(calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar19);
    net.ajaskey.market.ta.TickerData tickerData22 = null;
    net.ajaskey.market.ta.TickerData tickerData23 = new net.ajaskey.market.ta.TickerData();
    double[] d_array24 = tickerData23.getTrueLowData();
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate2(calendar28);
    net.ajaskey.market.ta.DailyData dailyData31 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData23, calendar28);
    int i32 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData22, calendar28);
    boolean b33 = net.ajaskey.market.misc.Utils.sameYear(calendar19, calendar28);
    java.util.Calendar calendar37 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate(calendar37);
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate2(calendar37);
    int i40 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData11, calendar28, calendar37);
    net.ajaskey.market.ta.TickerData tickerData41 = new net.ajaskey.market.ta.TickerData();
    double[] d_array42 = tickerData41.getVolumeData();
    double d43 = tickerData41.getChg65();
    double[] d_array44 = tickerData41.getOiData();
    double d45 = tickerData41.getMfi65();
    java.util.Calendar calendar49 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str50 = net.ajaskey.market.misc.Utils.stringDate(calendar49);
    java.lang.String str51 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar49);
    net.ajaskey.market.ta.TickerData tickerData52 = null;
    net.ajaskey.market.ta.TickerData tickerData53 = new net.ajaskey.market.ta.TickerData();
    double[] d_array54 = tickerData53.getTrueLowData();
    java.util.Calendar calendar58 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str59 = net.ajaskey.market.misc.Utils.stringDate(calendar58);
    java.lang.String str60 = net.ajaskey.market.misc.Utils.stringDate2(calendar58);
    net.ajaskey.market.ta.DailyData dailyData61 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData53, calendar58);
    int i62 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData52, calendar58);
    boolean b63 = net.ajaskey.market.misc.Utils.sameYear(calendar49, calendar58);
    java.util.Calendar calendar67 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str68 = net.ajaskey.market.misc.Utils.stringDate(calendar67);
    java.lang.String str69 = net.ajaskey.market.misc.Utils.stringDate2(calendar67);
    int i70 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData41, calendar58, calendar67);
    boolean b71 = net.ajaskey.market.misc.Utils.sameMonth(calendar28, calendar58);
    java.util.Calendar calendar75 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar76 = net.ajaskey.market.misc.Utils.makeCopy(calendar75);
    java.util.Calendar calendar77 = net.ajaskey.market.misc.Utils.makeCopy(calendar75);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar58, calendar75);
    int i79 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar58);
    java.util.Calendar[] calendar_array80 = tickerData0.getDateData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "java.util.GregorianCalendar[time=-62164808600951,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=49,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str21.equals("java.util.GregorianCalendar[time=-62164808600951,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=49,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Fri 30-Jan-0001"+ "'", str30.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "30-Jan-0001"+ "'", str38.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Fri 30-Jan-0001"+ "'", str39.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "30-Jan-0001"+ "'", str50.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "java.util.GregorianCalendar[time=-62164808600951,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=49,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str51.equals("java.util.GregorianCalendar[time=-62164808600951,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=49,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "30-Jan-0001"+ "'", str59.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Fri 30-Jan-0001"+ "'", str60.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "30-Jan-0001"+ "'", str68.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Fri 30-Jan-0001"+ "'", str69.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array80);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test082"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setTicker("0");
    industryData0.setSlope((double)100.0f);
    double d7 = industryData0.getRawRsSt();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test083"); }


    java.util.Map<java.lang.String,java.lang.Integer> map_str_i0 = net.ajaskey.market.misc.Utils.mapNames;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(map_str_i0);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test084"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getTrueLow();
    java.lang.String str15 = dailyData11.toString();
    dailyData11.setTrueHigh((double)100.0f);
    java.lang.Double d18 = dailyData11.getVolume();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str15.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d18 + "' != '" + 0.0d+ "'", d18.equals(0.0d));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test085"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getChg130();
    double d5 = derivedData0.getPriceOffHigh260();
    double d6 = derivedData0.getPriceOffLow260();
    java.lang.Double d7 = derivedData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test086"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getTrueLow();
    tickerData0.addData(dailyData50);
    java.lang.String str54 = tickerData0.getTicker();
    double d55 = tickerData0.getCurrentPrice();
    double d56 = tickerData0.getCurrentPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808600873,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=127,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808600873,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=127,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "FRI"+ "'", str54.equals("FRI"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d56 == 0.0d);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test087"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.lang.Double d14 = tickerData0.getSmaPerc23();
    double[] d_array15 = tickerData0.getOiData();
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getVolumeData();
    double d18 = tickerData16.getChg65();
    int i22 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData16, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType23 = tickerData16.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getVolumeData();
    double d26 = tickerData24.getChg65();
    double[] d_array27 = tickerData24.getOiData();
    double d28 = tickerData24.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData16, tickerData24);
    java.lang.String str30 = tickerData24.getTicker();
    double[] d_array31 = tickerData24.getVolumeData();
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate(calendar36);
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate2(calendar36);
    net.ajaskey.market.ta.TickerData tickerData45 = new net.ajaskey.market.ta.TickerData("hi!", calendar36, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData46 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData24, calendar36);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate2(calendar36);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.getMonthName(calendar36);
    int i49 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar36);
    net.ajaskey.market.ta.DailyData dailyData53 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (-1), (int)(byte)0, (int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((-1), true);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "30-Jan-0001"+ "'", str37.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Fri 30-Jan-0001"+ "'", str38.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Fri 30-Jan-0001"+ "'", str47.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "unknown-month"+ "'", str48.equals("unknown-month"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData53);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test088"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getChg65();
    java.lang.Double d5 = derivedData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test089"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc130();
    double d5 = derivedData0.getChg130();
    double d6 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test090"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    java.lang.Double d5 = tickerData0.getSmaPerc23();
    java.lang.Double d6 = tickerData0.getSma65();
    net.ajaskey.market.ta.input.Fundamentals fundamentals7 = tickerData0.getFundies();
    double d8 = tickerData0.getLrSlope260();
    double d9 = tickerData0.getCurrentPrice();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate2(calendar14);
    net.ajaskey.market.ta.TickerData tickerData23 = new net.ajaskey.market.ta.TickerData("hi!", calendar14, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.makeCopy(calendar14);
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar28);
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.TickerData tickerData44 = new net.ajaskey.market.ta.TickerData("hi!", calendar35, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.makeCopy(calendar35);
    boolean b46 = net.ajaskey.market.misc.Utils.sameDate(calendar28, calendar45);
    long long47 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar24, calendar45);
    net.ajaskey.market.ta.DailyData dailyData54 = new net.ajaskey.market.ta.DailyData(calendar45, 0.0d, 0.0d, (double)(byte)100, (double)'#', (double)' ', (double)(short)1);
    tickerData0.addData(dailyData54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Fri 30-Jan-0001"+ "'", str16.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "java.util.GregorianCalendar[time=-62164808600842,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=158,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str30.equals("java.util.GregorianCalendar[time=-62164808600842,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=158,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 0L);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test091"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setMarketCap("NotFound");
    double d14 = industryData0.getAvgVol();
    double d15 = industryData0.getRawRsSt();
    java.lang.String str16 = industryData0.getTicker();
    industryData0.setShares(693934L);
    industryData0.setRawRsSt((double)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test092"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    java.lang.String str8 = industryData0.getMarketCap();
    industryData0.setRawRsSt((double)(short)0);
    industryData0.setShares((long)(byte)0);
    java.lang.String str13 = industryData0.getSector();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str13.equals("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test093"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOiData();
    double d11 = tickerData0.getMfi23();
    double d12 = tickerData0.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test094"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((double)'#');

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test095"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.methods.TaMethods taMethods8 = tickerData0.getTaMethods();
    double d9 = tickerData0.getDiPlus();
    java.lang.Double d10 = tickerData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test096"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)1);
    industryData0.setTicker("08-May-0035");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test097"); }


    java.util.Map<java.lang.String,java.lang.Integer> map_str_i0 = net.ajaskey.market.misc.Utils.mapDays;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(map_str_i0);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test098"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double[] d_array6 = tickerData0.getTrueHighData();
    tickerData0.setTicker("NotFound");
    java.lang.String str9 = tickerData0.toString();
    double d10 = tickerData0.getChg();
    double d11 = tickerData0.getRsi14();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma23Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "NOTFOUND\tnull\tnull\r\n"+ "'", str9.equals("NOTFOUND\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test099"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getTrueLow();
    double d14 = dailyData11.getDailyRng();
    java.lang.Double d15 = dailyData11.getOpen();
    dailyData11.setVolume((double)(byte)0);
    double d18 = dailyData11.getDailyPercentRng();
    java.lang.Double d19 = dailyData11.getOi();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d19 + "' != '" + 0.0d+ "'", d19.equals(0.0d));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test100"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    java.lang.Double d7 = derivedData0.getSma130();
    double d8 = derivedData0.getMfi65();
    java.lang.Double d9 = derivedData0.getSmaPerc130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test101"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    double d16 = tickerData0.getAtr23();
    double d17 = tickerData0.getMfi23();
    double d18 = tickerData0.getHigh260();
    double d19 = tickerData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test102"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    double d1 = industryData0.getAvgVol();
    java.lang.String str2 = industryData0.getName();
    industryData0.setRawRsSt((double)(short)10);
    long long5 = industryData0.getfShares();
    industryData0.setRank(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test103"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    java.lang.Double d6 = derivedData0.getSma260();
    double d7 = derivedData0.getMfi23();
    double d8 = derivedData0.getAtr23();
    java.lang.Double d9 = derivedData0.getSmaPerc130();
    double d10 = derivedData0.getAtr23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test104"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    tickerData0.fillDataArrays(1, false);
    double d8 = tickerData0.getHigh260();
    java.lang.Integer i9 = tickerData0.getDaysOfData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i9 + "' != '" + (-1)+ "'", i9.equals((-1)));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test105"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setPriceInRange260((double)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    int i6 = industryData0.getRank(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test106"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    java.lang.Double d4 = derivedData0.getSma130();
    double d5 = derivedData0.getChg260();
    double d6 = derivedData0.getHigh260();
    double d7 = derivedData0.getLr260();
    java.lang.Double d8 = derivedData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test107"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)(byte)1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test108"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getLr260();
    java.lang.Double d8 = derivedData0.getSma260();
    double d9 = derivedData0.getDiPlus();
    double d10 = derivedData0.getAvgVol65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test109"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getChg65();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsStRaw();
    double d5 = derivedData0.getAvgVol65();
    double d6 = derivedData0.getAvgVol20();
    double d7 = derivedData0.getRsStRaw();
    java.lang.Double d8 = derivedData0.getSma65();
    double d9 = derivedData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test110"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getAtrPercent23();
    double d6 = derivedData0.getAtr23();
    java.lang.Double d7 = derivedData0.getSmaPerc130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test111"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    java.lang.String str13 = tickerData0.toString();
    double d14 = tickerData0.getMfi23();
    double d15 = tickerData0.getChg65();
    java.util.Calendar[] calendar_array16 = tickerData0.getDateData();
    net.ajaskey.market.ta.TrendType trendType17 = tickerData0.getSma23Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null\tnull\tnull\r\n"+ "'", str13.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType17);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test112"); }


    java.util.Calendar calendar0 = net.ajaskey.market.misc.Utils.getBaseDate();
    java.lang.String str1 = net.ajaskey.market.misc.Utils.stringDate(calendar0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "01-Jan-1900"+ "'", str1.equals("01-Jan-1900"));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test113"); }


    java.util.Calendar calendar1 = null;
    net.ajaskey.market.ta.TickerData tickerData2 = new net.ajaskey.market.ta.TickerData();
    double[] d_array3 = tickerData2.getTrueLowData();
    java.util.Calendar calendar7 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate(calendar7);
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate2(calendar7);
    net.ajaskey.market.ta.DailyData dailyData10 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData2, calendar7);
    boolean b11 = net.ajaskey.market.misc.Utils.sameYear(calendar1, calendar7);
    java.util.Calendar calendar16 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate(calendar16);
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate2(calendar16);
    net.ajaskey.market.ta.TickerData tickerData25 = new net.ajaskey.market.ta.TickerData("hi!", calendar16, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.makeCopy(calendar16);
    boolean b27 = net.ajaskey.market.misc.Utils.sameDate(calendar1, calendar16);
    net.ajaskey.market.ta.TickerData tickerData34 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808646751,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=249,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar16, (double)(-1), 100.0d, 0.0d, (double)1, (double)0L, (double)(short)10);
    double[] d_array35 = tickerData34.getTrueLowData();
    java.lang.Double d36 = tickerData34.getSmaPerc130();
    double[] d_array37 = tickerData34.getVolumeData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "30-Jan-0001"+ "'", str8.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Fri 30-Jan-0001"+ "'", str9.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "30-Jan-0001"+ "'", str17.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Fri 30-Jan-0001"+ "'", str18.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d36 + "' != '" + 0.0d+ "'", d36.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array37);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test114"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d23 = dailyData22.getClose();
    double d24 = dailyData22.getDailyPercentChg();
    tickerData0.addData(dailyData22);
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar29);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(byte)(-1), (int)(short)1, (int)' ');
    double d37 = tickerData0.getChg65();
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808621785,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=18,MILLISECOND=215,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d23 + "' != '" + 1.0d+ "'", d23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d37 == 0.0d);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test115"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    java.lang.String str13 = dailyData11.toString();
    java.lang.Double d14 = dailyData11.getOpen();
    dailyData11.setVolume((double)1L);
    long long17 = dailyData11.getDaysSinceBase();
    double d18 = dailyData11.getTrueHigh();
    dailyData11.setVolume(100.0d);
    double d21 = dailyData11.getDailyPercentChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str13.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 0.0d+ "'", d14.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test116"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSma65();
    double d4 = derivedData0.getMfi65();
    double d5 = derivedData0.getLr260();
    java.lang.Double d6 = derivedData0.getSma65();
    double d7 = derivedData0.getChg65();
    double d8 = derivedData0.getLrAngle260();
    double d9 = derivedData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test117"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData11);
    double d14 = tickerData0.getLrAngle260();
    double[] d_array15 = tickerData0.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test118"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    double d15 = tickerData13.getAvgVol65();
    java.lang.Double d16 = tickerData13.getSmaPerc130();
    tickerData13.rSort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test119"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getMfi130();
    double d4 = derivedData0.getPriceOffLow260();
    double d5 = derivedData0.getAtr23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test120"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    int i17 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData8, (int)(short)10, (int)(byte)(-1), 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test121"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808633294,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=6,MILLISECOND=706,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setSlope((-99.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test122"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, 0, (int)(byte)0, (int)(short)100);
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getTrueLowData();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate2(calendar15);
    net.ajaskey.market.ta.DailyData dailyData18 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData10, calendar15);
    double[] d_array19 = tickerData10.getOiData();
    double[] d_array20 = tickerData10.getOiData();
    double d21 = tickerData10.getMfi23();
    double[] d_array22 = tickerData10.getOiData();
    net.ajaskey.market.ta.TrendType trendType23 = tickerData10.getSma23Trend();
    java.lang.String str24 = tickerData10.getTickerExchange();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001"+ "'", str17.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test123"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808650526,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=474,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.util.List<java.lang.Integer> list_i13 = industryData0.getRank();
    industryData0.setPriceInRange260((double)(byte)(-1));
    industryData0.setRawRs((double)1.0f);
    java.util.List<java.lang.Integer> list_i18 = industryData0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i18);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test124"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getDiPlus();
    java.lang.Double d4 = derivedData0.getSma65();
    double d5 = derivedData0.getChg65();
    double d6 = derivedData0.getHigh260();
    double d7 = derivedData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test125"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setName("100");
    java.lang.String str3 = industryData0.getExch();
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808647110,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=890,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d6 = industryData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test126"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    double d13 = dailyData11.getDailyRng();
    double d14 = dailyData11.getDailyRng();
    double d15 = dailyData11.getDailyRng();
    java.lang.Double d16 = dailyData11.getClose();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 1.0d+ "'", d16.equals(1.0d));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test127"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc23();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test128"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double d14 = tickerData13.getChg23();
    java.lang.Double d15 = tickerData13.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test129"); }


    net.ajaskey.market.misc.Utils.makeDir("java.util.GregorianCalendar[time=-62164808648436,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=564,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test130"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOpenData();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    java.util.Calendar calendar16 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate(calendar16);
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate2(calendar16);
    net.ajaskey.market.ta.DailyData dailyData19 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData11, calendar16);
    double d20 = tickerData11.getAtrPercent23();
    double d21 = tickerData11.getDiPlus();
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    net.ajaskey.market.ta.DailyData dailyData33 = new net.ajaskey.market.ta.DailyData(calendar25, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d34 = dailyData33.getClose();
    double d35 = dailyData33.getDailyPercentChg();
    tickerData11.addData(dailyData33);
    java.util.Calendar calendar40 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str41 = net.ajaskey.market.misc.Utils.stringDate(calendar40);
    java.lang.String str42 = net.ajaskey.market.misc.Utils.stringDate2(calendar40);
    net.ajaskey.market.ta.DailyData dailyData43 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData11, calendar40);
    tickerData0.addData(dailyData43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "30-Jan-0001"+ "'", str17.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Fri 30-Jan-0001"+ "'", str18.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d34 + "' != '" + 1.0d+ "'", d34.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d35 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "30-Jan-0001"+ "'", str41.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Fri 30-Jan-0001"+ "'", str42.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dailyData43);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test131"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.methods.TaMethods taMethods8 = tickerData0.getTaMethods();
    double d9 = tickerData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test132"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.String str24 = dailyData20.toString();
    double d25 = dailyData20.getDailyChg();
    java.lang.Double d26 = dailyData20.getClose();
    java.lang.Double d27 = dailyData20.getOpen();
    double d28 = dailyData20.getDailyPercentChg();
    java.lang.String str29 = dailyData20.toString();
    long long30 = dailyData20.getDaysSinceBase();
    dailyData20.setTrueLow((double)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str24.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d26 + "' != '" + 1.0d+ "'", d26.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d27 + "' != '" + 0.0d+ "'", d27.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str29.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 693934L);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test133"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    net.ajaskey.market.ta.methods.TaMethods taMethods9 = tickerData0.getTaMethods();
    double d10 = tickerData0.getRsStRaw();
    double[] d_array11 = tickerData0.getVolumeData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test134"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.Double d24 = dailyData20.getVolume();
    double d25 = dailyData20.getDailyPercentChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d24 + "' != '" + 0.0d+ "'", d24.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test135"); }


    net.ajaskey.market.ta.TickerData tickerData0 = null;
    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    net.ajaskey.market.ta.DailyData dailyData12 = new net.ajaskey.market.ta.DailyData(calendar4, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d13 = dailyData12.getTrueHigh();
    java.lang.String str14 = dailyData12.toString();
    java.lang.Double d15 = dailyData12.getVolume();
    java.lang.String str16 = dailyData12.toString();
    java.util.Calendar calendar17 = dailyData12.getDate();
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData19 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar17, (int)(byte)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str14.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str16.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Fri 30-Jan-0001"+ "'", str20.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test136"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    java.lang.String str7 = tickerData0.getTicker();
    net.ajaskey.market.ta.TrendType trendType8 = tickerData0.getSma65Trend();
    java.lang.Double d9 = tickerData0.getSmaPerc130();
    double d10 = tickerData0.getLr260();
    double d11 = tickerData0.getDiMinus();
    double[] d_array12 = tickerData0.getTypicalPriceData();
    double[] d_array13 = tickerData0.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "HI!"+ "'", str7.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test137"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setName("Unknown");
    industryData0.setName("null\tnull\tjava.util.GregorianCalendar[time=-62164808650620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=380,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n\r\n");
    java.lang.String str7 = industryData0.getExch();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test138"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808651119,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=881,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test139"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    net.ajaskey.market.ta.TickerData tickerData55 = new net.ajaskey.market.ta.TickerData("hi!", calendar46, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar38, calendar46);
    double[] d_array57 = tickerData0.getHighData();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)(byte)0, true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808600483,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=517,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808600483,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=517,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array57);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test140"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    tickerData0.rSort();
    double d4 = tickerData0.getLrSlope260();
    net.ajaskey.market.ta.TickerData tickerData5 = new net.ajaskey.market.ta.TickerData();
    double[] d_array6 = tickerData5.getTrueLowData();
    java.util.Calendar calendar10 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate(calendar10);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate2(calendar10);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar10);
    double d14 = tickerData5.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType15 = tickerData5.getSma130Trend();
    double[] d_array16 = tickerData5.getVolumeData();
    int i20 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData5, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate2(calendar25);
    net.ajaskey.market.ta.TickerData tickerData34 = new net.ajaskey.market.ta.TickerData("hi!", calendar25, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData35 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar25);
    java.util.Calendar calendar39 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate(calendar39);
    net.ajaskey.market.ta.DailyData dailyData47 = new net.ajaskey.market.ta.DailyData(calendar39, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar39);
    long long49 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar25, calendar39);
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar25);
    java.util.Calendar calendar54 = net.ajaskey.market.misc.Utils.buildCalendar((int)'a', (int)(byte)1, (int)'a');
    long long55 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar25, calendar54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Fri 30-Jan-0001"+ "'", str12.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Fri 30-Jan-0001"+ "'", str27.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "30-Jan-0001"+ "'", str40.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long55 == 35528L);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test141"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    net.ajaskey.market.ta.methods.TaMethods taMethods9 = tickerData0.getTaMethods();
    double d10 = tickerData0.getRsRaw();
    java.util.Calendar[] calendar_array11 = tickerData0.getDateData();
    double d12 = tickerData0.getRsStRaw();
    double d13 = tickerData0.getHigh260();
    java.lang.Double d14 = tickerData0.getSma23();
    double d15 = tickerData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test142"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    java.lang.Double d4 = tickerData0.getSma65();
    java.lang.Double d5 = tickerData0.getSma260();
    double d6 = tickerData0.getChg130();
    tickerData0.fillDataArrays((int)(byte)10, false);
    double d10 = tickerData0.getLr260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test143"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma130Trend();
    double d6 = tickerData0.getLrAngle260();
    tickerData0.rSort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test144"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getHigh();
    dailyData11.setTrueLow((double)'4');
    java.util.Calendar calendar15 = dailyData11.getDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 10.0d+ "'", d12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test145"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar7 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate(calendar7);
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate2(calendar7);
    boolean b10 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar7);
    java.lang.String str11 = net.ajaskey.market.misc.Utils.getString(calendar7);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.getString(calendar7);
    java.util.Calendar calendar16 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate(calendar16);
    net.ajaskey.market.ta.DailyData dailyData24 = new net.ajaskey.market.ta.DailyData(calendar16, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d25 = dailyData24.getClose();
    double d26 = dailyData24.getTrueLow();
    java.lang.Double d27 = dailyData24.getHigh();
    java.util.Calendar calendar28 = dailyData24.getDate();
    long long29 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar7, calendar28);
    net.ajaskey.market.misc.Utils.printCalendar(calendar7);
    net.ajaskey.market.ta.TickerData tickerData31 = new net.ajaskey.market.ta.TickerData();
    double[] d_array32 = tickerData31.getVolumeData();
    double d33 = tickerData31.getChg65();
    tickerData31.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType36 = tickerData31.getSma65Trend();
    double[] d_array37 = tickerData31.getTypicalPriceData();
    tickerData31.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.util.Calendar calendar43 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str44 = net.ajaskey.market.misc.Utils.stringDate(calendar43);
    net.ajaskey.market.ta.DailyData dailyData51 = new net.ajaskey.market.ta.DailyData(calendar43, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d52 = dailyData51.getClose();
    double d53 = dailyData51.getDailyPercentChg();
    double d54 = dailyData51.getDailyPercentRng();
    dailyData51.setTrueHigh((double)(short)(-1));
    dailyData51.setDailyChg(100.0d);
    java.util.Calendar calendar59 = dailyData51.getDate();
    net.ajaskey.market.ta.DailyData dailyData60 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData31, calendar59);
    net.ajaskey.market.misc.Utils.printCalendar(calendar59);
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.getDayName(calendar65);
    boolean b68 = net.ajaskey.market.misc.Utils.sameDate(calendar59, calendar65);
    boolean b69 = net.ajaskey.market.misc.Utils.sameMonth(calendar7, calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "30-Jan-0001"+ "'", str8.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Fri 30-Jan-0001"+ "'", str9.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "30-Jan-0001"+ "'", str12.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "30-Jan-0001"+ "'", str17.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d25 + "' != '" + 1.0d+ "'", d25.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d27 + "' != '" + 10.0d+ "'", d27.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "30-Jan-0001"+ "'", str44.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d52 + "' != '" + 1.0d+ "'", d52.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d53 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "unknown-day"+ "'", str67.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test146"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    net.ajaskey.market.ta.TickerData tickerData55 = new net.ajaskey.market.ta.TickerData("hi!", calendar46, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar38, calendar46);
    tickerData0.fillDataArrays(100, false);
    java.util.Calendar calendar64 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str65 = net.ajaskey.market.misc.Utils.stringDate(calendar64);
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate2(calendar64);
    net.ajaskey.market.ta.TickerData tickerData73 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar64, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    net.ajaskey.market.ta.DailyData dailyData74 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar64);
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar64);
    java.util.Calendar calendar76 = net.ajaskey.market.misc.Utils.makeCopy(calendar64);
    java.util.Calendar calendar80 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str81 = net.ajaskey.market.misc.Utils.stringDate(calendar80);
    net.ajaskey.market.ta.DailyData dailyData88 = new net.ajaskey.market.ta.DailyData(calendar80, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar89 = dailyData88.getDate();
    java.util.Calendar calendar90 = net.ajaskey.market.misc.Utils.makeCopy(calendar89);
    boolean b91 = net.ajaskey.market.misc.Utils.sameYear(calendar76, calendar90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808600327,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=673,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808600327,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=673,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "30-Jan-0001"+ "'", str65.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Fri 30-Jan-0001"+ "'", str66.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "30-Jan-0001"+ "'", str81.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test147"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getTrueLow();
    tickerData0.addData(dailyData50);
    java.lang.String str54 = tickerData0.getTicker();
    double d55 = tickerData0.getCurrentPrice();
    net.ajaskey.market.ta.TrendType trendType56 = tickerData0.getSma65Trend();
    net.ajaskey.market.ta.TrendType trendType57 = tickerData0.getSma23Trend();
    java.lang.Double d58 = tickerData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808600187,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=813,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808600187,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=813,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "FRI"+ "'", str54.equals("FRI"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d58);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test148"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getDiPlus();
    double d4 = derivedData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test149"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc23();
    double d5 = derivedData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test150"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    net.ajaskey.market.ta.TrendType trendType1 = tickerData0.getSma130Trend();
    java.lang.String str2 = tickerData0.getTickerName();
    double d3 = tickerData0.getCurrentPrice();
    net.ajaskey.market.ta.input.Fundamentals fundamentals4 = tickerData0.getFundies();
    double[] d_array5 = tickerData0.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test151"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    industryData0.setRawRsSt(100.0d);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808633154,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=6,MILLISECOND=846,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setName("java.util.GregorianCalendar[time=-62164808604040,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=35,MILLISECOND=960,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test152"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceInRng260();
    double d3 = derivedData0.getMfi14();
    double d4 = derivedData0.getDiPlus();
    double d5 = derivedData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test153"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    net.ajaskey.market.ta.methods.TaMethods taMethods9 = tickerData0.getTaMethods();
    java.lang.Double d10 = tickerData0.getSmaPerc130();
    double d11 = tickerData0.getDiMinus();
    double d12 = tickerData0.getAdx();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test154"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    double d6 = derivedData0.getPriceInRng260();
    java.lang.Double d7 = derivedData0.getSmaPerc130();
    double d8 = derivedData0.getLr260();
    double d9 = derivedData0.getPriceInRng260();
    java.lang.Double d10 = derivedData0.getSmaPerc130();
    double d11 = derivedData0.getDiPlus();
    double d12 = derivedData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d10 + "' != '" + 0.0d+ "'", d10.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test155"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double d14 = tickerData13.getChg65();
    double d15 = tickerData13.getLrAngle260();
    double d16 = tickerData13.getRsRaw();
    int i20 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData13, (int)(short)100, (int)(byte)(-1), (int)'#');
    double d21 = tickerData13.getChg23();
    double[] d_array22 = tickerData13.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array22);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test156"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    net.ajaskey.market.ta.TrendType trendType28 = tickerData13.getSma130Trend();
    double d29 = tickerData13.getMfi23();
    net.ajaskey.market.ta.methods.TaMethods taMethods30 = tickerData13.getTaMethods();
    double d31 = tickerData13.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(trendType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test157"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double d6 = tickerData0.getDiMinus();
    tickerData0.setTicker("hi!");
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar16 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate(calendar16);
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate2(calendar16);
    boolean b19 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar16);
    java.lang.String str20 = net.ajaskey.market.misc.Utils.getString(calendar16);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.getString(calendar16);
    net.ajaskey.market.ta.DailyData dailyData22 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar16);
    net.ajaskey.market.ta.TrendType trendType23 = tickerData0.getSma260Trend();
    double d24 = tickerData0.getChg65();
    double d25 = tickerData0.getLr260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "30-Jan-0001"+ "'", str17.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Fri 30-Jan-0001"+ "'", str18.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test158"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808651415,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=585,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setMarketCap("");
    industryData0.setRawRs((double)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test159"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getChg65();
    double d6 = derivedData0.getRsi14();
    double d7 = derivedData0.getLrAngle260();
    java.lang.Double d8 = derivedData0.getSmaPerc65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test160"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    industryData0.setShares((long)(byte)10);
    java.lang.String str5 = industryData0.getName();
    industryData0.setChg260((double)'4');
    java.lang.String str8 = industryData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test161"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    double d16 = tickerData0.getAtr23();
    double d17 = tickerData0.getMfi14();
    double d18 = tickerData0.getRsRaw();
    double d19 = tickerData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test162"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)10L, (double)693934L, 0.0d, (double)(short)100, 100.0d, (double)(byte)1);
    java.lang.Double d87 = dailyData86.getOpen();
    java.lang.Double d88 = dailyData86.getClose();
    long long89 = dailyData86.getDaysSinceBase();
    dailyData86.setVolume(97.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808600093,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=907,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808600093,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=907,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808600078,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=922,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808600078,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=922,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808600078,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=922,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808600078,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=39,MILLISECOND=922,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d87 + "' != '" + 10.0d+ "'", d87.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d88 + "' != '" + 100.0d+ "'", d88.equals(100.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 693934L);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test163"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)' ', (int)(short)10, (int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test164"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    double d14 = tickerData13.getAvgVol20();
    java.lang.String str15 = tickerData13.getTicker();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "HI!"+ "'", str15.equals("HI!"));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test165"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar12);
    net.ajaskey.market.ta.TickerData tickerData15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData15, calendar21);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar21);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData();
    double[] d_array28 = tickerData27.getVolumeData();
    double d29 = tickerData27.getChg65();
    double[] d_array30 = tickerData27.getOiData();
    double d31 = tickerData27.getMfi65();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar35);
    net.ajaskey.market.ta.TickerData tickerData38 = null;
    net.ajaskey.market.ta.TickerData tickerData39 = new net.ajaskey.market.ta.TickerData();
    double[] d_array40 = tickerData39.getTrueLowData();
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    net.ajaskey.market.ta.DailyData dailyData47 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData39, calendar44);
    int i48 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData38, calendar44);
    boolean b49 = net.ajaskey.market.misc.Utils.sameYear(calendar35, calendar44);
    java.util.Calendar calendar53 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str54 = net.ajaskey.market.misc.Utils.stringDate(calendar53);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar53);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData27, calendar44, calendar53);
    net.ajaskey.market.ta.TickerData tickerData57 = new net.ajaskey.market.ta.TickerData();
    double[] d_array58 = tickerData57.getVolumeData();
    double d59 = tickerData57.getChg65();
    double[] d_array60 = tickerData57.getOiData();
    double d61 = tickerData57.getMfi65();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar65);
    net.ajaskey.market.ta.TickerData tickerData68 = null;
    net.ajaskey.market.ta.TickerData tickerData69 = new net.ajaskey.market.ta.TickerData();
    double[] d_array70 = tickerData69.getTrueLowData();
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    net.ajaskey.market.ta.DailyData dailyData77 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData69, calendar74);
    int i78 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData68, calendar74);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar65, calendar74);
    java.util.Calendar calendar83 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str84 = net.ajaskey.market.misc.Utils.stringDate(calendar83);
    java.lang.String str85 = net.ajaskey.market.misc.Utils.stringDate2(calendar83);
    int i86 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData57, calendar74, calendar83);
    boolean b87 = net.ajaskey.market.misc.Utils.sameMonth(calendar44, calendar74);
    boolean b88 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar74);
    int i89 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar74);
    net.ajaskey.market.ta.DailyData dailyData93 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, 0, 0, (int)'4');
    double d94 = tickerData0.getPriceInRng260();
    java.lang.Double d95 = tickerData0.getSma260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808599969,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=31,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808599969,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=31,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "java.util.GregorianCalendar[time=-62164808599969,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=31,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str37.equals("java.util.GregorianCalendar[time=-62164808599969,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=31,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "30-Jan-0001"+ "'", str54.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d59 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d61 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "java.util.GregorianCalendar[time=-62164808599969,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=31,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str67.equals("java.util.GregorianCalendar[time=-62164808599969,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=31,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "30-Jan-0001"+ "'", str84.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Fri 30-Jan-0001"+ "'", str85.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d94 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d95);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test166"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    java.util.Calendar calendar10 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate(calendar10);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate2(calendar10);
    net.ajaskey.market.ta.TickerData tickerData19 = new net.ajaskey.market.ta.TickerData("hi!", calendar10, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.makeCopy(calendar10);
    boolean b21 = net.ajaskey.market.misc.Utils.sameDate(calendar3, calendar20);
    net.ajaskey.market.ta.DailyData dailyData28 = new net.ajaskey.market.ta.DailyData(calendar3, 0.0d, (double)10, (double)' ', (double)'#', (double)0L, (double)'a');
    java.lang.Double d29 = dailyData28.getOpen();
    java.lang.Double d30 = dailyData28.getOpen();
    double d31 = dailyData28.getTrueLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808599875,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=125,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808599875,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=125,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Fri 30-Jan-0001"+ "'", str12.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d29 + "' != '" + 0.0d+ "'", d29.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d30 + "' != '" + 0.0d+ "'", d30.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test167"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.util.Calendar calendar14 = dailyData11.getDate();
    dailyData11.setTrueHigh((-1.0d));
    dailyData11.setVolume((double)(byte)100);
    dailyData11.setTrueHigh((double)(short)10);
    dailyData11.setTrueHigh((double)'4');
    double d23 = dailyData11.getTrueHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 52.0d);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test168"); }


    net.ajaskey.market.ta.input.ParseData.setValidTicker("java.util.GregorianCalendar[time=-62164808608417,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=31,MILLISECOND=583,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test169"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)100, (int)(short)(-1), (int)(short)1);
    java.lang.Double d8 = tickerData0.getSmaPerc23();
    double d9 = tickerData0.getPriceOffHigh260();
    double[] d_array10 = tickerData0.getTrueHighData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test170"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    tickerData0.rSort();
    double d4 = tickerData0.getLrSlope260();
    double d5 = tickerData0.getChg130();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test171"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getChg260();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    double[] d_array10 = tickerData0.getTypicalPriceData();
    double d11 = tickerData0.getDiMinus();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808630549,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=9,MILLISECOND=451,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test172"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    net.ajaskey.market.ta.DailyData dailyData13 = new net.ajaskey.market.ta.DailyData(calendar5, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    tickerData0.addData(dailyData13);
    tickerData0.setTicker("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    java.lang.Double d17 = tickerData0.getSmaPerc65();
    net.ajaskey.market.ta.methods.TaMethods taMethods18 = tickerData0.getTaMethods();
    java.util.Calendar calendar19 = null;
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData21 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar19, 1);
    double d22 = tickerData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test173"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData("hi!", calendar20, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    double[] d_array31 = tickerData0.getOiData();
    java.lang.Double d32 = tickerData0.getSma130();
    java.lang.Double d33 = tickerData0.getSma130();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)(short)10, false);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d33);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test174"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getDiPlus();
    double d4 = derivedData0.getLrInt260();
    double d5 = derivedData0.getCurrentPrice();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    java.lang.Double d7 = derivedData0.getSmaPerc65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test175"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getLrInt260();
    double d7 = derivedData0.getPriceOffHigh260();
    double d8 = derivedData0.getMfi23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test176"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    tickerData0.fillDataArrays((int)' ', false);
    double d11 = tickerData0.getPriceOffHigh260();
    java.util.Calendar[] calendar_array12 = tickerData0.getDateData();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)'#', true);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array12);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test177"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    double d3 = tickerData0.getDiMinus();
    net.ajaskey.market.ta.TickerData tickerData4 = new net.ajaskey.market.ta.TickerData();
    double[] d_array5 = tickerData4.getVolumeData();
    double d6 = tickerData4.getChg65();
    double[] d_array7 = tickerData4.getOiData();
    double d8 = tickerData4.getMfi65();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar12);
    net.ajaskey.market.ta.TickerData tickerData15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData15, calendar21);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar21);
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate(calendar30);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate2(calendar30);
    int i33 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData4, calendar21, calendar30);
    java.util.Calendar calendar37 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate(calendar37);
    net.ajaskey.market.ta.DailyData dailyData45 = new net.ajaskey.market.ta.DailyData(calendar37, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar49 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b50 = net.ajaskey.market.misc.Utils.sameYear(calendar37, calendar49);
    long long51 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar30, calendar49);
    java.util.Calendar calendar55 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar49, calendar55);
    double d57 = tickerData0.getLrInt260();
    java.lang.String str58 = tickerData0.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808599844,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=156,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808599844,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=156,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "30-Jan-0001"+ "'", str31.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Fri 30-Jan-0001"+ "'", str32.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "30-Jan-0001"+ "'", str38.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long51 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str58);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test178"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, 10);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, 10);
    net.ajaskey.market.ta.TickerData tickerData11 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData9, "java.util.GregorianCalendar[time=-62164808649918,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=82,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    net.ajaskey.market.ta.TickerData tickerData13 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData9, "97");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData13);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test179"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808639007,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=0,MILLISECOND=993,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test180"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData("hi!", calendar20, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    double d31 = tickerData0.getAdx();
    double d32 = tickerData0.getAtrPercent23();
    double d33 = tickerData0.getPriceInRng260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 0.0d);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test181"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d6 = industryData0.getChg260();
    industryData0.setChg260((double)100L);
    industryData0.setShares((long)0);
    industryData0.setRank((int)'4');
    java.lang.String str13 = industryData0.getName();
    double d14 = industryData0.getRawRs();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test182"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    java.lang.String str8 = industryData0.getMarketCap();
    java.util.List<java.lang.Integer> list_i9 = industryData0.getRank();
    industryData0.setExch("java.util.GregorianCalendar[time=-62164861199000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setSlope(0.0d);
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  32.00  35.00     0    97      0.00   3395.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i9);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test183"); }


    java.util.Calendar calendar0 = null;
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.TickerData tickerData14 = new net.ajaskey.market.ta.TickerData("hi!", calendar5, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.makeCopy(calendar5);
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate(calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar19);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    net.ajaskey.market.ta.TickerData tickerData35 = new net.ajaskey.market.ta.TickerData("hi!", calendar26, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.makeCopy(calendar26);
    boolean b37 = net.ajaskey.market.misc.Utils.sameDate(calendar19, calendar36);
    long long38 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar15, calendar36);
    boolean b39 = net.ajaskey.market.misc.Utils.sameDate(calendar0, calendar36);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "java.util.GregorianCalendar[time=-62164808599750,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=250,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str21.equals("java.util.GregorianCalendar[time=-62164808599750,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=250,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long38 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test184"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    java.lang.Double d13 = dailyData11.getHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 10.0d+ "'", d13.equals(10.0d));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test185"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getPriceOffHigh260();
    java.lang.String str4 = tickerData0.getTickerName();
    double d5 = tickerData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test186"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double d11 = tickerData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test187"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    net.ajaskey.market.ta.TickerData tickerData12 = null;
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData();
    double[] d_array14 = tickerData13.getVolumeData();
    double d15 = tickerData13.getChg65();
    int i19 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData13, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType20 = tickerData13.getSma130Trend();
    double d21 = tickerData13.getHigh260();
    java.lang.Double d22 = tickerData13.getSma23();
    net.ajaskey.market.ta.methods.TaMethods taMethods23 = tickerData13.getTaMethods();
    double[] d_array24 = tickerData13.getHighData();
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.getDayName(calendar28);
    net.ajaskey.market.misc.Utils.printCalendar(calendar28);
    java.util.Calendar calendar32 = null;
    boolean b33 = net.ajaskey.market.misc.Utils.sameMonth(calendar28, calendar32);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    net.ajaskey.market.ta.TickerData tickerData47 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar38, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    int i48 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData13, calendar28, calendar38);
    net.ajaskey.market.ta.TickerData tickerData49 = null;
    net.ajaskey.market.ta.TickerData tickerData50 = null;
    java.util.Calendar calendar54 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate(calendar54);
    net.ajaskey.market.ta.DailyData dailyData62 = new net.ajaskey.market.ta.DailyData(calendar54, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    net.ajaskey.market.ta.DailyData dailyData63 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData50, calendar54);
    java.util.Calendar calendar67 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str68 = net.ajaskey.market.misc.Utils.stringDate(calendar67);
    net.ajaskey.market.ta.DailyData dailyData75 = new net.ajaskey.market.ta.DailyData(calendar67, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar76 = dailyData75.getDate();
    boolean b77 = net.ajaskey.market.misc.Utils.sameMonth(calendar54, calendar76);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData79 = net.ajaskey.market.ta.TickerData.getSlice(tickerData49, calendar54, (int)(short)(-1));
    java.lang.String str80 = net.ajaskey.market.misc.Utils.getDayName(calendar54);
    int i81 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar38, calendar54);
    boolean b82 = net.ajaskey.market.misc.Utils.sameDate(calendar3, calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "unknown-day"+ "'", str30.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "30-Jan-0001"+ "'", str55.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "30-Jan-0001"+ "'", str68.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "unknown-day"+ "'", str80.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test188"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double[] d_array14 = tickerData13.getTypicalPriceData();
    double d15 = tickerData13.getLow260();
    tickerData13.generateDerived(false);
    double d18 = tickerData13.getPriceInRng260();
    java.lang.String str19 = tickerData13.getTickerName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test189"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getMfi14();
    double[] d_array11 = tickerData0.getTrueLowData();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma23Trend();
    double[] d_array13 = tickerData0.getHighData();
    double d14 = tickerData0.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test190"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.Double d9 = tickerData0.getSmaPerc260();
    double d10 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    double d21 = tickerData12.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType22 = tickerData12.getSma130Trend();
    double[] d_array23 = tickerData12.getVolumeData();
    int i27 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData12, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar32 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate(calendar32);
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate2(calendar32);
    net.ajaskey.market.ta.TickerData tickerData41 = new net.ajaskey.market.ta.TickerData("hi!", calendar32, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData42 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar32);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    net.ajaskey.market.ta.DailyData dailyData54 = new net.ajaskey.market.ta.DailyData(calendar46, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    long long56 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar32, calendar46);
    net.ajaskey.market.ta.TickerData tickerData63 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar32, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    net.ajaskey.market.ta.DailyData dailyData64 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar32);
    double d65 = tickerData0.getLr260();
    int i66 = tickerData0.getDataCount();
    double[] d_array67 = tickerData0.getOiData();
    int i68 = tickerData0.getDataCount();
    java.lang.Double d69 = tickerData0.getSmaPerc65();
    tickerData0.rSort();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "30-Jan-0001"+ "'", str33.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Fri 30-Jan-0001"+ "'", str34.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d65 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d69);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test191"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setName("100");
    double d3 = industryData0.getPriceInRange260();
    java.lang.String str4 = industryData0.getRanks();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808622346,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=17,MILLISECOND=654,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test192"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData11);
    double d14 = tickerData0.getLr260();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808645097,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=903,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d17 = tickerData0.getAtrPercent23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test193"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double d9 = tickerData0.getDiPlus();
    double[] d_array10 = tickerData0.getOpenData();
    double[] d_array11 = tickerData0.getTrueHighData();
    double[] d_array12 = tickerData0.getTypicalPriceData();
    double d13 = tickerData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test194"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    double d6 = derivedData0.getAtr23();
    java.lang.Double d7 = derivedData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test195"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType9 = tickerData0.getSma130Trend();
    double d10 = tickerData0.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test196"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    net.ajaskey.market.ta.methods.TaMethods taMethods9 = tickerData0.getTaMethods();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getVolumeData();
    double d13 = tickerData11.getChg65();
    double[] d_array14 = tickerData11.getOiData();
    double d15 = tickerData11.getMfi65();
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate(calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar19);
    net.ajaskey.market.ta.TickerData tickerData22 = null;
    net.ajaskey.market.ta.TickerData tickerData23 = new net.ajaskey.market.ta.TickerData();
    double[] d_array24 = tickerData23.getTrueLowData();
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate2(calendar28);
    net.ajaskey.market.ta.DailyData dailyData31 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData23, calendar28);
    int i32 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData22, calendar28);
    boolean b33 = net.ajaskey.market.misc.Utils.sameYear(calendar19, calendar28);
    java.util.Calendar calendar37 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate(calendar37);
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate2(calendar37);
    int i40 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData11, calendar28, calendar37);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    net.ajaskey.market.ta.DailyData dailyData52 = new net.ajaskey.market.ta.DailyData(calendar44, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b57 = net.ajaskey.market.misc.Utils.sameYear(calendar44, calendar56);
    long long58 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar37, calendar56);
    java.util.Calendar calendar62 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar66 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate(calendar66);
    java.lang.String str68 = net.ajaskey.market.misc.Utils.stringDate2(calendar66);
    boolean b69 = net.ajaskey.market.misc.Utils.sameYear(calendar62, calendar66);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar37, calendar62);
    java.util.Calendar calendar71 = net.ajaskey.market.misc.Utils.makeCopy(calendar62);
    net.ajaskey.market.ta.DailyData dailyData78 = new net.ajaskey.market.ta.DailyData(calendar71, (double)1.0f, (double)693934L, (double)(-1), 0.0d, (double)(byte)100, (double)(short)100);
    tickerData0.addData(dailyData78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "java.util.GregorianCalendar[time=-62164808599610,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=390,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str21.equals("java.util.GregorianCalendar[time=-62164808599610,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=390,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Fri 30-Jan-0001"+ "'", str30.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "30-Jan-0001"+ "'", str38.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Fri 30-Jan-0001"+ "'", str39.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long58 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "30-Jan-0001"+ "'", str67.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Fri 30-Jan-0001"+ "'", str68.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar71);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test197"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double d13 = tickerData0.getPriceOffLow260();
    java.lang.String str14 = tickerData0.toString();
    int i18 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, 100, (int)' ', (int)'#');
    net.ajaskey.market.ta.TickerData tickerData19 = new net.ajaskey.market.ta.TickerData();
    double[] d_array20 = tickerData19.getVolumeData();
    double d21 = tickerData19.getChg65();
    double[] d_array22 = tickerData19.getOiData();
    double d23 = tickerData19.getMfi65();
    java.util.Calendar calendar27 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate(calendar27);
    java.lang.String str29 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar27);
    net.ajaskey.market.ta.TickerData tickerData30 = null;
    net.ajaskey.market.ta.TickerData tickerData31 = new net.ajaskey.market.ta.TickerData();
    double[] d_array32 = tickerData31.getTrueLowData();
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate(calendar36);
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate2(calendar36);
    net.ajaskey.market.ta.DailyData dailyData39 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData31, calendar36);
    int i40 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData30, calendar36);
    boolean b41 = net.ajaskey.market.misc.Utils.sameYear(calendar27, calendar36);
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate(calendar45);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate2(calendar45);
    int i48 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData19, calendar36, calendar45);
    net.ajaskey.market.ta.TickerData tickerData49 = new net.ajaskey.market.ta.TickerData();
    double[] d_array50 = tickerData49.getVolumeData();
    double d51 = tickerData49.getChg65();
    double[] d_array52 = tickerData49.getOiData();
    double d53 = tickerData49.getMfi65();
    java.util.Calendar calendar57 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate(calendar57);
    java.lang.String str59 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar57);
    net.ajaskey.market.ta.TickerData tickerData60 = null;
    net.ajaskey.market.ta.TickerData tickerData61 = new net.ajaskey.market.ta.TickerData();
    double[] d_array62 = tickerData61.getTrueLowData();
    java.util.Calendar calendar66 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate(calendar66);
    java.lang.String str68 = net.ajaskey.market.misc.Utils.stringDate2(calendar66);
    net.ajaskey.market.ta.DailyData dailyData69 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData61, calendar66);
    int i70 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData60, calendar66);
    boolean b71 = net.ajaskey.market.misc.Utils.sameYear(calendar57, calendar66);
    java.util.Calendar calendar75 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate(calendar75);
    java.lang.String str77 = net.ajaskey.market.misc.Utils.stringDate2(calendar75);
    int i78 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData49, calendar66, calendar75);
    boolean b79 = net.ajaskey.market.misc.Utils.sameMonth(calendar36, calendar66);
    java.lang.String str80 = net.ajaskey.market.misc.Utils.getDayName(calendar36);
    net.ajaskey.market.ta.DailyData dailyData87 = new net.ajaskey.market.ta.DailyData(calendar36, (double)(byte)100, (double)0L, 52.0d, 1.0d, (double)(short)1, (double)'a');
    tickerData0.addData(dailyData87);
    double d89 = dailyData87.getTrueHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "null\tnull\tnull\r\n"+ "'", str14.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "30-Jan-0001"+ "'", str28.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "java.util.GregorianCalendar[time=-62164808599501,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=499,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str29.equals("java.util.GregorianCalendar[time=-62164808599501,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=499,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "30-Jan-0001"+ "'", str37.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Fri 30-Jan-0001"+ "'", str38.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "30-Jan-0001"+ "'", str46.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Fri 30-Jan-0001"+ "'", str47.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d51 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d53 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "30-Jan-0001"+ "'", str58.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "java.util.GregorianCalendar[time=-62164808599501,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=499,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str59.equals("java.util.GregorianCalendar[time=-62164808599501,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=499,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "30-Jan-0001"+ "'", str67.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Fri 30-Jan-0001"+ "'", str68.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "30-Jan-0001"+ "'", str76.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Fri 30-Jan-0001"+ "'", str77.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "unknown-day"+ "'", str80.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d89 == 0.0d);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test198"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    java.lang.String str2 = industryData0.getSector();
    java.lang.String str3 = industryData0.getSector();
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808614560,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=25,MILLISECOND=440,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test199"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getAvgVol65();
    java.lang.Double d8 = derivedData0.getSmaPerc260();
    double d9 = derivedData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test200"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData8 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData10 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, 100);
    net.ajaskey.market.ta.TickerData tickerData12 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData10, "java.util.GregorianCalendar[time=-62164808649918,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=82,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData12);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test201"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    double d7 = tickerData0.getLr260();
    double[] d_array8 = tickerData0.getTrueHighData();
    tickerData0.fillDataArrays(1, false);
    double d12 = tickerData0.getAdx();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived((int)(short)100, false);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test202"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData1 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808627650,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=12,MILLISECOND=350,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test203"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getDiMinus();
    net.ajaskey.market.ta.TickerData tickerData7 = null;
    derivedData0.build(tickerData7);
    double d9 = derivedData0.getLr260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test204"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    industryData0.setSector("08-May-0035");
    industryData0.setRank((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test205"); }


    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData0 = null;
    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData0, "Fri 30-Jan-0001");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test206"); }


    net.ajaskey.market.ta.TickerData tickerData1 = new net.ajaskey.market.ta.TickerData();
    double[] d_array2 = tickerData1.getTrueLowData();
    java.util.Calendar calendar6 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate(calendar6);
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate2(calendar6);
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar6);
    double d10 = tickerData1.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType11 = tickerData1.getSma130Trend();
    double[] d_array12 = tickerData1.getVolumeData();
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData1, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData("hi!", calendar21, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData31 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar21);
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    net.ajaskey.market.ta.DailyData dailyData43 = new net.ajaskey.market.ta.DailyData(calendar35, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str44 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    long long45 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar21, calendar35);
    net.ajaskey.market.ta.TickerData tickerData52 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar21, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    tickerData52.fillDataArrays(0, false);
    java.lang.String str56 = tickerData52.getTicker();
    double d57 = tickerData52.getPriceOffHigh260();
    double[] d_array58 = tickerData52.getCloseData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "30-Jan-0001"+ "'", str7.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Fri 30-Jan-0001"+ "'", str8.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Fri 30-Jan-0001"+ "'", str44.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "JAVA.UTIL.GREGORIANCALENDAR[TIME=-62164808650214,AREFIELDSSET=TRUE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"AMERICA/DENVER\",OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,TRANSITIONS=157,LASTRULE=JAVA.UTIL.SIMPLETIMEZONE[ID=AMERICA/DENVER,OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,STARTYEAR=0,STARTMODE=3,STARTMONTH=2,STARTDAY=8,STARTDAYOFWEEK=1,STARTTIME=7200000,STARTTIMEMODE=0,ENDMODE=3,ENDMONTH=10,ENDDAY=1,ENDDAYOFWEEK=1,ENDTIME=7200000,ENDTIMEMODE=0]],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  YEAR         : 1\n  MONTH        : 0\n  DAY OF MONTH : 30\n  DAY OF YEAR  : 30\n  WEEK OF YEAR : 5"+ "'", str56.equals("JAVA.UTIL.GREGORIANCALENDAR[TIME=-62164808650214,AREFIELDSSET=TRUE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"AMERICA/DENVER\",OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,TRANSITIONS=157,LASTRULE=JAVA.UTIL.SIMPLETIMEZONE[ID=AMERICA/DENVER,OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,STARTYEAR=0,STARTMODE=3,STARTMONTH=2,STARTDAY=8,STARTDAYOFWEEK=1,STARTTIME=7200000,STARTTIMEMODE=0,ENDMODE=3,ENDMONTH=10,ENDDAY=1,ENDDAYOFWEEK=1,ENDTIME=7200000,ENDTIMEMODE=0]],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  YEAR         : 1\n  MONTH        : 0\n  DAY OF MONTH : 30\n  DAY OF YEAR  : 30\n  WEEK OF YEAR : 5"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(d_array58);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test207"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getTrueLow();
    double d14 = dailyData11.getDailyRng();
    java.lang.Double d15 = dailyData11.getOpen();
    long long16 = dailyData11.getDaysSinceBase();
    double d17 = dailyData11.getDailyChg();
    double d18 = dailyData11.getTrueLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test208"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    java.lang.String str13 = tickerData0.toString();
    double d14 = tickerData0.getMfi23();
    double d15 = tickerData0.getCurrentPrice();
    double d16 = tickerData0.getDiMinus();
    java.util.Calendar[] calendar_array17 = tickerData0.getDateData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null\tnull\tnull\r\n"+ "'", str13.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array17);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test209"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    java.util.Calendar calendar10 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate(calendar10);
    net.ajaskey.market.ta.DailyData dailyData18 = new net.ajaskey.market.ta.DailyData(calendar10, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d19 = dailyData18.getClose();
    double d20 = dailyData18.getDailyPercentChg();
    java.util.Calendar calendar21 = dailyData18.getDate();
    java.lang.String str22 = net.ajaskey.market.misc.Utils.getDayName(calendar21);
    int i23 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar21);
    double d24 = tickerData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d19 + "' != '" + 1.0d+ "'", d19.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "unknown-day"+ "'", str22.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test210"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 10, (int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test211"); }


    net.ajaskey.market.ta.TickerData tickerData1 = new net.ajaskey.market.ta.TickerData();
    double[] d_array2 = tickerData1.getTrueLowData();
    java.util.Calendar calendar6 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate(calendar6);
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate2(calendar6);
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar6);
    double d10 = tickerData1.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType11 = tickerData1.getSma130Trend();
    double[] d_array12 = tickerData1.getVolumeData();
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData1, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData("hi!", calendar21, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData31 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar21);
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    net.ajaskey.market.ta.DailyData dailyData43 = new net.ajaskey.market.ta.DailyData(calendar35, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str44 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    long long45 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar21, calendar35);
    net.ajaskey.market.ta.TickerData tickerData52 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar21, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    tickerData52.generateDerived((int)(byte)0, true);
    double d56 = tickerData52.getRsi14();
    double d57 = tickerData52.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "30-Jan-0001"+ "'", str7.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Fri 30-Jan-0001"+ "'", str8.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Fri 30-Jan-0001"+ "'", str44.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d56 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d57 == 0.0d);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test212"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    java.lang.String str28 = net.ajaskey.market.misc.Utils.getDayName(calendar21);
    net.ajaskey.market.ta.DailyData dailyData35 = new net.ajaskey.market.ta.DailyData(calendar21, (double)10.0f, (double)10L, (double)(byte)1, (double)(short)(-1), (double)(byte)(-1), (double)(-1));
    java.lang.Double d36 = dailyData35.getHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "unknown-day"+ "'", str28.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d36 + "' != '" + 10.0d+ "'", d36.equals(10.0d));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test213"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData11);
    double d14 = tickerData11.getRsi14();
    double d15 = tickerData11.getCurrentPrice();
    double d16 = tickerData11.getPriceOffHigh260();
    tickerData11.fillDataArrays((int)(byte)100, false);
    net.ajaskey.market.ta.DailyData dailyData23 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData11, (int)(byte)10, 0, (int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData23);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test214"); }


    boolean b1 = net.ajaskey.market.ta.input.ParseData.isTickerValid("java.util.GregorianCalendar[time=-62164808607606,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=32,MILLISECOND=394,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test215"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    net.ajaskey.market.ta.TrendType trendType3 = tickerData0.getSma23Trend();
    java.lang.Double d4 = tickerData0.getSma65();
    tickerData0.setTickerExchange("unknown-month");
    java.lang.Double d7 = tickerData0.getSma23();
    java.lang.Double d8 = tickerData0.getSma260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test216"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    net.ajaskey.market.ta.DailyData dailyData22 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(byte)(-1), 0, (int)' ');
    java.lang.String str23 = tickerData0.getTicker();
    double d24 = tickerData0.getChg260();
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate(calendar28);
    net.ajaskey.market.ta.DailyData dailyData36 = new net.ajaskey.market.ta.DailyData(calendar28, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d37 = dailyData36.getClose();
    double d38 = dailyData36.getDailyPercentChg();
    double d39 = dailyData36.getDailyPercentRng();
    dailyData36.setTrueHigh((double)(short)(-1));
    dailyData36.setDailyChg(100.0d);
    java.lang.Double d44 = dailyData36.getVolume();
    dailyData36.setTrueHigh((double)(byte)(-1));
    double d47 = dailyData36.getDailyRng();
    tickerData0.addData(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "30-Jan-0001"+ "'", str29.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d37 + "' != '" + 1.0d+ "'", d37.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d38 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d39 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d44 + "' != '" + 0.0d+ "'", d44.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d47 == 10.0d);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test217"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)(byte)(-1));
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData11 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData11);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test218"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getChg130();
    double d5 = derivedData0.getPriceInRng260();
    double d6 = derivedData0.getRsStRaw();
    double d7 = derivedData0.getMfi130();
    double d8 = derivedData0.getLrSlope260();
    double d9 = derivedData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test219"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    java.lang.String str13 = tickerData0.toString();
    double d14 = tickerData0.getMfi23();
    double d15 = tickerData0.getChg65();
    net.ajaskey.market.ta.TickerData tickerData16 = null;
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    java.util.Calendar calendar27 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate(calendar27);
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate2(calendar27);
    net.ajaskey.market.ta.TickerData tickerData36 = new net.ajaskey.market.ta.TickerData("hi!", calendar27, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar37 = net.ajaskey.market.misc.Utils.makeCopy(calendar27);
    boolean b38 = net.ajaskey.market.misc.Utils.sameDate(calendar20, calendar37);
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar43 = net.ajaskey.market.misc.Utils.makeCopy(calendar42);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.makeCopy(calendar42);
    int i45 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData16, calendar37, calendar44);
    net.ajaskey.market.ta.DailyData dailyData46 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar37);
    java.lang.Double d47 = tickerData0.getSma23();
    double d48 = tickerData0.getChg23();
    double d49 = tickerData0.getPriceOffHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null\tnull\tnull\r\n"+ "'", str13.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808599251,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=749,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808599251,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=749,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "30-Jan-0001"+ "'", str28.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Fri 30-Jan-0001"+ "'", str29.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d48 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d49 == 0.0d);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test220"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    double[] d_array5 = tickerData0.getTrueHighData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test221"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    double[] d_array5 = tickerData0.getTrueLowData();
    double d6 = tickerData0.getHigh260();
    double d7 = tickerData0.getAdx();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.makeCopy(calendar11);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar11);
    double d14 = tickerData0.getLow260();
    net.ajaskey.market.ta.TrendType trendType15 = tickerData0.getSma23Trend();
    double d16 = tickerData0.getChg65();
    double d17 = tickerData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test222"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)(-1), 100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma23Trend();
    java.lang.Double d8 = tickerData0.getSma260();
    double d9 = tickerData0.getLrAngle260();
    double d10 = tickerData0.getAdx();
    double[] d_array11 = tickerData0.getOpenData();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.getDayName(calendar15);
    net.ajaskey.market.misc.Utils.printCalendar(calendar15);
    java.util.Calendar calendar19 = null;
    boolean b20 = net.ajaskey.market.misc.Utils.sameMonth(calendar15, calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate2(calendar15);
    net.ajaskey.market.ta.DailyData dailyData22 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar15);
    java.util.Calendar calendar23 = net.ajaskey.market.misc.Utils.makeCopy(calendar15);
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getVolumeData();
    double d26 = tickerData24.getChg65();
    int i30 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData24, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType31 = tickerData24.getSma130Trend();
    java.lang.Double d32 = tickerData24.getSma130();
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData();
    double[] d_array34 = tickerData33.getVolumeData();
    double d35 = tickerData33.getChg65();
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData33, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d40 = tickerData33.getLow260();
    double d41 = tickerData33.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData24, tickerData33);
    net.ajaskey.market.ta.DailyData dailyData46 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData24, (int)(byte)(-1), 0, (int)' ');
    java.lang.String str47 = tickerData24.getTicker();
    java.util.Calendar calendar52 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str53 = net.ajaskey.market.misc.Utils.stringDate(calendar52);
    java.lang.String str54 = net.ajaskey.market.misc.Utils.stringDate2(calendar52);
    net.ajaskey.market.ta.TickerData tickerData61 = new net.ajaskey.market.ta.TickerData("hi!", calendar52, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str62 = tickerData61.getTickerExchange();
    java.util.Calendar calendar63 = null;
    net.ajaskey.market.ta.TickerData tickerData64 = new net.ajaskey.market.ta.TickerData();
    double[] d_array65 = tickerData64.getTrueLowData();
    java.util.Calendar calendar69 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str70 = net.ajaskey.market.misc.Utils.stringDate(calendar69);
    java.lang.String str71 = net.ajaskey.market.misc.Utils.stringDate2(calendar69);
    net.ajaskey.market.ta.DailyData dailyData72 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData64, calendar69);
    boolean b73 = net.ajaskey.market.misc.Utils.sameYear(calendar63, calendar69);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData75 = net.ajaskey.market.ta.TickerData.getSlice(tickerData61, calendar69, (int)(byte)(-1));
    java.util.Calendar calendar79 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str80 = net.ajaskey.market.misc.Utils.stringDate(calendar79);
    net.ajaskey.market.ta.DailyData dailyData87 = new net.ajaskey.market.ta.DailyData(calendar79, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar91 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b92 = net.ajaskey.market.misc.Utils.sameYear(calendar79, calendar91);
    boolean b93 = net.ajaskey.market.misc.Utils.sameYear(calendar69, calendar91);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData95 = net.ajaskey.market.ta.TickerData.getSlice(tickerData24, calendar69, (-1));
    java.lang.String str96 = net.ajaskey.market.misc.Utils.stringDate(calendar69);
    long long97 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar23, calendar69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "unknown-day"+ "'", str17.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Fri 30-Jan-0001"+ "'", str21.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d35 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d40 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d41 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "30-Jan-0001"+ "'", str53.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Fri 30-Jan-0001"+ "'", str54.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Unknown"+ "'", str62.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "30-Jan-0001"+ "'", str70.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Fri 30-Jan-0001"+ "'", str71.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "30-Jan-0001"+ "'", str80.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "30-Jan-0001"+ "'", str96.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long97 == 0L);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test223"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)1, (double)(short)1, (double)(short)1, (-1.0d), (double)'4', (double)(byte)10);
    net.ajaskey.market.ta.DailyData dailyData93 = new net.ajaskey.market.ta.DailyData(calendar3, (double)1, (double)'a', (double)'a', (double)(short)0, 0.0d, (double)10L);
    java.lang.String str94 = dailyData93.toString();
    java.lang.Double d95 = dailyData93.getClose();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808599142,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=858,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808599142,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=858,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808599142,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=858,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808599142,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=858,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808599142,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=858,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808599142,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=40,MILLISECOND=858,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Fri 30-Jan-0001  1.00  97.00  97.00  0.00     0    10      0.00      0.00"+ "'", str94.equals("Fri 30-Jan-0001  1.00  97.00  97.00  0.00     0    10      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d95 + "' != '" + 0.0d+ "'", d95.equals(0.0d));

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test224"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    java.lang.Double d13 = dailyData11.getOi();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 0.0d+ "'", d13.equals(0.0d));

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test225"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)100, (int)(short)(-1), (int)(short)1);
    java.lang.Double d8 = tickerData0.getSmaPerc23();
    double d9 = tickerData0.getPriceOffHigh260();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    java.util.Calendar calendar11 = null;
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.makeCopy(calendar11);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData();
    double[] d_array14 = tickerData13.getVolumeData();
    double d15 = tickerData13.getChg65();
    tickerData13.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType18 = tickerData13.getSma65Trend();
    double[] d_array19 = tickerData13.getTypicalPriceData();
    tickerData13.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.Double d22 = tickerData13.getSmaPerc260();
    double d23 = tickerData13.getAvgVol20();
    net.ajaskey.market.ta.TickerData tickerData25 = new net.ajaskey.market.ta.TickerData();
    double[] d_array26 = tickerData25.getTrueLowData();
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate(calendar30);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate2(calendar30);
    net.ajaskey.market.ta.DailyData dailyData33 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData25, calendar30);
    double d34 = tickerData25.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType35 = tickerData25.getSma130Trend();
    double[] d_array36 = tickerData25.getVolumeData();
    int i40 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData25, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate(calendar45);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate2(calendar45);
    net.ajaskey.market.ta.TickerData tickerData54 = new net.ajaskey.market.ta.TickerData("hi!", calendar45, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData55 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData25, calendar45);
    java.util.Calendar calendar59 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str60 = net.ajaskey.market.misc.Utils.stringDate(calendar59);
    net.ajaskey.market.ta.DailyData dailyData67 = new net.ajaskey.market.ta.DailyData(calendar59, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str68 = net.ajaskey.market.misc.Utils.stringDate2(calendar59);
    long long69 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar45, calendar59);
    net.ajaskey.market.ta.TickerData tickerData76 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar45, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    net.ajaskey.market.ta.DailyData dailyData77 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData13, calendar45);
    boolean b78 = net.ajaskey.market.misc.Utils.sameYear(calendar11, calendar45);
    int i79 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "30-Jan-0001"+ "'", str31.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Fri 30-Jan-0001"+ "'", str32.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "30-Jan-0001"+ "'", str46.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Fri 30-Jan-0001"+ "'", str47.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "30-Jan-0001"+ "'", str60.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Fri 30-Jan-0001"+ "'", str68.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long69 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == (-1));

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test226"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    java.lang.Double d8 = tickerData0.getSma260();
    java.lang.Double d9 = tickerData0.getSmaPerc65();
    java.lang.Double d10 = tickerData0.getSmaPerc65();
    java.lang.Double d11 = tickerData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d11);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test227"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)100, (int)(short)(-1), (int)(short)1);
    double d8 = tickerData0.getChg23();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, false);
    double d11 = tickerData0.getCurrentPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test228"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getAdx();
    double d11 = tickerData0.getChg();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma260Trend();
    java.util.Calendar calendar13 = null;
    net.ajaskey.market.ta.DailyData dailyData14 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar13);
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData14);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test229"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)1, (double)(short)1, (double)(short)1, (-1.0d), (double)'4', (double)(byte)10);
    dailyData86.setTrueLow((double)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808598955,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=45,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808598955,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=45,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808598955,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=45,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808598955,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=45,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808598955,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=45,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808598955,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=45,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test230"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double d6 = tickerData0.getDiMinus();
    tickerData0.setTicker("hi!");
    double d9 = tickerData0.getChg260();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getTrueLowData();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.stringDate2(calendar15);
    net.ajaskey.market.ta.DailyData dailyData18 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData10, calendar15);
    double d19 = tickerData10.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType20 = tickerData10.getSma130Trend();
    double[] d_array21 = tickerData10.getVolumeData();
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData10, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate(calendar30);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate2(calendar30);
    net.ajaskey.market.ta.TickerData tickerData39 = new net.ajaskey.market.ta.TickerData("hi!", calendar30, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData40 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData10, calendar30);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    net.ajaskey.market.ta.DailyData dailyData52 = new net.ajaskey.market.ta.DailyData(calendar44, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str53 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    long long54 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar30, calendar44);
    java.util.Calendar calendar58 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar62 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str63 = net.ajaskey.market.misc.Utils.stringDate(calendar62);
    java.lang.String str64 = net.ajaskey.market.misc.Utils.stringDate2(calendar62);
    boolean b65 = net.ajaskey.market.misc.Utils.sameYear(calendar58, calendar62);
    java.lang.String str66 = net.ajaskey.market.misc.Utils.getString(calendar62);
    boolean b67 = net.ajaskey.market.misc.Utils.sameYear(calendar44, calendar62);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar44);
    java.lang.String str69 = net.ajaskey.market.misc.Utils.getDayName(calendar44);
    java.lang.String str70 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    net.ajaskey.market.misc.Utils.printCalendar(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001"+ "'", str17.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "30-Jan-0001"+ "'", str31.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Fri 30-Jan-0001"+ "'", str32.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Fri 30-Jan-0001"+ "'", str53.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "30-Jan-0001"+ "'", str63.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Fri 30-Jan-0001"+ "'", str64.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "unknown-day"+ "'", str69.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "30-Jan-0001"+ "'", str70.equals("30-Jan-0001"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test231"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d6 = industryData0.getChg260();
    industryData0.setChg260((double)100L);
    industryData0.setShares((long)0);
    industryData0.setRank((int)'4');
    java.lang.String str13 = industryData0.getName();
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808625887,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=14,MILLISECOND=113,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test232"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getChg65();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getMfi14();
    double d5 = derivedData0.getChg();
    java.lang.Double d6 = derivedData0.getSmaPerc130();
    java.lang.Double d7 = derivedData0.getSma23();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    int i14 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData8, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType15 = tickerData8.getSma130Trend();
    double d16 = tickerData8.getHigh260();
    java.lang.Double d17 = tickerData8.getSma23();
    net.ajaskey.market.ta.methods.TaMethods taMethods18 = tickerData8.getTaMethods();
    double[] d_array19 = tickerData8.getHighData();
    java.lang.Double d20 = tickerData8.getSmaPerc23();
    double d21 = tickerData8.getRsRaw();
    double d22 = tickerData8.getAvgVol20();
    tickerData8.rSort();
    double d24 = tickerData8.getAtrPercent23();
    double d25 = tickerData8.getPriceInRng260();
    double d26 = tickerData8.getPriceOffHigh260();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData8);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test233"); }


    java.util.Calendar calendar0 = null;
    java.util.Calendar calendar1 = net.ajaskey.market.misc.Utils.makeCopy(calendar0);
    net.ajaskey.market.ta.TickerData tickerData2 = new net.ajaskey.market.ta.TickerData();
    double[] d_array3 = tickerData2.getTrueLowData();
    java.util.Calendar calendar7 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate(calendar7);
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate2(calendar7);
    net.ajaskey.market.ta.DailyData dailyData10 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData2, calendar7);
    double d11 = tickerData2.getAtrPercent23();
    tickerData2.fillDataArrays((int)(short)100, false);
    double[] d_array15 = tickerData2.getTrueHighData();
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate(calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar19);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    net.ajaskey.market.ta.TickerData tickerData35 = new net.ajaskey.market.ta.TickerData("hi!", calendar26, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.makeCopy(calendar26);
    boolean b37 = net.ajaskey.market.misc.Utils.sameDate(calendar19, calendar36);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData2, calendar36);
    boolean b39 = net.ajaskey.market.misc.Utils.sameDate(calendar1, calendar36);
    net.ajaskey.market.ta.DailyData dailyData46 = new net.ajaskey.market.ta.DailyData(calendar1, (double)(-1L), (double)(byte)1, (double)(byte)100, (double)'#', (double)(-1L), (double)1.0f);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.getString(calendar1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "30-Jan-0001"+ "'", str8.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Fri 30-Jan-0001"+ "'", str9.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "java.util.GregorianCalendar[time=-62164808598830,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=170,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str21.equals("java.util.GregorianCalendar[time=-62164808598830,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=170,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "08-Jul-2016"+ "'", str47.equals("08-Jul-2016"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test234"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    industryData0.setShares((long)(byte)10);
    java.lang.String str5 = industryData0.getName();
    industryData0.setChg260((double)'4');
    industryData0.setChg260(52.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test235"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    java.lang.Double d6 = derivedData0.getSma260();
    double d7 = derivedData0.getRsStRaw();
    double d8 = derivedData0.getAvgVol65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test236"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getAtrPercent23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getHigh260();
    double d8 = derivedData0.getMfi65();
    double d9 = derivedData0.getLrInt260();
    double d10 = derivedData0.getAvgVol65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test237"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getPriceOffHigh260();
    double d4 = tickerData0.getAtr23();
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str10 = net.ajaskey.market.misc.Utils.stringDate(calendar9);
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate2(calendar9);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar9, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double[] d_array19 = tickerData18.getTypicalPriceData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "30-Jan-0001"+ "'", str10.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Fri 30-Jan-0001"+ "'", str11.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test238"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    dailyData11.setTrueLow((double)693934L);
    double d17 = dailyData11.getDailyPercentChg();
    double d18 = dailyData11.getDailyRng();
    java.util.Calendar calendar19 = dailyData11.getDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test239"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.methods.TaMethods taMethods8 = tickerData0.getTaMethods();
    double[] d_array9 = tickerData0.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test240"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.util.Calendar calendar14 = dailyData11.getDate();
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.makeCopy(calendar18);
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.makeCopy(calendar18);
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate2(calendar25);
    net.ajaskey.market.ta.TickerData tickerData34 = new net.ajaskey.market.ta.TickerData("hi!", calendar25, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.makeCopy(calendar25);
    long long36 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar20, calendar25);
    long long37 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar14, calendar20);
    java.lang.String str38 = net.ajaskey.market.misc.Utils.getString(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Fri 30-Jan-0001"+ "'", str27.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long37 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "30-Jan-0001"+ "'", str38.equals("30-Jan-0001"));

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test241"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    double d7 = tickerData0.getLr260();
    double[] d_array8 = tickerData0.getTrueHighData();
    tickerData0.fillDataArrays(1, false);
    double[] d_array12 = tickerData0.getLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test242"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar4);
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate(calendar11);
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate2(calendar11);
    net.ajaskey.market.ta.TickerData tickerData20 = new net.ajaskey.market.ta.TickerData("hi!", calendar11, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.makeCopy(calendar11);
    boolean b22 = net.ajaskey.market.misc.Utils.sameDate(calendar4, calendar21);
    net.ajaskey.market.misc.Utils.printCalendar(calendar21);
    java.util.Calendar calendar27 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar31 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate(calendar31);
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate2(calendar31);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar27, calendar31);
    boolean b35 = net.ajaskey.market.misc.Utils.sameMonth(calendar21, calendar31);
    net.ajaskey.market.ta.TickerData tickerData42 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808645581,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=419,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar31, 32.0d, (double)(short)0, (double)(short)100, (double)(short)1, (double)100L, (double)'4');
    double[] d_array43 = tickerData42.getVolumeData();
    double d44 = tickerData42.getLrInt260();
    java.lang.String str45 = tickerData42.getTicker();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "java.util.GregorianCalendar[time=-62164808598689,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=311,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str6.equals("java.util.GregorianCalendar[time=-62164808598689,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=311,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "30-Jan-0001"+ "'", str12.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Fri 30-Jan-0001"+ "'", str13.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "30-Jan-0001"+ "'", str32.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Fri 30-Jan-0001"+ "'", str33.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "JAVA.UTIL.GREGORIANCALENDAR[TIME=-62164808645581,AREFIELDSSET=TRUE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"AMERICA/DENVER\",OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,TRANSITIONS=157,LASTRULE=JAVA.UTIL.SIMPLETIMEZONE[ID=AMERICA/DENVER,OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,STARTYEAR=0,STARTMODE=3,STARTMONTH=2,STARTDAY=8,STARTDAYOFWEEK=1,STARTTIME=7200000,STARTTIMEMODE=0,ENDMODE=3,ENDMONTH=10,ENDDAY=1,ENDDAYOFWEEK=1,ENDTIME=7200000,ENDTIMEMODE=0]],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=419,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  YEAR         : 1\n  MONTH        : 0\n  DAY OF MONTH : 30\n  DAY OF YEAR  : 30\n  WEEK OF YEAR : 5"+ "'", str45.equals("JAVA.UTIL.GREGORIANCALENDAR[TIME=-62164808645581,AREFIELDSSET=TRUE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"AMERICA/DENVER\",OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,TRANSITIONS=157,LASTRULE=JAVA.UTIL.SIMPLETIMEZONE[ID=AMERICA/DENVER,OFFSET=-25200000,DSTSAVINGS=3600000,USEDAYLIGHT=TRUE,STARTYEAR=0,STARTMODE=3,STARTMONTH=2,STARTDAY=8,STARTDAYOFWEEK=1,STARTTIME=7200000,STARTTIMEMODE=0,ENDMODE=3,ENDMONTH=10,ENDDAY=1,ENDDAYOFWEEK=1,ENDTIME=7200000,ENDTIMEMODE=0]],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=419,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  YEAR         : 1\n  MONTH        : 0\n  DAY OF MONTH : 30\n  DAY OF YEAR  : 30\n  WEEK OF YEAR : 5"));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test243"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData("hi!", calendar20, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    double[] d_array31 = tickerData0.getOiData();
    java.lang.Double d32 = tickerData0.getSma130();
    java.lang.Double d33 = tickerData0.getSma130();
    double d34 = tickerData0.getChg23();
    double[] d_array35 = tickerData0.getOiData();
    double[] d_array36 = tickerData0.getTrueLowData();
    double d37 = tickerData0.getRsRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d37 == 0.0d);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test244"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getChg65();
    double d6 = derivedData0.getMfi65();
    double d7 = derivedData0.getMfi14();
    double d8 = derivedData0.getPriceOffHigh260();
    double d9 = derivedData0.getAtr23();
    double d10 = derivedData0.getChg();
    java.lang.Double d11 = derivedData0.getSmaPerc260();
    double d12 = derivedData0.getLr260();
    double d13 = derivedData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d11 + "' != '" + 0.0d+ "'", d11.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test245"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getAtrPercent23();
    double d3 = derivedData0.getMfi65();
    double d4 = derivedData0.getLr260();
    java.lang.Double d5 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test246"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)(-1), 100);
    net.ajaskey.market.ta.methods.TaMethods taMethods7 = tickerData0.getTaMethods();
    double d8 = tickerData0.getAtr23();
    double d9 = tickerData0.getCurrentPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test247"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)100, (int)(short)(-1), (int)(short)1);
    java.lang.Double d8 = tickerData0.getSmaPerc23();
    net.ajaskey.market.ta.methods.TaMethods taMethods9 = tickerData0.getTaMethods();
    double d10 = tickerData0.getAvgVol65();
    java.util.Calendar[] calendar_array11 = tickerData0.getDateData();
    double d12 = tickerData0.getMfi23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test248"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getDailyPercentRng();
    java.lang.Double d15 = dailyData11.getLow();
    java.lang.Double d16 = dailyData11.getOpen();
    double d17 = dailyData11.getDailyRng();
    double d18 = dailyData11.getDailyPercentChg();
    long long19 = dailyData11.getDaysSinceBase();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 693934L);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test249"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setShares(693934L);
    java.lang.String str11 = industryData0.getMarketCap();
    industryData0.setSlope((double)0);
    double d14 = industryData0.getRawRs();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 100.0d);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test250"); }


    net.ajaskey.market.ta.TickerData tickerData1 = new net.ajaskey.market.ta.TickerData();
    double[] d_array2 = tickerData1.getVolumeData();
    double d3 = tickerData1.getChg65();
    double[] d_array4 = tickerData1.getOiData();
    double d5 = tickerData1.getMfi65();
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str10 = net.ajaskey.market.misc.Utils.stringDate(calendar9);
    java.lang.String str11 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar9);
    net.ajaskey.market.ta.TickerData tickerData12 = null;
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData();
    double[] d_array14 = tickerData13.getTrueLowData();
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate(calendar18);
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate2(calendar18);
    net.ajaskey.market.ta.DailyData dailyData21 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData13, calendar18);
    int i22 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData12, calendar18);
    boolean b23 = net.ajaskey.market.misc.Utils.sameYear(calendar9, calendar18);
    java.util.Calendar calendar27 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate(calendar27);
    java.lang.String str29 = net.ajaskey.market.misc.Utils.stringDate2(calendar27);
    int i30 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData1, calendar18, calendar27);
    net.ajaskey.market.ta.TickerData tickerData31 = new net.ajaskey.market.ta.TickerData();
    double[] d_array32 = tickerData31.getVolumeData();
    double d33 = tickerData31.getChg65();
    double[] d_array34 = tickerData31.getOiData();
    double d35 = tickerData31.getMfi65();
    java.util.Calendar calendar39 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate(calendar39);
    java.lang.String str41 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar39);
    net.ajaskey.market.ta.TickerData tickerData42 = null;
    net.ajaskey.market.ta.TickerData tickerData43 = new net.ajaskey.market.ta.TickerData();
    double[] d_array44 = tickerData43.getTrueLowData();
    java.util.Calendar calendar48 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str49 = net.ajaskey.market.misc.Utils.stringDate(calendar48);
    java.lang.String str50 = net.ajaskey.market.misc.Utils.stringDate2(calendar48);
    net.ajaskey.market.ta.DailyData dailyData51 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData43, calendar48);
    int i52 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData42, calendar48);
    boolean b53 = net.ajaskey.market.misc.Utils.sameYear(calendar39, calendar48);
    java.util.Calendar calendar57 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate(calendar57);
    java.lang.String str59 = net.ajaskey.market.misc.Utils.stringDate2(calendar57);
    int i60 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData31, calendar48, calendar57);
    boolean b61 = net.ajaskey.market.misc.Utils.sameMonth(calendar18, calendar48);
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar66 = net.ajaskey.market.misc.Utils.makeCopy(calendar65);
    java.util.Calendar calendar67 = net.ajaskey.market.misc.Utils.makeCopy(calendar65);
    boolean b68 = net.ajaskey.market.misc.Utils.sameMonth(calendar48, calendar65);
    net.ajaskey.market.misc.Utils.printCalendar(calendar65);
    net.ajaskey.market.ta.TickerData tickerData76 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808603728,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=36,MILLISECOND=272,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar65, (double)(byte)1, (double)2016L, 52.0d, (double)(-1.0f), (double)(byte)(-1), 10.0d);
    double d77 = tickerData76.getLrInt260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "30-Jan-0001"+ "'", str10.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "java.util.GregorianCalendar[time=-62164808598611,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=389,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str11.equals("java.util.GregorianCalendar[time=-62164808598611,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=389,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "30-Jan-0001"+ "'", str19.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Fri 30-Jan-0001"+ "'", str20.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "30-Jan-0001"+ "'", str28.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Fri 30-Jan-0001"+ "'", str29.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d35 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "30-Jan-0001"+ "'", str40.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "java.util.GregorianCalendar[time=-62164808598611,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=389,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str41.equals("java.util.GregorianCalendar[time=-62164808598611,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=389,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "30-Jan-0001"+ "'", str49.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Fri 30-Jan-0001"+ "'", str50.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "30-Jan-0001"+ "'", str58.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Fri 30-Jan-0001"+ "'", str59.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d77 == 0.0d);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test251"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808638773,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=1,MILLISECOND=227,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test252"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma130Trend();
    double d6 = tickerData0.getAdx();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test253"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getChg23();
    java.util.Calendar calendar7 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate(calendar7);
    net.ajaskey.market.ta.DailyData dailyData15 = new net.ajaskey.market.ta.DailyData(calendar7, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d16 = dailyData15.getTrueHigh();
    java.lang.String str17 = dailyData15.toString();
    java.lang.Double d18 = dailyData15.getOpen();
    dailyData15.setVolume((double)1L);
    java.lang.String str21 = dailyData15.toString();
    tickerData0.addData(dailyData15);
    double d23 = dailyData15.getDailyChg();
    java.lang.Double d24 = dailyData15.getOi();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "30-Jan-0001"+ "'", str8.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str17.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d18 + "' != '" + 0.0d+ "'", d18.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     1     0      1.00      0.00"+ "'", str21.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     1     0      1.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d24 + "' != '" + 0.0d+ "'", d24.equals(0.0d));

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test254"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)(byte)1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData8 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test255"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getRsRaw();
    double d7 = derivedData0.getMfi65();
    double d8 = derivedData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test256"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    industryData0.setRawRsSt(100.0d);
    java.lang.String str11 = industryData0.getSector();
    java.lang.String str12 = industryData0.getMarketCap();
    double d13 = industryData0.getAvgVol();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test257"); }


    java.util.ArrayList<java.lang.String> arraylist_str1 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str1, str_array3);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str1);
    net.ajaskey.market.ta.TickerData tickerData7 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808652183,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=817,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData6);
    net.ajaskey.market.ta.TickerData tickerData9 = net.ajaskey.market.ta.TickerData.getTickerData(list_tickerData6, "java.util.GregorianCalendar[time=-62164808617041,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=22,MILLISECOND=959,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData9);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test258"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    double d6 = derivedData0.getPriceInRng260();
    java.lang.Double d7 = derivedData0.getSmaPerc130();
    double d8 = derivedData0.getLr260();
    double d9 = derivedData0.getAtrPercent23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test259"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getTrueLow();
    double d15 = dailyData11.getDailyPercentChg();
    java.lang.Double d16 = dailyData11.getLow();
    java.util.Calendar calendar17 = dailyData11.getDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test260"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg();
    double d8 = derivedData0.getLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test261"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    tickerData0.fillDataArrays((int)' ', false);
    double d11 = tickerData0.getPriceOffHigh260();
    java.util.Calendar[] calendar_array12 = tickerData0.getDateData();
    java.lang.String str13 = tickerData0.getTickerName();
    double[] d_array14 = tickerData0.getTypicalPriceData();
    double d15 = tickerData0.getPriceOffLow260();
    double d16 = tickerData0.getMfi130();
    double d17 = tickerData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test262"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    double d2 = tickerData0.getCurrentPrice();
    double d3 = tickerData0.getAtr23();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    java.lang.Double d5 = tickerData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test263"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getMfi130();
    java.lang.Double d5 = tickerData0.getSma23();
    java.lang.Double d6 = tickerData0.getSma260();
    int i7 = tickerData0.getDataCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test264"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    java.lang.Double d7 = derivedData0.getSma130();
    double d8 = derivedData0.getLow260();
    java.lang.Double d9 = derivedData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test265"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    java.lang.String str8 = industryData0.getMarketCap();
    industryData0.setRawRsSt((double)(short)0);
    industryData0.setShares((long)(byte)0);
    industryData0.setRank((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test266"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getPriceOffHigh260();
    java.lang.Integer i4 = tickerData0.getDaysOfData();
    double d5 = tickerData0.getLrSlope260();
    double d6 = tickerData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test267"); }


    net.ajaskey.market.misc.Utils.NL = "java.util.GregorianCalendar[time=-62164808630065,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=9,MILLISECOND=935,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test268"); }


    java.util.Calendar calendar0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str1 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test269"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.util.Calendar calendar5 = null;
    java.util.Calendar calendar10 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate(calendar10);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate2(calendar10);
    net.ajaskey.market.ta.TickerData tickerData19 = new net.ajaskey.market.ta.TickerData("hi!", calendar10, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.makeCopy(calendar10);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar24);
    java.util.Calendar calendar31 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate(calendar31);
    java.lang.String str33 = net.ajaskey.market.misc.Utils.stringDate2(calendar31);
    net.ajaskey.market.ta.TickerData tickerData40 = new net.ajaskey.market.ta.TickerData("hi!", calendar31, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar41 = net.ajaskey.market.misc.Utils.makeCopy(calendar31);
    boolean b42 = net.ajaskey.market.misc.Utils.sameDate(calendar24, calendar41);
    long long43 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar20, calendar41);
    boolean b44 = net.ajaskey.market.misc.Utils.sameDate(calendar5, calendar41);
    java.lang.String str45 = net.ajaskey.market.misc.Utils.getDayName(calendar41);
    boolean b46 = net.ajaskey.market.misc.Utils.sameDate(calendar3, calendar41);
    net.ajaskey.market.misc.Utils.printCalendar(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Fri 30-Jan-0001"+ "'", str12.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "java.util.GregorianCalendar[time=-62164808598440,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=560,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str26.equals("java.util.GregorianCalendar[time=-62164808598440,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=560,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "30-Jan-0001"+ "'", str32.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Fri 30-Jan-0001"+ "'", str33.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long43 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "unknown-day"+ "'", str45.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test270"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc23();
    double d4 = derivedData0.getCurrentPrice();
    java.lang.Double d5 = derivedData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test271"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.Double d9 = tickerData0.getSmaPerc260();
    java.lang.Double d10 = tickerData0.getSmaPerc130();
    double d11 = tickerData0.getMfi23();
    java.lang.Double d12 = tickerData0.getSma23();
    double[] d_array13 = tickerData0.getTypicalPriceData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test272"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d23 = dailyData22.getClose();
    double d24 = dailyData22.getDailyPercentChg();
    tickerData0.addData(dailyData22);
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar29);
    dailyData32.setTrueHigh((double)(byte)100);
    java.lang.Double d35 = dailyData32.getVolume();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d23 + "' != '" + 1.0d+ "'", d23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d35 + "' != '" + 0.0d+ "'", d35.equals(0.0d));

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test273"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getRsRaw();
    java.lang.Double d6 = derivedData0.getSma23();
    double d7 = derivedData0.getLrAngle260();
    double d8 = derivedData0.getLrInt260();
    java.lang.Double d9 = derivedData0.getSmaPerc23();
    java.lang.Double d10 = derivedData0.getSmaPerc260();
    java.lang.Double d11 = derivedData0.getSma65();
    double d12 = derivedData0.getAvgVol65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d10 + "' != '" + 0.0d+ "'", d10.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d11 + "' != '" + 0.0d+ "'", d11.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test274"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getTrueHigh();
    double d14 = dailyData11.getDailyPercentRng();
    dailyData11.setDailyChg((double)'a');
    java.lang.Double d17 = dailyData11.getOi();
    java.lang.Double d18 = dailyData11.getOi();
    double d19 = dailyData11.getDailyPercentRng();
    double d20 = dailyData11.getDailyChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d17 + "' != '" + 0.0d+ "'", d17.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d18 + "' != '" + 0.0d+ "'", d18.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == (-96.0d));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test275"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getDailyPercentRng();
    dailyData11.setTrueHigh((double)(short)(-1));
    dailyData11.setDailyChg(100.0d);
    java.util.Calendar calendar19 = dailyData11.getDate();
    java.lang.Double d20 = dailyData11.getHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d20 + "' != '" + 10.0d+ "'", d20.equals(10.0d));

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test276"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    double[] d_array9 = tickerData0.getOiData();
    double d10 = tickerData0.getChg260();
    java.lang.String str11 = tickerData0.getTickerName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test277"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d11 = industryData0.getAvgVol();
    industryData0.setShares((long)(short)100);
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808635603,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=4,MILLISECOND=397,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setShares((long)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test278"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    net.ajaskey.market.ta.TickerData tickerData55 = new net.ajaskey.market.ta.TickerData("hi!", calendar46, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar38, calendar46);
    net.ajaskey.market.ta.TickerData tickerData57 = null;
    java.util.Calendar calendar61 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str62 = net.ajaskey.market.misc.Utils.stringDate(calendar61);
    net.ajaskey.market.ta.DailyData dailyData69 = new net.ajaskey.market.ta.DailyData(calendar61, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    net.ajaskey.market.ta.DailyData dailyData70 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData57, calendar61);
    java.lang.String str71 = net.ajaskey.market.misc.Utils.stringDate(calendar61);
    boolean b72 = net.ajaskey.market.misc.Utils.sameMonth(calendar38, calendar61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808598346,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=654,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808598346,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=654,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "30-Jan-0001"+ "'", str62.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "30-Jan-0001"+ "'", str71.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test279"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    net.ajaskey.market.ta.TrendType trendType3 = tickerData0.getSma23Trend();
    java.lang.Double d4 = tickerData0.getSma65();
    tickerData0.setTickerExchange("unknown-month");
    double[] d_array7 = tickerData0.getCloseData();
    double d8 = tickerData0.getLrAngle260();
    int i9 = tickerData0.getDataCount();
    double d10 = tickerData0.getPriceOffHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test280"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    net.ajaskey.market.ta.DailyData dailyData13 = new net.ajaskey.market.ta.DailyData(calendar5, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    tickerData0.addData(dailyData13);
    java.lang.Double d15 = dailyData13.getOpen();
    double d16 = dailyData13.getTrueHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test281"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    industryData0.setPriceInRange260((double)10.0f);
    java.lang.String str5 = industryData0.getTicker();
    java.lang.String str6 = industryData0.getTicker();
    double d7 = industryData0.getPriceInRange260();
    double d8 = industryData0.getRawRs();
    industryData0.setAvgVol((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test282"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    net.ajaskey.market.ta.TickerData tickerData6 = null;
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getTrueLowData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate2(calendar12);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData7, calendar12);
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, calendar12);
    boolean b17 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar12);
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    net.ajaskey.market.ta.TickerData tickerData48 = new net.ajaskey.market.ta.TickerData();
    double[] d_array49 = tickerData48.getVolumeData();
    double d50 = tickerData48.getChg65();
    double[] d_array51 = tickerData48.getOiData();
    double d52 = tickerData48.getMfi65();
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar56);
    net.ajaskey.market.ta.TickerData tickerData59 = null;
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData();
    double[] d_array61 = tickerData60.getTrueLowData();
    java.util.Calendar calendar65 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate(calendar65);
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate2(calendar65);
    net.ajaskey.market.ta.DailyData dailyData68 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData60, calendar65);
    int i69 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData59, calendar65);
    boolean b70 = net.ajaskey.market.misc.Utils.sameYear(calendar56, calendar65);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate(calendar74);
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate2(calendar74);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData48, calendar65, calendar74);
    boolean b78 = net.ajaskey.market.misc.Utils.sameMonth(calendar35, calendar65);
    boolean b79 = net.ajaskey.market.misc.Utils.sameYear(calendar3, calendar65);
    net.ajaskey.market.ta.DailyData dailyData86 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)1, (double)(short)1, (double)(short)1, (-1.0d), (double)'4', (double)(byte)10);
    net.ajaskey.market.ta.DailyData dailyData93 = new net.ajaskey.market.ta.DailyData(calendar3, (double)1, (double)'a', (double)'a', (double)(short)0, 0.0d, (double)10L);
    double d94 = dailyData93.getDailyPercentChg();
    double d95 = dailyData93.getDailyChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=-62164808598284,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=716,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str5.equals("java.util.GregorianCalendar[time=-62164808598284,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=716,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001"+ "'", str14.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808598268,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=732,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808598268,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=732,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "java.util.GregorianCalendar[time=-62164808598268,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=732,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str58.equals("java.util.GregorianCalendar[time=-62164808598268,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=732,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "30-Jan-0001"+ "'", str66.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Fri 30-Jan-0001"+ "'", str67.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "30-Jan-0001"+ "'", str75.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Fri 30-Jan-0001"+ "'", str76.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d94 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d95 == 0.0d);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test283"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    double d6 = derivedData0.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test284"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setChg260(10.0d);
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808651119,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=881,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808648342,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=658,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.String str12 = industryData0.getTicker();
    java.lang.String str13 = industryData0.getMarketCap();
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808613749,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=26,MILLISECOND=251,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "java.util.GregorianCalendar[time=-62164808651119,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=881,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str13.equals("java.util.GregorianCalendar[time=-62164808651119,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=881,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test285"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar4);
    net.ajaskey.market.ta.TickerData tickerData7 = null;
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getTrueLowData();
    java.util.Calendar calendar13 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate(calendar13);
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate2(calendar13);
    net.ajaskey.market.ta.DailyData dailyData16 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData8, calendar13);
    int i17 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData7, calendar13);
    boolean b18 = net.ajaskey.market.misc.Utils.sameYear(calendar4, calendar13);
    net.ajaskey.market.ta.TickerData tickerData19 = new net.ajaskey.market.ta.TickerData();
    double[] d_array20 = tickerData19.getTrueLowData();
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.DailyData dailyData27 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData19, calendar24);
    double d28 = tickerData19.getAtrPercent23();
    double d29 = tickerData19.getDiPlus();
    java.util.Calendar calendar33 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate(calendar33);
    net.ajaskey.market.ta.DailyData dailyData41 = new net.ajaskey.market.ta.DailyData(calendar33, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d42 = dailyData41.getClose();
    double d43 = dailyData41.getDailyPercentChg();
    tickerData19.addData(dailyData41);
    java.util.Calendar calendar48 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str49 = net.ajaskey.market.misc.Utils.stringDate(calendar48);
    java.lang.String str50 = net.ajaskey.market.misc.Utils.stringDate2(calendar48);
    net.ajaskey.market.ta.DailyData dailyData51 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData19, calendar48);
    boolean b52 = net.ajaskey.market.misc.Utils.sameMonth(calendar13, calendar48);
    java.lang.String str53 = net.ajaskey.market.misc.Utils.stringDate(calendar13);
    net.ajaskey.market.ta.TickerData tickerData60 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808649606,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=394,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar13, (double)10, (double)(-1), 0.0d, 100.0d, (double)1L, (double)(-1.0f));
    double d61 = tickerData60.getLr260();
    double[] d_array62 = tickerData60.getOiData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "java.util.GregorianCalendar[time=-62164808598190,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=810,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str6.equals("java.util.GregorianCalendar[time=-62164808598190,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=810,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "30-Jan-0001"+ "'", str14.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Fri 30-Jan-0001"+ "'", str15.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "30-Jan-0001"+ "'", str34.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d42 + "' != '" + 1.0d+ "'", d42.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "30-Jan-0001"+ "'", str49.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Fri 30-Jan-0001"+ "'", str50.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dailyData51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "30-Jan-0001"+ "'", str53.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d61 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array62);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test286"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808644926,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=74,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d15 = tickerData0.getChg65();
    double[] d_array16 = tickerData0.getTypicalPriceData();
    int i17 = tickerData0.getDataCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test287"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType9 = tickerData0.getSma130Trend();
    java.lang.Double d10 = tickerData0.getSma260();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    java.lang.String str16 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar14);
    int i17 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar14);
    net.ajaskey.market.ta.TrendType trendType18 = tickerData0.getSma23Trend();
    double d19 = tickerData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "java.util.GregorianCalendar[time=-62164808598128,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=872,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str16.equals("java.util.GregorianCalendar[time=-62164808598128,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=872,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test288"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType9 = tickerData0.getSma130Trend();
    double[] d_array10 = tickerData0.getTypicalPriceData();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d23 = dailyData22.getTrueHigh();
    dailyData22.setTrueHigh((double)(short)0);
    long long26 = dailyData22.getDaysSinceBase();
    double d27 = dailyData22.getTrueHigh();
    java.util.Calendar calendar28 = dailyData22.getDate();
    net.ajaskey.market.ta.DailyData dailyData29 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar28);
    int i30 = tickerData0.getDataCount();
    double d31 = tickerData0.getRsRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d31 == 0.0d);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test289"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setShares(693934L);
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808640396,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=604,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.String str13 = industryData0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test290"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getChg65();
    double d6 = derivedData0.getMfi65();
    double d7 = derivedData0.getMfi14();
    double d8 = derivedData0.getPriceOffHigh260();
    double d9 = derivedData0.getAtr23();
    double d10 = derivedData0.getChg();
    double d11 = derivedData0.getLrSlope260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test291"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    java.lang.Double d9 = tickerData0.getSma23();
    net.ajaskey.market.ta.methods.TaMethods taMethods10 = tickerData0.getTaMethods();
    double[] d_array11 = tickerData0.getHighData();
    java.lang.Double d12 = tickerData0.getSmaPerc23();
    double[] d_array13 = tickerData0.getTypicalPriceData();
    java.lang.Double d14 = tickerData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d14);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test292"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    tickerData0.fillDataArrays((int)(byte)(-1), false);
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getVolumeData();
    double d9 = tickerData7.getChg65();
    double[] d_array10 = tickerData7.getOiData();
    int i14 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData7, (int)'#', (int)(short)10, (int)(byte)0);
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData7);
    double d16 = tickerData0.getLrSlope260();
    double d17 = tickerData0.getAvgVol20();
    double[] d_array18 = tickerData0.getOpenData();
    java.lang.Double d19 = tickerData0.getSma260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(d_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d19);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test293"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setSector("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00");
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d11 = industryData0.getAvgVol();
    industryData0.setShares((long)(short)100);
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808649606,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=394,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setName("hi!");
    industryData0.setRawRs((double)(short)0);
    double d20 = industryData0.getRawRs();
    industryData0.setName("java.util.GregorianCalendar[time=-62164808651119,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=881,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test294"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808643894,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=56,MILLISECOND=106,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test295"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    java.lang.Double d4 = tickerData0.getSma260();
    double[] d_array5 = tickerData0.getTrueLowData();
    java.lang.Double d6 = tickerData0.getSma130();
    double d7 = tickerData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test296"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getHigh260();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test297"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double d9 = tickerData0.getDiPlus();
    java.util.Calendar[] calendar_array10 = tickerData0.getDateData();
    double[] d_array11 = tickerData0.getTypicalPriceData();
    java.lang.Double d12 = tickerData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test298"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceInRng260();
    double d3 = derivedData0.getMfi14();
    double d4 = derivedData0.getDiPlus();
    java.lang.Double d5 = derivedData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test299"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getRsRaw();
    java.lang.Double d6 = derivedData0.getSma23();
    double d7 = derivedData0.getLrAngle260();
    double d8 = derivedData0.getDiPlus();
    java.lang.Double d9 = derivedData0.getSma260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test300"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getPriceInRng260();
    double d5 = derivedData0.getAvgVol65();
    double d6 = derivedData0.getMfi23();
    java.lang.Double d7 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test301"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    java.lang.String str5 = net.ajaskey.market.misc.Utils.getDayName(calendar3);
    net.ajaskey.market.misc.Utils.printCalendar(calendar3);
    java.util.Calendar calendar7 = null;
    boolean b8 = net.ajaskey.market.misc.Utils.sameMonth(calendar3, calendar7);
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.makeCopy(calendar3);
    java.util.Calendar calendar13 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate(calendar13);
    java.lang.String str15 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar13);
    net.ajaskey.market.ta.TickerData tickerData16 = null;
    net.ajaskey.market.ta.TickerData tickerData17 = new net.ajaskey.market.ta.TickerData();
    double[] d_array18 = tickerData17.getTrueLowData();
    java.util.Calendar calendar22 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate(calendar22);
    java.lang.String str24 = net.ajaskey.market.misc.Utils.stringDate2(calendar22);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData17, calendar22);
    int i26 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData16, calendar22);
    boolean b27 = net.ajaskey.market.misc.Utils.sameYear(calendar13, calendar22);
    net.ajaskey.market.ta.TickerData tickerData28 = new net.ajaskey.market.ta.TickerData();
    double[] d_array29 = tickerData28.getTrueLowData();
    java.util.Calendar calendar33 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate(calendar33);
    java.lang.String str35 = net.ajaskey.market.misc.Utils.stringDate2(calendar33);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData28, calendar33);
    double d37 = tickerData28.getAtrPercent23();
    double d38 = tickerData28.getDiPlus();
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getDailyPercentChg();
    tickerData28.addData(dailyData50);
    java.util.Calendar calendar57 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate(calendar57);
    java.lang.String str59 = net.ajaskey.market.misc.Utils.stringDate2(calendar57);
    net.ajaskey.market.ta.DailyData dailyData60 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData28, calendar57);
    boolean b61 = net.ajaskey.market.misc.Utils.sameMonth(calendar22, calendar57);
    boolean b62 = net.ajaskey.market.misc.Utils.sameDate(calendar9, calendar22);
    net.ajaskey.market.misc.Utils.printCalendar(calendar9);
    net.ajaskey.market.ta.DailyData dailyData70 = new net.ajaskey.market.ta.DailyData(calendar9, (double)2017L, (double)35528L, (double)10L, (double)2016L, (double)2017L, (double)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "unknown-day"+ "'", str5.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "30-Jan-0001"+ "'", str14.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "java.util.GregorianCalendar[time=-62164808598097,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=903,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str15.equals("java.util.GregorianCalendar[time=-62164808598097,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=903,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "30-Jan-0001"+ "'", str23.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001"+ "'", str24.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "30-Jan-0001"+ "'", str34.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Fri 30-Jan-0001"+ "'", str35.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d37 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d38 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "30-Jan-0001"+ "'", str58.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Fri 30-Jan-0001"+ "'", str59.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dailyData60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test302"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getRawRsSt();
    industryData0.setRank((int)(short)10);
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808629051,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=10,MILLISECOND=949,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test303"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg();
    double d8 = derivedData0.getDiPlus();
    double d9 = derivedData0.getMfi65();
    double d10 = derivedData0.getAtr23();
    double d11 = derivedData0.getDiMinus();
    double d12 = derivedData0.getLr260();
    double d13 = derivedData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test304"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    java.util.Calendar calendar33 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate(calendar33);
    net.ajaskey.market.ta.DailyData dailyData41 = new net.ajaskey.market.ta.DailyData(calendar33, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b46 = net.ajaskey.market.misc.Utils.sameYear(calendar33, calendar45);
    long long47 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar26, calendar45);
    java.util.Calendar calendar51 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar55 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str56 = net.ajaskey.market.misc.Utils.stringDate(calendar55);
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate2(calendar55);
    boolean b58 = net.ajaskey.market.misc.Utils.sameYear(calendar51, calendar55);
    boolean b59 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar51);
    java.util.Calendar calendar60 = net.ajaskey.market.misc.Utils.makeCopy(calendar51);
    net.ajaskey.market.ta.DailyData dailyData67 = new net.ajaskey.market.ta.DailyData(calendar60, (double)1.0f, (double)693934L, (double)(-1), 0.0d, (double)(byte)100, (double)(short)100);
    java.lang.Double d68 = dailyData67.getClose();
    java.lang.Double d69 = dailyData67.getOi();
    dailyData67.setVolume(52.0d);
    java.lang.Double d72 = dailyData67.getOi();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808598003,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=997,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808598003,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=997,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "30-Jan-0001"+ "'", str34.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "30-Jan-0001"+ "'", str56.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Fri 30-Jan-0001"+ "'", str57.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d68 + "' != '" + 0.0d+ "'", d68.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d69 + "' != '" + 100.0d+ "'", d69.equals(100.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d72 + "' != '" + 100.0d+ "'", d72.equals(100.0d));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test305"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808611085,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=28,MILLISECOND=915,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test306"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    java.lang.Double d3 = derivedData0.getSma23();
    double d4 = derivedData0.getChg65();
    double d5 = derivedData0.getMfi23();
    double d6 = derivedData0.getAvgVol65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test307"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getChg65();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getMfi14();
    double d5 = derivedData0.getChg();
    java.lang.Double d6 = derivedData0.getSmaPerc130();
    double d7 = derivedData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test308"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    industryData0.setShares((long)10);
    java.lang.String str10 = industryData0.getExch();
    long long11 = industryData0.getShares();
    java.util.List<java.lang.Integer> list_i12 = industryData0.getRank();
    java.lang.String str13 = industryData0.getTicker();
    java.lang.String str14 = industryData0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test309"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    int i18 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, 1, (int)(short)(-1), (int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test310"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setPriceInRange260((double)(byte)100);
    double d8 = industryData0.getRawRs();
    industryData0.setAvgVol((double)100L);
    industryData0.setShares((long)1);
    long long13 = industryData0.getShares();
    industryData0.setRawRs((double)1);
    java.lang.String str16 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test311"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData("hi!", calendar20, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData30 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar20);
    double[] d_array31 = tickerData0.getOiData();
    double d32 = tickerData0.getAdx();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d32 == 0.0d);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test312"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808648763,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=237,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test313"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    double d9 = tickerData0.getMfi14();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getVolumeData();
    double d12 = tickerData10.getChg65();
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData10, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType17 = tickerData10.getSma130Trend();
    double[] d_array18 = tickerData10.getTrueHighData();
    java.lang.Double d19 = tickerData10.getSma23();
    double d20 = tickerData10.getLrInt260();
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData10, calendar24);
    int i26 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar24);
    double[] d_array27 = tickerData0.getOiData();
    double d28 = tickerData0.getRsRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test314"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    double[] d_array16 = tickerData0.getTrueHighData();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double d19 = tickerData0.getAtr23();
    java.lang.Double d20 = tickerData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d20);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test315"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getRsRaw();
    java.lang.Double d6 = derivedData0.getSma23();
    java.lang.Double d7 = derivedData0.getSma260();
    java.lang.Double d8 = derivedData0.getSmaPerc130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test316"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    java.lang.String str7 = tickerData0.getTicker();
    java.lang.String str8 = tickerData0.getTickerName();
    double d9 = tickerData0.getChg23();
    double[] d_array10 = tickerData0.getOiData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "HI!"+ "'", str7.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test317"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    java.lang.Double d9 = tickerData0.getSma23();
    net.ajaskey.market.ta.methods.TaMethods taMethods10 = tickerData0.getTaMethods();
    double[] d_array11 = tickerData0.getHighData();
    java.lang.Double d12 = tickerData0.getSmaPerc23();
    double[] d_array13 = tickerData0.getTrueLowData();
    double[] d_array14 = tickerData0.getTrueLowData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test318"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    industryData0.setShares((long)10);
    industryData0.setChg260((double)10L);
    industryData0.setPriceInRange260((double)(byte)0);
    java.lang.String str14 = industryData0.getTicker();
    java.lang.String str15 = industryData0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test319"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getAtr23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test320"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    java.lang.Double d4 = tickerData0.getSma65();
    net.ajaskey.market.ta.TickerData tickerData5 = new net.ajaskey.market.ta.TickerData();
    double[] d_array6 = tickerData5.getTrueLowData();
    java.util.Calendar calendar10 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate(calendar10);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate2(calendar10);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar10);
    double d14 = tickerData5.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType15 = tickerData5.getSma130Trend();
    double[] d_array16 = tickerData5.getVolumeData();
    int i20 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData5, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate2(calendar25);
    net.ajaskey.market.ta.TickerData tickerData34 = new net.ajaskey.market.ta.TickerData("hi!", calendar25, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData35 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData5, calendar25);
    java.util.Calendar calendar39 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate(calendar39);
    net.ajaskey.market.ta.DailyData dailyData47 = new net.ajaskey.market.ta.DailyData(calendar39, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar39);
    long long49 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar25, calendar39);
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar39);
    double d51 = tickerData0.getRsRaw();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    double[] d_array53 = tickerData0.getTrueHighData();
    java.lang.Integer i54 = tickerData0.getDaysOfData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "30-Jan-0001"+ "'", str11.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Fri 30-Jan-0001"+ "'", str12.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Fri 30-Jan-0001"+ "'", str27.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "30-Jan-0001"+ "'", str40.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d51 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i54);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test321"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808616994,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=23,MILLISECOND=6,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (int)'4');
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test322"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    double d14 = dailyData11.getDailyPercentRng();
    java.lang.Double d15 = dailyData11.getLow();
    java.lang.Double d16 = dailyData11.getOpen();
    java.lang.Double d17 = dailyData11.getOi();
    double d18 = dailyData11.getTrueHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d17 + "' != '" + 0.0d+ "'", d17.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test323"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    net.ajaskey.market.ta.TrendType trendType14 = tickerData0.getSma130Trend();
    java.lang.Double d15 = tickerData0.getSmaPerc65();
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808636219,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=3,MILLISECOND=781,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.Double d18 = tickerData0.getSmaPerc23();
    double d19 = tickerData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test324"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.String str24 = dailyData20.toString();
    double d25 = dailyData20.getDailyChg();
    java.lang.Double d26 = dailyData20.getClose();
    java.lang.Double d27 = dailyData20.getOpen();
    java.lang.Double d28 = dailyData20.getLow();
    double d29 = dailyData20.getTrueHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str24.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d26 + "' != '" + 1.0d+ "'", d26.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d27 + "' != '" + 0.0d+ "'", d27.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d28 + "' != '" + 0.0d+ "'", d28.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test325"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    long long14 = dailyData11.getDaysSinceBase();
    java.lang.Double d15 = dailyData11.getOpen();
    double d16 = dailyData11.getDailyPercentChg();
    double d17 = dailyData11.getDailyPercentRng();
    double d18 = dailyData11.getTrueLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test326"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double[] d_array14 = tickerData13.getTypicalPriceData();
    double d15 = tickerData13.getLow260();
    tickerData13.generateDerived(false);
    double d18 = tickerData13.getPriceInRng260();
    java.lang.String str20 = tickerData13.DailyDataString(0);
    java.lang.Double d21 = tickerData13.getSma23();
    java.lang.Double d22 = tickerData13.getSma260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Fri 30-Jan-0001  1.00  1.00  0.00  -1.00     0     0     -0.00     -0.00"+ "'", str20.equals("Fri 30-Jan-0001  1.00  1.00  0.00  -1.00     0     0     -0.00     -0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d21 + "' != '" + 0.0d+ "'", d21.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d22 + "' != '" + 0.0d+ "'", d22.equals(0.0d));

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test327"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    java.lang.Double d28 = tickerData13.getSma23();
    java.lang.Double d29 = tickerData13.getSmaPerc23();
    double d30 = tickerData13.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d28 + "' != '" + 0.0d+ "'", d28.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d29 + "' != '" + 0.0d+ "'", d29.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d30 == 0.0d);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test328"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    industryData0.setRawRsSt((double)0);
    java.lang.String str4 = industryData0.getExch();
    industryData0.setPriceInRange260((double)(short)10);
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808638383,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=1,MILLISECOND=617,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d9 = industryData0.getRawRs();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test329"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getLrInt260();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808649263,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=737,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808650542,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=458,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)' ', (int)(byte)10, (int)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test330"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getMfi130();
    java.lang.Double d5 = tickerData0.getSmaPerc65();
    java.lang.Double d6 = tickerData0.getSma65();
    double[] d_array7 = tickerData0.getLowData();
    java.lang.Double d8 = tickerData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test331"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    industryData0.setName("java.util.GregorianCalendar[time=-62164808651587,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=413,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setChg260((double)10);
    industryData0.setShares((long)0);
    double d14 = industryData0.getRawRs();
    java.util.List<java.lang.Integer> list_i15 = industryData0.getRank();
    industryData0.setRank(0);
    double d18 = industryData0.getPriceInRange260();
    industryData0.setShares(10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test332"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    double[] d_array5 = tickerData0.getTrueLowData();
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar13 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str14 = net.ajaskey.market.misc.Utils.stringDate(calendar13);
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate2(calendar13);
    boolean b16 = net.ajaskey.market.misc.Utils.sameYear(calendar9, calendar13);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.getString(calendar13);
    int i18 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "30-Jan-0001"+ "'", str14.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Fri 30-Jan-0001"+ "'", str15.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "30-Jan-0001"+ "'", str17.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test333"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar(100, (int)(short)(-1), (int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test334"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    java.lang.Double d5 = tickerData0.getSma65();
    double d6 = tickerData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test335"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    double d10 = tickerData0.getLow260();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getTrueLowData();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData11);
    double d14 = tickerData11.getRsi14();
    double d15 = tickerData11.getAvgVol20();
    double[] d_array16 = tickerData11.getHighData();
    java.lang.Double d17 = tickerData11.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d17);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test336"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    double d7 = tickerData0.getLr260();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test337"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    java.lang.Double d4 = tickerData0.getSma65();
    java.lang.Double d5 = tickerData0.getSma260();
    double d6 = tickerData0.getCurrentPrice();
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getMfi65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test338"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    java.lang.Double d5 = tickerData0.getSmaPerc23();
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, 10, 0, (-1));
    double d10 = tickerData0.getPriceOffHigh260();
    double d11 = tickerData0.getAtr23();
    double[] d_array12 = tickerData0.getOpenData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test339"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLrInt260();
    double d4 = derivedData0.getChg130();
    double d5 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test340"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getPriceInRng260();
    double d6 = derivedData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test341"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test342"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getPriceInRng260();
    double d5 = derivedData0.getLrSlope260();
    double d6 = derivedData0.getRsi14();
    java.lang.Double d7 = derivedData0.getSma130();
    double d8 = derivedData0.getMfi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test343"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getAvgVol65();
    java.lang.Double d8 = derivedData0.getSmaPerc260();
    double d9 = derivedData0.getRsi14();
    double d10 = derivedData0.getPriceOffLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test344"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    java.lang.Double d10 = tickerData0.getSma260();
    double d11 = tickerData0.getLr260();
    net.ajaskey.market.ta.TrendType trendType12 = tickerData0.getSma130Trend();
    double d13 = tickerData0.getDiPlus();
    double[] d_array14 = tickerData0.getCloseData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test345"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    double d12 = tickerData0.getMfi23();
    double[] d_array13 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals14 = tickerData0.getFundies();
    double d15 = tickerData0.getAtrPercent23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test346"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)(byte)0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData10 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData13 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (-100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData13);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test347"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getHigh();
    dailyData11.setVolume((double)(short)(-1));
    dailyData11.setTrueHigh((double)(short)(-1));
    java.util.Calendar calendar17 = dailyData11.getDate();
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    tickerData18.setTicker("hi!");
    double[] d_array23 = tickerData18.getOiData();
    double d24 = tickerData18.getDiMinus();
    tickerData18.setTicker("hi!");
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str35 = net.ajaskey.market.misc.Utils.stringDate(calendar34);
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate2(calendar34);
    boolean b37 = net.ajaskey.market.misc.Utils.sameYear(calendar30, calendar34);
    java.lang.String str38 = net.ajaskey.market.misc.Utils.getString(calendar34);
    java.lang.String str39 = net.ajaskey.market.misc.Utils.getString(calendar34);
    net.ajaskey.market.ta.DailyData dailyData40 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData18, calendar34);
    java.lang.String str41 = net.ajaskey.market.misc.Utils.stringDate2(calendar34);
    long long42 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar17, calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 10.0d+ "'", d12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "30-Jan-0001"+ "'", str35.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Fri 30-Jan-0001"+ "'", str36.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "30-Jan-0001"+ "'", str38.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Fri 30-Jan-0001"+ "'", str41.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 0L);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test348"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    java.lang.String str9 = industryData0.getTicker();
    industryData0.setRawRsSt((double)1.0f);
    industryData0.setShares((long)(-1));
    java.lang.String str14 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test349"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    java.lang.Double d13 = dailyData11.getLow();
    double d14 = dailyData11.getTrueHigh();
    java.lang.String str15 = dailyData11.toString();
    double d16 = dailyData11.getTrueLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 0.0d+ "'", d13.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str15.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test350"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getAvgVol20();
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma130Trend();
    java.lang.String str6 = tickerData0.toString();
    double d7 = tickerData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "null\tnull\tnull\r\n"+ "'", str6.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test351"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    double d3 = derivedData0.getLrInt260();
    double d4 = derivedData0.getCurrentPrice();
    java.lang.Double d5 = derivedData0.getSma65();
    double d6 = derivedData0.getLr260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test352"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setName("Unknown");
    industryData0.setSlope(0.0d);
    double d7 = industryData0.getPriceInRange260();
    industryData0.setTicker("java.util.GregorianCalendar[time=-62164808649606,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=394,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    double d12 = industryData0.getRawRs();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test353"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getMfi23();
    java.lang.Double d5 = derivedData0.getSma130();
    double d6 = derivedData0.getAtr23();
    double d7 = derivedData0.getDiPlus();
    java.lang.Double d8 = derivedData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test354"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getAdx();
    double d11 = tickerData0.getChg();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(true);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test355"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    java.lang.String str13 = dailyData11.toString();
    double d14 = dailyData11.getTrueHigh();
    double d15 = dailyData11.getDailyChg();
    double d16 = dailyData11.getDailyPercentChg();
    dailyData11.setVolume((double)0L);
    dailyData11.setVolume(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str13.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test356"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOiData();
    double[] d_array11 = tickerData0.getOpenData();
    double d12 = tickerData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test357"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    double d9 = tickerData0.getMfi14();
    net.ajaskey.market.ta.TickerData tickerData10 = new net.ajaskey.market.ta.TickerData();
    double[] d_array11 = tickerData10.getVolumeData();
    double d12 = tickerData10.getChg65();
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData10, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType17 = tickerData10.getSma130Trend();
    double[] d_array18 = tickerData10.getTrueHighData();
    java.lang.Double d19 = tickerData10.getSma23();
    double d20 = tickerData10.getLrInt260();
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    net.ajaskey.market.ta.DailyData dailyData25 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData10, calendar24);
    int i26 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar24);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.getDayName(calendar24);
    java.util.Calendar calendar28 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    java.lang.String str29 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "unknown-day"+ "'", str27.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "java.util.GregorianCalendar[time=-61990539797660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=220,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=340,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 5\n  Month        : 7\n  Day of Month : 8\n  Day of Year  : 220\n  Week of Year : 32\n"+ "'", str29.equals("java.util.GregorianCalendar[time=-61990539797660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=220,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=340,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 5\n  Month        : 7\n  Day of Month : 8\n  Day of Year  : 220\n  Week of Year : 32\n"));

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test358"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d23 = dailyData22.getClose();
    double d24 = dailyData22.getDailyPercentChg();
    tickerData0.addData(dailyData22);
    java.util.Calendar calendar26 = dailyData22.getDate();
    java.lang.String str27 = net.ajaskey.market.misc.Utils.getMonthName(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d23 + "' != '" + 1.0d+ "'", d23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "unknown-month"+ "'", str27.equals("unknown-month"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test359"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "30-Jan-0001" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData5 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)'#');
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)(byte)0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData10 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData12 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData12);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test360"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getTrueLow();
    tickerData0.addData(dailyData50);
    java.lang.String str54 = tickerData0.getTicker();
    double d55 = tickerData0.getCurrentPrice();
    java.lang.Double d56 = tickerData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808597597,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=403,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808597597,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=403,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "FRI"+ "'", str54.equals("FRI"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d55 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d56);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test361"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getChg65();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getMfi14();
    double d5 = derivedData0.getChg();
    java.lang.Double d6 = derivedData0.getSmaPerc130();
    double d7 = derivedData0.getMfi23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test362"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    java.lang.Double d10 = tickerData0.getSma260();
    double d11 = tickerData0.getLr260();
    java.lang.Double d12 = tickerData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test363"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    java.lang.Double d5 = tickerData0.getSmaPerc23();
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, 10, 0, (-1));
    double d10 = tickerData0.getAtr23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test364"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getMfi65();
    double[] d_array10 = tickerData0.getVolumeData();
    double d11 = tickerData0.getRsRaw();
    java.util.Calendar calendar15 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str16 = net.ajaskey.market.misc.Utils.stringDate(calendar15);
    java.lang.String str17 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar15);
    java.util.Calendar calendar22 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate(calendar22);
    java.lang.String str24 = net.ajaskey.market.misc.Utils.stringDate2(calendar22);
    net.ajaskey.market.ta.TickerData tickerData31 = new net.ajaskey.market.ta.TickerData("hi!", calendar22, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar32 = net.ajaskey.market.misc.Utils.makeCopy(calendar22);
    boolean b33 = net.ajaskey.market.misc.Utils.sameDate(calendar15, calendar32);
    net.ajaskey.market.ta.DailyData dailyData40 = new net.ajaskey.market.ta.DailyData(calendar15, 0.0d, (double)10, (double)' ', (double)'#', (double)0L, (double)'a');
    java.lang.Double d41 = dailyData40.getLow();
    java.util.Calendar calendar42 = dailyData40.getDate();
    int i43 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, calendar42);
    double[] d_array44 = tickerData0.getHighData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "30-Jan-0001"+ "'", str16.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "java.util.GregorianCalendar[time=-62164808597566,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=434,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str17.equals("java.util.GregorianCalendar[time=-62164808597566,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=434,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "30-Jan-0001"+ "'", str23.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Fri 30-Jan-0001"+ "'", str24.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d41 + "' != '" + 32.0d+ "'", d41.equals(32.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array44);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test365"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    double[] d_array19 = tickerData9.getHighData();
    net.ajaskey.market.ta.TickerData tickerData21 = new net.ajaskey.market.ta.TickerData();
    double[] d_array22 = tickerData21.getVolumeData();
    double d23 = tickerData21.getChg65();
    tickerData21.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType26 = tickerData21.getSma65Trend();
    double[] d_array27 = tickerData21.getTypicalPriceData();
    tickerData21.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.util.Calendar calendar33 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate(calendar33);
    net.ajaskey.market.ta.DailyData dailyData41 = new net.ajaskey.market.ta.DailyData(calendar33, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d42 = dailyData41.getClose();
    double d43 = dailyData41.getDailyPercentChg();
    double d44 = dailyData41.getDailyPercentRng();
    dailyData41.setTrueHigh((double)(short)(-1));
    dailyData41.setDailyChg(100.0d);
    java.util.Calendar calendar49 = dailyData41.getDate();
    net.ajaskey.market.ta.DailyData dailyData50 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData21, calendar49);
    net.ajaskey.market.misc.Utils.printCalendar(calendar49);
    net.ajaskey.market.ta.TickerData tickerData58 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650011,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=989,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar49, 0.0d, 10.0d, (double)'#', (double)100, (double)10.0f, (double)'4');
    int i59 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, calendar49);
    java.util.Calendar[] calendar_array60 = tickerData9.getDateData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "30-Jan-0001"+ "'", str34.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d42 + "' != '" + 1.0d+ "'", d42.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d43 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array60);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test366"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double[] d_array6 = tickerData0.getTrueHighData();
    double[] d_array7 = tickerData0.getOpenData();
    tickerData0.setTickerExchange("NotFound");
    double d10 = tickerData0.getLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test367"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    java.lang.Double d3 = tickerData0.getSmaPerc23();
    java.lang.Double d4 = tickerData0.getSmaPerc130();
    double[] d_array5 = tickerData0.getHighData();
    double[] d_array6 = tickerData0.getOpenData();
    double d7 = tickerData0.getRsRaw();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808619084,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=20,MILLISECOND=916,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test368"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    java.lang.Double d7 = derivedData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test369"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getRsRaw();
    java.lang.Double d6 = derivedData0.getSma23();
    double d7 = derivedData0.getLrAngle260();
    java.lang.Double d8 = derivedData0.getSma65();
    double d9 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test370"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getTypicalPriceData();
    tickerData0.rSort();
    double d4 = tickerData0.getChg();
    double[] d_array5 = tickerData0.getOiData();
    tickerData0.rSort();
    java.lang.Double d7 = tickerData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d7);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test371"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    double[] d_array5 = tickerData0.getOiData();
    double d6 = tickerData0.getDiMinus();
    tickerData0.setTicker("hi!");
    double d9 = tickerData0.getChg260();
    double d10 = tickerData0.getAvgVol20();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test372"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSma65();
    double d3 = derivedData0.getDiPlus();
    double d4 = derivedData0.getAtr23();
    java.lang.Double d5 = derivedData0.getSmaPerc260();
    double d6 = derivedData0.getLr260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test373"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    tickerData0.setTicker("java.util.GregorianCalendar[time=-62164808652443,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=557,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d21 = dailyData20.getClose();
    double d22 = dailyData20.getDailyPercentChg();
    double d23 = dailyData20.getDailyPercentRng();
    dailyData20.setTrueHigh((double)(short)(-1));
    dailyData20.setDailyChg(100.0d);
    java.util.Calendar calendar28 = dailyData20.getDate();
    net.ajaskey.market.ta.DailyData dailyData29 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar28);
    net.ajaskey.market.misc.Utils.printCalendar(calendar28);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str35 = net.ajaskey.market.misc.Utils.stringDate(calendar34);
    java.lang.String str36 = net.ajaskey.market.misc.Utils.getDayName(calendar34);
    boolean b37 = net.ajaskey.market.misc.Utils.sameDate(calendar28, calendar34);
    java.util.Calendar calendar38 = null;
    java.util.Calendar calendar39 = net.ajaskey.market.misc.Utils.makeCopy(calendar38);
    net.ajaskey.market.ta.TickerData tickerData40 = new net.ajaskey.market.ta.TickerData();
    double[] d_array41 = tickerData40.getTrueLowData();
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate(calendar45);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate2(calendar45);
    net.ajaskey.market.ta.DailyData dailyData48 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData40, calendar45);
    double d49 = tickerData40.getAtrPercent23();
    tickerData40.fillDataArrays((int)(short)100, false);
    double[] d_array53 = tickerData40.getTrueHighData();
    java.util.Calendar calendar57 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate(calendar57);
    java.lang.String str59 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar57);
    java.util.Calendar calendar64 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str65 = net.ajaskey.market.misc.Utils.stringDate(calendar64);
    java.lang.String str66 = net.ajaskey.market.misc.Utils.stringDate2(calendar64);
    net.ajaskey.market.ta.TickerData tickerData73 = new net.ajaskey.market.ta.TickerData("hi!", calendar64, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar74 = net.ajaskey.market.misc.Utils.makeCopy(calendar64);
    boolean b75 = net.ajaskey.market.misc.Utils.sameDate(calendar57, calendar74);
    net.ajaskey.market.ta.DailyData dailyData76 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData40, calendar74);
    boolean b77 = net.ajaskey.market.misc.Utils.sameDate(calendar39, calendar74);
    net.ajaskey.market.ta.DailyData dailyData84 = new net.ajaskey.market.ta.DailyData(calendar39, (double)(-1L), (double)(byte)1, (double)(byte)100, (double)'#', (double)(-1L), (double)1.0f);
    boolean b85 = net.ajaskey.market.misc.Utils.sameDate(calendar28, calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d21 + "' != '" + 1.0d+ "'", d21.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "30-Jan-0001"+ "'", str35.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "unknown-day"+ "'", str36.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "30-Jan-0001"+ "'", str46.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Fri 30-Jan-0001"+ "'", str47.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d49 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "30-Jan-0001"+ "'", str58.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "java.util.GregorianCalendar[time=-62164808597504,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=496,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str59.equals("java.util.GregorianCalendar[time=-62164808597504,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=496,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "30-Jan-0001"+ "'", str65.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Fri 30-Jan-0001"+ "'", str66.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test374"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    java.util.Calendar calendar8 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str9 = net.ajaskey.market.misc.Utils.stringDate(calendar8);
    java.lang.String str10 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar8);
    net.ajaskey.market.ta.TickerData tickerData11 = null;
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getTrueLowData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate2(calendar17);
    net.ajaskey.market.ta.DailyData dailyData20 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData12, calendar17);
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, calendar17);
    boolean b22 = net.ajaskey.market.misc.Utils.sameYear(calendar8, calendar17);
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.stringDate2(calendar26);
    int i29 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar17, calendar26);
    java.util.Calendar calendar33 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str34 = net.ajaskey.market.misc.Utils.stringDate(calendar33);
    net.ajaskey.market.ta.DailyData dailyData41 = new net.ajaskey.market.ta.DailyData(calendar33, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b46 = net.ajaskey.market.misc.Utils.sameYear(calendar33, calendar45);
    long long47 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar26, calendar45);
    net.ajaskey.market.ta.DailyData dailyData54 = new net.ajaskey.market.ta.DailyData(calendar45, (double)100L, 0.0d, 32.0d, (double)2016L, (double)(-1L), (double)100.0f);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate2(calendar45);
    net.ajaskey.market.ta.DailyData dailyData62 = new net.ajaskey.market.ta.DailyData(calendar45, 100.0d, (double)'4', (double)(byte)0, (double)1, (double)10L, (double)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "30-Jan-0001"+ "'", str9.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62164808597410,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=590,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str10.equals("java.util.GregorianCalendar[time=-62164808597410,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=590,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Fri 30-Jan-0001"+ "'", str19.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Fri 30-Jan-0001"+ "'", str28.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "30-Jan-0001"+ "'", str34.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Fri 30-Jan-0001"+ "'", str55.equals("Fri 30-Jan-0001"));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test375"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getChg260();
    double[] d_array9 = tickerData0.getOpenData();
    double d10 = tickerData0.getPriceOffHigh260();
    double d11 = tickerData0.getCurrentPrice();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, false);
    double d14 = tickerData0.getAdx();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test376"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    double d3 = tickerData0.getDiMinus();
    net.ajaskey.market.ta.TickerData tickerData4 = new net.ajaskey.market.ta.TickerData();
    double[] d_array5 = tickerData4.getVolumeData();
    double d6 = tickerData4.getChg65();
    double[] d_array7 = tickerData4.getOiData();
    double d8 = tickerData4.getMfi65();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar12);
    net.ajaskey.market.ta.TickerData tickerData15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData15, calendar21);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar21);
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate(calendar30);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate2(calendar30);
    int i33 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData4, calendar21, calendar30);
    java.util.Calendar calendar37 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate(calendar37);
    net.ajaskey.market.ta.DailyData dailyData45 = new net.ajaskey.market.ta.DailyData(calendar37, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar49 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b50 = net.ajaskey.market.misc.Utils.sameYear(calendar37, calendar49);
    long long51 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar30, calendar49);
    java.util.Calendar calendar55 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar49, calendar55);
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808597363,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=637,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808597363,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=637,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "30-Jan-0001"+ "'", str31.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Fri 30-Jan-0001"+ "'", str32.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "30-Jan-0001"+ "'", str38.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long51 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test377"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setChg260(0.0d);
    double d8 = industryData0.getAvgVol();
    industryData0.setAvgVol((double)2017L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test378"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    java.lang.String str13 = tickerData0.toString();
    double d14 = tickerData0.getMfi23();
    double d15 = tickerData0.getCurrentPrice();
    net.ajaskey.market.ta.TrendType trendType16 = tickerData0.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "null\tnull\tnull\r\n"+ "'", str13.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType16);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test379"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.util.Calendar[] calendar_array1 = tickerData0.getDateData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array1);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test380"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getLrSlope260();
    double d6 = derivedData0.getCurrentPrice();
    double d7 = derivedData0.getAvgVol20();
    double d8 = derivedData0.getMfi130();
    double d9 = derivedData0.getRsi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test381"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData12 = new net.ajaskey.market.ta.TickerData();
    double[] d_array13 = tickerData12.getVolumeData();
    double d14 = tickerData12.getChg65();
    double[] d_array15 = tickerData12.getOiData();
    double d16 = tickerData12.getMfi65();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar20);
    net.ajaskey.market.ta.TickerData tickerData23 = null;
    net.ajaskey.market.ta.TickerData tickerData24 = new net.ajaskey.market.ta.TickerData();
    double[] d_array25 = tickerData24.getTrueLowData();
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData24, calendar29);
    int i33 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData23, calendar29);
    boolean b34 = net.ajaskey.market.misc.Utils.sameYear(calendar20, calendar29);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    int i41 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData12, calendar29, calendar38);
    java.util.Calendar calendar46 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate(calendar46);
    java.lang.String str48 = net.ajaskey.market.misc.Utils.stringDate2(calendar46);
    net.ajaskey.market.ta.TickerData tickerData55 = new net.ajaskey.market.ta.TickerData("hi!", calendar46, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar38, calendar46);
    double d57 = tickerData0.getCurrentPrice();
    double[] d_array58 = tickerData0.getVolumeData();
    // The following exception was thrown during execution in test generation
    try {
    double d60 = tickerData0.getVolume((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=-62164808597317,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=683,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str22.equals("java.util.GregorianCalendar[time=-62164808597317,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=683,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Fri 30-Jan-0001"+ "'", str40.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "30-Jan-0001"+ "'", str47.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Fri 30-Jan-0001"+ "'", str48.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array58);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test382"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    tickerData0.fillDataArrays((int)' ', false);
    double d11 = tickerData0.getPriceOffHigh260();
    double d12 = tickerData0.getRsRaw();
    double d13 = tickerData0.getCurrentPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test383"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSma23();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getChg();
    java.lang.Double d6 = derivedData0.getSmaPerc130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test384"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getPriceOffLow260();
    double d4 = derivedData0.getPriceInRng260();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getRsStRaw();
    java.lang.Double d7 = derivedData0.getSma260();
    double d8 = derivedData0.getAtr23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test385"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    double d3 = tickerData0.getPriceInRng260();
    int i7 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(byte)100, (int)(short)(-1), (int)(byte)100);
    net.ajaskey.market.ta.TrendType trendType8 = tickerData0.getSma65Trend();
    java.lang.Double d9 = tickerData0.getSmaPerc65();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test386"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    java.lang.Double d6 = derivedData0.getSma260();
    double d7 = derivedData0.getRsRaw();
    double d8 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test387"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    industryData0.setPriceInRange260((double)10.0f);
    java.lang.String str5 = industryData0.getTicker();
    double d6 = industryData0.getChg260();
    industryData0.setAvgVol((double)(byte)100);
    industryData0.setRank((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test388"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getChg260();
    double[] d_array9 = tickerData0.getOpenData();
    double d10 = tickerData0.getPriceOffHigh260();
    double d11 = tickerData0.getCurrentPrice();
    double d12 = tickerData0.getLow260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test389"); }


    net.ajaskey.market.ta.TickerData tickerData1 = new net.ajaskey.market.ta.TickerData();
    double[] d_array2 = tickerData1.getTrueLowData();
    java.util.Calendar calendar6 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate(calendar6);
    java.lang.String str8 = net.ajaskey.market.misc.Utils.stringDate2(calendar6);
    net.ajaskey.market.ta.DailyData dailyData9 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar6);
    double d10 = tickerData1.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType11 = tickerData1.getSma130Trend();
    double[] d_array12 = tickerData1.getVolumeData();
    int i16 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData1, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData("hi!", calendar21, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData31 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData1, calendar21);
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    net.ajaskey.market.ta.DailyData dailyData43 = new net.ajaskey.market.ta.DailyData(calendar35, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str44 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    long long45 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar21, calendar35);
    net.ajaskey.market.ta.TickerData tickerData52 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808650214,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=786,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar21, (double)(byte)0, (double)1, (double)100, (double)'4', (double)10L, (double)1.0f);
    java.lang.String str53 = tickerData52.getTickerExchange();
    double[] d_array54 = tickerData52.getTrueLowData();
    double[] d_array55 = tickerData52.getTrueHighData();
    double[] d_array56 = tickerData52.getOiData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "30-Jan-0001"+ "'", str7.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Fri 30-Jan-0001"+ "'", str8.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Fri 30-Jan-0001"+ "'", str44.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Unknown"+ "'", str53.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array56);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test390"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setChg260(0.0d);
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str10 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test391"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    double[] d_array5 = tickerData0.getTrueLowData();
    double d6 = tickerData0.getHigh260();
    double d7 = tickerData0.getAdx();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.makeCopy(calendar11);
    net.ajaskey.market.ta.DailyData dailyData13 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar11);
    net.ajaskey.market.ta.TickerData tickerData14 = new net.ajaskey.market.ta.TickerData();
    double[] d_array15 = tickerData14.getTrueLowData();
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    net.ajaskey.market.ta.TickerData tickerData20 = new net.ajaskey.market.ta.TickerData();
    double[] d_array21 = tickerData20.getTrueLowData();
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate2(calendar25);
    net.ajaskey.market.ta.DailyData dailyData28 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData20, calendar25);
    double d29 = tickerData20.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType30 = tickerData20.getSma130Trend();
    double[] d_array31 = tickerData20.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData32 = new net.ajaskey.market.ta.TickerData();
    double[] d_array33 = tickerData32.getVolumeData();
    double d34 = tickerData32.getChg65();
    double[] d_array35 = tickerData32.getOiData();
    double d36 = tickerData32.getMfi65();
    java.util.Calendar calendar40 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str41 = net.ajaskey.market.misc.Utils.stringDate(calendar40);
    java.lang.String str42 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar40);
    net.ajaskey.market.ta.TickerData tickerData43 = null;
    net.ajaskey.market.ta.TickerData tickerData44 = new net.ajaskey.market.ta.TickerData();
    double[] d_array45 = tickerData44.getTrueLowData();
    java.util.Calendar calendar49 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str50 = net.ajaskey.market.misc.Utils.stringDate(calendar49);
    java.lang.String str51 = net.ajaskey.market.misc.Utils.stringDate2(calendar49);
    net.ajaskey.market.ta.DailyData dailyData52 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData44, calendar49);
    int i53 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData43, calendar49);
    boolean b54 = net.ajaskey.market.misc.Utils.sameYear(calendar40, calendar49);
    java.util.Calendar calendar58 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str59 = net.ajaskey.market.misc.Utils.stringDate(calendar58);
    java.lang.String str60 = net.ajaskey.market.misc.Utils.stringDate2(calendar58);
    int i61 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData32, calendar49, calendar58);
    java.util.Calendar calendar66 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str67 = net.ajaskey.market.misc.Utils.stringDate(calendar66);
    java.lang.String str68 = net.ajaskey.market.misc.Utils.stringDate2(calendar66);
    net.ajaskey.market.ta.TickerData tickerData75 = new net.ajaskey.market.ta.TickerData("hi!", calendar66, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i76 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData20, calendar58, calendar66);
    int i77 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData14, calendar19, calendar66);
    java.util.Calendar calendar78 = net.ajaskey.market.misc.Utils.makeCopy(calendar66);
    java.util.Calendar calendar82 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str83 = net.ajaskey.market.misc.Utils.stringDate(calendar82);
    net.ajaskey.market.ta.DailyData dailyData90 = new net.ajaskey.market.ta.DailyData(calendar82, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d91 = dailyData90.getClose();
    double d92 = dailyData90.getDailyPercentChg();
    java.util.Calendar calendar93 = dailyData90.getDate();
    boolean b94 = net.ajaskey.market.misc.Utils.sameMonth(calendar78, calendar93);
    boolean b95 = net.ajaskey.market.misc.Utils.sameYear(calendar11, calendar93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Fri 30-Jan-0001"+ "'", str27.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d36 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "30-Jan-0001"+ "'", str41.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "java.util.GregorianCalendar[time=-62164808597254,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=746,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str42.equals("java.util.GregorianCalendar[time=-62164808597254,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=42,MILLISECOND=746,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "30-Jan-0001"+ "'", str50.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Fri 30-Jan-0001"+ "'", str51.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "30-Jan-0001"+ "'", str59.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Fri 30-Jan-0001"+ "'", str60.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "30-Jan-0001"+ "'", str67.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Fri 30-Jan-0001"+ "'", str68.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "30-Jan-0001"+ "'", str83.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d91 + "' != '" + 1.0d+ "'", d91.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d92 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test392"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    double d1 = industryData0.getRawRs();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test393"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("52");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test394"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getLrInt260();
    java.lang.Double d7 = derivedData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test395"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getMfi23();
    java.lang.Double d5 = derivedData0.getSma130();
    double d6 = derivedData0.getLow260();
    java.lang.Double d7 = derivedData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test396"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    net.ajaskey.market.ta.DailyData dailyData13 = new net.ajaskey.market.ta.DailyData(calendar5, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    tickerData0.addData(dailyData13);
    java.lang.Double d15 = dailyData13.getClose();
    java.lang.Double d16 = dailyData13.getLow();
    dailyData13.setTrueLow(0.0d);
    java.lang.Double d19 = dailyData13.getHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 1.0d+ "'", d15.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d19 + "' != '" + 10.0d+ "'", d19.equals(10.0d));

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test397"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.lang.String str14 = dailyData11.toString();
    dailyData11.setTrueLow((double)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str14.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test398"); }


    java.util.Map<java.lang.String,java.lang.Integer> map_str_i0 = net.ajaskey.market.misc.Utils.mapDays;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(map_str_i0);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test399"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    industryData0.setTicker("0");
    long long5 = industryData0.getShares();
    java.lang.String str6 = industryData0.getExch();
    industryData0.setName("java.util.GregorianCalendar[time=-62164808651540,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=460,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test400"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808604488,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=35,MILLISECOND=512,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (int)'4');
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test401"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    double d2 = derivedData0.getAtrPercent23();
    double d3 = derivedData0.getAtrPercent23();
    double d4 = derivedData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test402"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getHigh260();
    double d5 = derivedData0.getChg();
    net.ajaskey.market.ta.TickerData tickerData6 = new net.ajaskey.market.ta.TickerData();
    double[] d_array7 = tickerData6.getTrueLowData();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate(calendar11);
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate2(calendar11);
    net.ajaskey.market.ta.DailyData dailyData14 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData6, calendar11);
    double d15 = tickerData6.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType16 = tickerData6.getSma130Trend();
    double[] d_array17 = tickerData6.getVolumeData();
    int i21 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData6, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    double[] d_array22 = tickerData6.getTrueHighData();
    double d23 = tickerData6.getLrInt260();
    double d24 = tickerData6.getMfi65();
    double d25 = tickerData6.getAvgVol65();
    double d26 = tickerData6.getPriceInRng260();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData6);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "30-Jan-0001"+ "'", str12.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Fri 30-Jan-0001"+ "'", str13.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test403"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    tickerData0.rSort();
    java.util.Calendar[] calendar_array4 = tickerData0.getDateData();
    double d5 = tickerData0.getChg130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(calendar_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test404"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    double d2 = industryData0.getRawRs();
    industryData0.setPriceInRange260((double)10.0f);
    java.lang.String str5 = industryData0.getSector();
    java.lang.String str6 = industryData0.getRanks();
    industryData0.setAvgVol((double)0);
    double d9 = industryData0.getRawRs();
    industryData0.setPriceInRange260(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test405"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRank((int)(byte)10);
    industryData0.setShares((long)10);
    industryData0.setPriceInRange260((double)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test406"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getHigh260();
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOpenData();
    net.ajaskey.market.ta.TickerData tickerData11 = new net.ajaskey.market.ta.TickerData();
    double[] d_array12 = tickerData11.getVolumeData();
    double d13 = tickerData11.getChg65();
    int i17 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData11, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType18 = tickerData11.getSma130Trend();
    double d19 = tickerData11.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType20 = tickerData11.getSma130Trend();
    double[] d_array21 = tickerData11.getTypicalPriceData();
    java.util.Calendar calendar25 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate(calendar25);
    net.ajaskey.market.ta.DailyData dailyData33 = new net.ajaskey.market.ta.DailyData(calendar25, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d34 = dailyData33.getTrueHigh();
    dailyData33.setTrueHigh((double)(short)0);
    long long37 = dailyData33.getDaysSinceBase();
    double d38 = dailyData33.getTrueHigh();
    java.util.Calendar calendar39 = dailyData33.getDate();
    net.ajaskey.market.ta.DailyData dailyData40 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData11, calendar39);
    net.ajaskey.market.ta.TickerData tickerData41 = null;
    java.util.Calendar calendar45 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate(calendar45);
    net.ajaskey.market.ta.DailyData dailyData53 = new net.ajaskey.market.ta.DailyData(calendar45, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    net.ajaskey.market.ta.DailyData dailyData54 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData41, calendar45);
    java.util.Calendar calendar58 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str59 = net.ajaskey.market.misc.Utils.stringDate(calendar58);
    net.ajaskey.market.ta.DailyData dailyData66 = new net.ajaskey.market.ta.DailyData(calendar58, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar67 = dailyData66.getDate();
    boolean b68 = net.ajaskey.market.misc.Utils.sameMonth(calendar45, calendar67);
    boolean b69 = net.ajaskey.market.misc.Utils.sameDate(calendar39, calendar67);
    net.ajaskey.market.ta.DailyData dailyData70 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar67);
    net.ajaskey.market.misc.Utils.printCalendar(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "30-Jan-0001"+ "'", str26.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long37 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d38 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "30-Jan-0001"+ "'", str46.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "30-Jan-0001"+ "'", str59.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData70);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test407"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setPriceInRange260((double)(byte)100);
    industryData0.setSlope(0.0d);
    java.lang.String str10 = industryData0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test408"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    long long8 = industryData0.getShares();
    industryData0.setShares(693934L);
    industryData0.setAvgVol((double)(byte)10);
    java.lang.String str13 = industryData0.getMarketCap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test409"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    java.lang.Double d6 = derivedData0.getSma260();
    double d7 = derivedData0.getPriceOffHigh260();
    java.lang.Double d8 = derivedData0.getSmaPerc65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test410"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank(0);
    double d8 = industryData0.getRawRsSt();
    java.lang.String str9 = industryData0.getTicker();
    // The following exception was thrown during execution in test generation
    try {
    double d11 = industryData0.getSlope((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test411"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    dailyData11.setTrueHigh((double)(short)0);
    long long15 = dailyData11.getDaysSinceBase();
    double d16 = dailyData11.getTrueLow();
    long long17 = dailyData11.getDaysSinceBase();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 693934L);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test412"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    double d3 = derivedData0.getMfi14();
    java.lang.Double d4 = derivedData0.getSmaPerc23();
    double d5 = derivedData0.getPriceOffHigh260();
    double d6 = derivedData0.getLow260();
    double d7 = derivedData0.getAvgVol65();
    double d8 = derivedData0.getAvgVol20();
    java.lang.Double d9 = derivedData0.getSma130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test413"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRawRs((double)100);
    double d6 = industryData0.getChg260();
    industryData0.setName("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=100,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=100,DAY_OF_YEAR=190,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=16,MILLISECOND=468,ZONE_OFFSET=-25200000,DST_OFFSET=3600000]\n  Year         : 108\n  Month        : 7\n  Day of Month : 8\n  Day of Year  : 221\n  Week of Year : 33\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == (-1.0d));

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test414"); }


    java.lang.String str1 = net.ajaskey.market.misc.Utils.formatInt((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "100"+ "'", str1.equals("100"));

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test415"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d12 = dailyData11.getTrueHigh();
    double d13 = dailyData11.getDailyRng();
    java.lang.Double d14 = dailyData11.getVolume();
    java.lang.Double d15 = dailyData11.getVolume();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 0.0d+ "'", d14.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test416"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    double d3 = tickerData0.getMfi23();
    java.lang.Double d4 = tickerData0.getSmaPerc23();
    double d5 = tickerData0.getChg23();
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str10 = net.ajaskey.market.misc.Utils.stringDate(calendar9);
    net.ajaskey.market.ta.DailyData dailyData17 = new net.ajaskey.market.ta.DailyData(calendar9, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d18 = dailyData17.getTrueHigh();
    dailyData17.setTrueHigh((double)(short)0);
    long long21 = dailyData17.getDaysSinceBase();
    double d22 = dailyData17.getTrueLow();
    double d23 = dailyData17.getDailyPercentChg();
    java.lang.Double d24 = dailyData17.getClose();
    dailyData17.setTrueLow((double)'a');
    tickerData0.addData(dailyData17);
    net.ajaskey.market.ta.methods.TaMethods taMethods28 = tickerData0.getTaMethods();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "30-Jan-0001"+ "'", str10.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d24 + "' != '" + 1.0d+ "'", d24.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods28);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test417"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setChg260((double)10);
    industryData0.setPriceInRange260((double)(byte)100);
    double d8 = industryData0.getRawRs();
    industryData0.setAvgVol((double)100L);
    industryData0.setName("unknown-day");
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808640099,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=59,MILLISECOND=901,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.util.List<java.lang.Integer> list_i15 = industryData0.getRank();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i15);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test418"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    java.lang.Double d6 = derivedData0.getSma260();
    double d7 = derivedData0.getMfi23();
    double d8 = derivedData0.getAtr23();
    double d9 = derivedData0.getHigh260();
    double d10 = derivedData0.getLrSlope260();
    double d11 = derivedData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test419"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    net.ajaskey.market.ta.TrendType trendType1 = tickerData0.getSma130Trend();
    java.lang.String str2 = tickerData0.getTickerName();
    double d3 = tickerData0.getChg23();
    double d4 = tickerData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test420"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getTrueLow();
    java.lang.Double d14 = dailyData11.getVolume();
    java.util.Calendar calendar15 = dailyData11.getDate();
    java.lang.Double d16 = dailyData11.getOi();
    java.lang.Double d17 = dailyData11.getHigh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d14 + "' != '" + 0.0d+ "'", d14.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d17 + "' != '" + 10.0d+ "'", d17.equals(10.0d));

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test421"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRawRs((double)100);
    java.util.List<java.lang.Integer> list_i6 = industryData0.getRank();
    java.lang.String str7 = industryData0.getMarketCap();
    double d8 = industryData0.getAvgVol();
    java.lang.String str9 = industryData0.getSector();
    industryData0.setRawRsSt((double)100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test422"); }


    net.ajaskey.market.ta.input.ParseData.setMIN_PRICE((-1.0d));

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test423"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getChg260();
    double d9 = tickerData0.getAtr23();
    double d10 = tickerData0.getMfi65();
    double d11 = tickerData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test424"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    long long1 = industryData0.getShares();
    industryData0.setRawRsSt((double)0);
    java.lang.String str4 = industryData0.getExch();
    long long5 = industryData0.getShares();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test425"); }


    net.ajaskey.market.misc.Utils.TAB = "java.util.GregorianCalendar[time=-62164808613749,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=26,MILLISECOND=251,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n";

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test426"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    double d13 = tickerData0.getMfi23();
    double d14 = tickerData0.getAdx();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test427"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getPriceOffHigh260();
    java.lang.Double d6 = derivedData0.getSma260();
    java.lang.Double d7 = derivedData0.getSma130();
    double d8 = derivedData0.getChg23();
    double d9 = derivedData0.getRsi14();
    java.lang.Double d10 = derivedData0.getSmaPerc260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d10 + "' != '" + 0.0d+ "'", d10.equals(0.0d));

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test428"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getChg260();
    java.lang.Double d5 = tickerData0.getSmaPerc23();
    java.lang.Double d6 = tickerData0.getSma65();
    net.ajaskey.market.ta.input.Fundamentals fundamentals7 = tickerData0.getFundies();
    double d8 = tickerData0.getLrSlope260();
    double d9 = tickerData0.getChg65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test429"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.util.Calendar calendar14 = dailyData11.getDate();
    dailyData11.setTrueHigh((-1.0d));
    dailyData11.setVolume((double)(byte)100);
    double d19 = dailyData11.getDailyChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test430"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData4 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, (int)(byte)1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData7 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData10 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData12 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0, 10);
    net.ajaskey.market.ta.TickerData.clearTickerData(list_tickerData12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData12);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test431"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType10 = tickerData0.getSma130Trend();
    double[] d_array11 = tickerData0.getVolumeData();
    double d12 = tickerData0.getMfi23();
    double d13 = tickerData0.getMfi130();
    java.util.Calendar calendar18 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str19 = net.ajaskey.market.misc.Utils.stringDate(calendar18);
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate2(calendar18);
    net.ajaskey.market.ta.TickerData tickerData27 = new net.ajaskey.market.ta.TickerData("hi!", calendar18, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    double d28 = tickerData27.getAvgVol20();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData27);
    int i30 = tickerData0.getDataCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "30-Jan-0001"+ "'", str19.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Fri 30-Jan-0001"+ "'", str20.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test432"); }


    java.util.ArrayList<java.lang.String> arraylist_str2 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array4 = new java.lang.String[] { "" };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str2, str_array4);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData6 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData8 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str2, (int)(byte)1);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData9 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str2);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str2);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData11 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str2);
    net.ajaskey.market.ta.TickerData tickerData12 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808631563,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=8,MILLISECOND=437,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData11);
    net.ajaskey.market.ta.TickerData tickerData13 = net.ajaskey.market.ta.TickerData.getFromList("java.util.GregorianCalendar[time=-62164808598955,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=41,MILLISECOND=45,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", list_tickerData11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(tickerData13);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test433"); }


    java.util.Map<java.lang.String,java.lang.Integer> map_str_i0 = net.ajaskey.market.misc.Utils.mapDays;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapDays = map_str_i0;
    net.ajaskey.market.misc.Utils.mapNames = map_str_i0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(map_str_i0);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test434"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    net.ajaskey.market.ta.DailyData dailyData12 = new net.ajaskey.market.ta.DailyData(calendar4, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d13 = dailyData12.getClose();
    double d14 = dailyData12.getTrueLow();
    double d15 = dailyData12.getDailyRng();
    java.lang.Double d16 = dailyData12.getOpen();
    double d17 = dailyData12.getTrueLow();
    java.util.Calendar calendar18 = dailyData12.getDate();
    net.ajaskey.market.ta.TickerData tickerData25 = new net.ajaskey.market.ta.TickerData("java.util.GregorianCalendar[time=-62164808633435,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=6,MILLISECOND=565,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", calendar18, (double)(-1L), 1.0d, (double)100, (double)'#', (double)(byte)0, (double)693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 1.0d+ "'", d13.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar18);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test435"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getChg65();
    tickerData0.fillDataArrays((int)(byte)(-1), false);
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getVolumeData();
    double d9 = tickerData7.getChg65();
    double[] d_array10 = tickerData7.getOiData();
    int i14 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData7, (int)'#', (int)(short)10, (int)(byte)0);
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData7);
    double d16 = tickerData0.getMfi14();
    java.lang.Double d17 = tickerData0.getSmaPerc130();
    double d18 = tickerData0.getLrSlope260();
    double d19 = tickerData0.getLrInt260();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = tickerData0.getDailyDataString((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test436"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    industryData0.setName("java.util.GregorianCalendar[time=-62164808651587,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=48,MILLISECOND=413,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setSlope(10.0d);
    java.lang.String str12 = industryData0.getExch();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test437"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808652055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=47,MILLISECOND=945,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setChg260(10.0d);
    industryData0.setRank(10);
    industryData0.setRank((int)'4');
    industryData0.setRawRs((double)1L);
    long long14 = industryData0.getfShares();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 0L);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test438"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    double d12 = tickerData0.getAvgVol65();
    double d13 = tickerData0.getMfi130();
    net.ajaskey.market.ta.TickerData tickerData14 = new net.ajaskey.market.ta.TickerData();
    double[] d_array15 = tickerData14.getTrueLowData();
    java.util.Calendar calendar19 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str20 = net.ajaskey.market.misc.Utils.stringDate(calendar19);
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate2(calendar19);
    net.ajaskey.market.ta.DailyData dailyData22 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData14, calendar19);
    double d23 = tickerData14.getAtrPercent23();
    tickerData14.fillDataArrays((int)(short)100, false);
    double d27 = tickerData14.getPriceOffLow260();
    java.util.Calendar calendar28 = null;
    net.ajaskey.market.ta.TickerData tickerData29 = new net.ajaskey.market.ta.TickerData();
    double[] d_array30 = tickerData29.getTrueLowData();
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str35 = net.ajaskey.market.misc.Utils.stringDate(calendar34);
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate2(calendar34);
    net.ajaskey.market.ta.DailyData dailyData37 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData29, calendar34);
    boolean b38 = net.ajaskey.market.misc.Utils.sameYear(calendar28, calendar34);
    net.ajaskey.market.ta.DailyData dailyData39 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData14, calendar34);
    java.lang.String str40 = net.ajaskey.market.misc.Utils.getDayName(calendar34);
    java.util.Calendar calendar41 = net.ajaskey.market.misc.Utils.makeCopy(calendar34);
    net.ajaskey.market.ta.TickerData tickerData42 = new net.ajaskey.market.ta.TickerData();
    double[] d_array43 = tickerData42.getVolumeData();
    double d44 = tickerData42.getChg65();
    double[] d_array45 = tickerData42.getOiData();
    double d46 = tickerData42.getMfi65();
    java.util.Calendar calendar50 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str51 = net.ajaskey.market.misc.Utils.stringDate(calendar50);
    java.lang.String str52 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar50);
    net.ajaskey.market.ta.TickerData tickerData53 = null;
    net.ajaskey.market.ta.TickerData tickerData54 = new net.ajaskey.market.ta.TickerData();
    double[] d_array55 = tickerData54.getTrueLowData();
    java.util.Calendar calendar59 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str60 = net.ajaskey.market.misc.Utils.stringDate(calendar59);
    java.lang.String str61 = net.ajaskey.market.misc.Utils.stringDate2(calendar59);
    net.ajaskey.market.ta.DailyData dailyData62 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData54, calendar59);
    int i63 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData53, calendar59);
    boolean b64 = net.ajaskey.market.misc.Utils.sameYear(calendar50, calendar59);
    java.util.Calendar calendar68 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str69 = net.ajaskey.market.misc.Utils.stringDate(calendar68);
    java.lang.String str70 = net.ajaskey.market.misc.Utils.stringDate2(calendar68);
    int i71 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData42, calendar59, calendar68);
    java.util.Calendar calendar75 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str76 = net.ajaskey.market.misc.Utils.stringDate(calendar75);
    net.ajaskey.market.ta.DailyData dailyData83 = new net.ajaskey.market.ta.DailyData(calendar75, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar87 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b88 = net.ajaskey.market.misc.Utils.sameYear(calendar75, calendar87);
    long long89 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar68, calendar87);
    java.lang.String str90 = net.ajaskey.market.misc.Utils.stringDate2(calendar68);
    int i91 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar41, calendar68);
    double d92 = tickerData0.getChg260();
    java.lang.Double d93 = tickerData0.getSmaPerc23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "30-Jan-0001"+ "'", str20.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Fri 30-Jan-0001"+ "'", str21.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "30-Jan-0001"+ "'", str35.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Fri 30-Jan-0001"+ "'", str36.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "unknown-day"+ "'", str40.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "30-Jan-0001"+ "'", str51.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "java.util.GregorianCalendar[time=-62164808596755,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=245,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str52.equals("java.util.GregorianCalendar[time=-62164808596755,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=245,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "30-Jan-0001"+ "'", str60.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Fri 30-Jan-0001"+ "'", str61.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "30-Jan-0001"+ "'", str69.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Fri 30-Jan-0001"+ "'", str70.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "30-Jan-0001"+ "'", str76.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long89 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Fri 30-Jan-0001"+ "'", str90.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d92 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d93);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test439"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    net.ajaskey.market.ta.TickerData tickerData6 = new net.ajaskey.market.ta.TickerData();
    double[] d_array7 = tickerData6.getTrueLowData();
    java.util.Calendar calendar11 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate(calendar11);
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate2(calendar11);
    net.ajaskey.market.ta.DailyData dailyData14 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData6, calendar11);
    double d15 = tickerData6.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType16 = tickerData6.getSma130Trend();
    double[] d_array17 = tickerData6.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData18 = new net.ajaskey.market.ta.TickerData();
    double[] d_array19 = tickerData18.getVolumeData();
    double d20 = tickerData18.getChg65();
    double[] d_array21 = tickerData18.getOiData();
    double d22 = tickerData18.getMfi65();
    java.util.Calendar calendar26 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str27 = net.ajaskey.market.misc.Utils.stringDate(calendar26);
    java.lang.String str28 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar26);
    net.ajaskey.market.ta.TickerData tickerData29 = null;
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    int i39 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData29, calendar35);
    boolean b40 = net.ajaskey.market.misc.Utils.sameYear(calendar26, calendar35);
    java.util.Calendar calendar44 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str45 = net.ajaskey.market.misc.Utils.stringDate(calendar44);
    java.lang.String str46 = net.ajaskey.market.misc.Utils.stringDate2(calendar44);
    int i47 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData18, calendar35, calendar44);
    java.util.Calendar calendar52 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str53 = net.ajaskey.market.misc.Utils.stringDate(calendar52);
    java.lang.String str54 = net.ajaskey.market.misc.Utils.stringDate2(calendar52);
    net.ajaskey.market.ta.TickerData tickerData61 = new net.ajaskey.market.ta.TickerData("hi!", calendar52, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    int i62 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData6, calendar44, calendar52);
    int i63 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar5, calendar52);
    java.lang.String str64 = net.ajaskey.market.misc.Utils.stringDate2(calendar52);
    net.ajaskey.market.misc.Utils.printCalendar(calendar52);
    java.util.Calendar calendar69 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar73 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str74 = net.ajaskey.market.misc.Utils.stringDate(calendar73);
    java.lang.String str75 = net.ajaskey.market.misc.Utils.stringDate2(calendar73);
    boolean b76 = net.ajaskey.market.misc.Utils.sameYear(calendar69, calendar73);
    java.lang.String str77 = net.ajaskey.market.misc.Utils.getString(calendar73);
    java.lang.String str78 = net.ajaskey.market.misc.Utils.getString(calendar73);
    java.lang.String str79 = net.ajaskey.market.misc.Utils.getString(calendar73);
    java.util.Calendar calendar80 = net.ajaskey.market.misc.Utils.makeCopy(calendar73);
    java.lang.String str81 = net.ajaskey.market.misc.Utils.getMonthName(calendar80);
    boolean b82 = net.ajaskey.market.misc.Utils.sameYear(calendar52, calendar80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "30-Jan-0001"+ "'", str12.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Fri 30-Jan-0001"+ "'", str13.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "30-Jan-0001"+ "'", str27.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=-62164808596683,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=317,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str28.equals("java.util.GregorianCalendar[time=-62164808596683,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=317,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "30-Jan-0001"+ "'", str45.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Fri 30-Jan-0001"+ "'", str46.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "30-Jan-0001"+ "'", str53.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Fri 30-Jan-0001"+ "'", str54.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Fri 30-Jan-0001"+ "'", str64.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "30-Jan-0001"+ "'", str74.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Fri 30-Jan-0001"+ "'", str75.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "30-Jan-0001"+ "'", str77.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "30-Jan-0001"+ "'", str78.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "30-Jan-0001"+ "'", str79.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "unknown-month"+ "'", str81.equals("unknown-month"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test440"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar12 = dailyData11.getDate();
    double d13 = dailyData11.getDailyPercentRng();
    double d14 = dailyData11.getTrueLow();
    java.lang.Double d15 = dailyData11.getLow();
    java.lang.Double d16 = dailyData11.getLow();
    java.lang.String str17 = dailyData11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d15 + "' != '" + 0.0d+ "'", d15.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d16 + "' != '" + 0.0d+ "'", d16.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"+ "'", str17.equals("Fri 30-Jan-0001  0.00  10.00  0.00  1.00     0     0      0.00      0.00"));

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test441"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d23 = dailyData22.getClose();
    double d24 = dailyData22.getDailyPercentChg();
    tickerData0.addData(dailyData22);
    java.util.Calendar calendar29 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str30 = net.ajaskey.market.misc.Utils.stringDate(calendar29);
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate2(calendar29);
    net.ajaskey.market.ta.DailyData dailyData32 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar29);
    dailyData32.setTrueHigh((double)(byte)100);
    dailyData32.setTrueHigh(52.0d);
    java.lang.Double d37 = dailyData32.getVolume();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d23 + "' != '" + 1.0d+ "'", d23.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "30-Jan-0001"+ "'", str30.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Fri 30-Jan-0001"+ "'", str31.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dailyData32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d37 + "' != '" + 0.0d+ "'", d37.equals(0.0d));

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test442"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str12 = net.ajaskey.market.misc.Utils.stringDate2(calendar3);
    java.util.Calendar calendar13 = net.ajaskey.market.misc.Utils.makeCopy(calendar3);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.getMonthName(calendar13);
    net.ajaskey.market.ta.TickerData tickerData15 = new net.ajaskey.market.ta.TickerData();
    double[] d_array16 = tickerData15.getTrueLowData();
    java.util.Calendar calendar20 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str21 = net.ajaskey.market.misc.Utils.stringDate(calendar20);
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate2(calendar20);
    net.ajaskey.market.ta.DailyData dailyData23 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData15, calendar20);
    double d24 = tickerData15.getAtrPercent23();
    double d25 = tickerData15.getDiPlus();
    double[] d_array26 = tickerData15.getOiData();
    java.lang.String str27 = tickerData15.getTicker();
    double d28 = tickerData15.getPriceOffLow260();
    double[] d_array29 = tickerData15.getTypicalPriceData();
    net.ajaskey.market.ta.TickerData tickerData30 = new net.ajaskey.market.ta.TickerData();
    double[] d_array31 = tickerData30.getTrueLowData();
    java.util.Calendar calendar35 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str36 = net.ajaskey.market.misc.Utils.stringDate(calendar35);
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate2(calendar35);
    net.ajaskey.market.ta.DailyData dailyData38 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar35);
    double d39 = tickerData30.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType40 = tickerData30.getSma130Trend();
    double[] d_array41 = tickerData30.getVolumeData();
    int i45 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData30, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar50 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str51 = net.ajaskey.market.misc.Utils.stringDate(calendar50);
    java.lang.String str52 = net.ajaskey.market.misc.Utils.stringDate2(calendar50);
    net.ajaskey.market.ta.TickerData tickerData59 = new net.ajaskey.market.ta.TickerData("hi!", calendar50, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData60 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData30, calendar50);
    java.util.Calendar calendar64 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str65 = net.ajaskey.market.misc.Utils.stringDate(calendar64);
    net.ajaskey.market.ta.DailyData dailyData72 = new net.ajaskey.market.ta.DailyData(calendar64, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str73 = net.ajaskey.market.misc.Utils.stringDate2(calendar64);
    long long74 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar50, calendar64);
    java.util.Calendar calendar78 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar82 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str83 = net.ajaskey.market.misc.Utils.stringDate(calendar82);
    java.lang.String str84 = net.ajaskey.market.misc.Utils.stringDate2(calendar82);
    boolean b85 = net.ajaskey.market.misc.Utils.sameYear(calendar78, calendar82);
    java.lang.String str86 = net.ajaskey.market.misc.Utils.getString(calendar82);
    boolean b87 = net.ajaskey.market.misc.Utils.sameYear(calendar64, calendar82);
    net.ajaskey.market.ta.DailyData dailyData88 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData15, calendar82);
    java.lang.String str89 = net.ajaskey.market.misc.Utils.stringDate(calendar82);
    java.lang.String str90 = net.ajaskey.market.misc.Utils.stringDate2(calendar82);
    long long91 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar13, calendar82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Fri 30-Jan-0001"+ "'", str12.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "unknown-month"+ "'", str14.equals("unknown-month"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "30-Jan-0001"+ "'", str21.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Fri 30-Jan-0001"+ "'", str22.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "30-Jan-0001"+ "'", str36.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Fri 30-Jan-0001"+ "'", str37.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d39 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "30-Jan-0001"+ "'", str51.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Fri 30-Jan-0001"+ "'", str52.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "30-Jan-0001"+ "'", str65.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Fri 30-Jan-0001"+ "'", str73.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long74 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "30-Jan-0001"+ "'", str83.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Fri 30-Jan-0001"+ "'", str84.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "30-Jan-0001"+ "'", str86.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "30-Jan-0001"+ "'", str89.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Fri 30-Jan-0001"+ "'", str90.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long91 == 0L);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test443"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRank((int)(short)0);
    double d8 = industryData0.getPriceInRange260();
    industryData0.setShares((long)'a');
    industryData0.setSector("java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.String str13 = industryData0.getTicker();
    java.lang.String str14 = industryData0.getSector();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test444"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    net.ajaskey.market.ta.DailyData dailyData10 = new net.ajaskey.market.ta.DailyData(calendar3, (double)'4', (double)0, 0.0d, (double)(short)(-1), (double)0L, (double)(-1.0f));
    java.lang.String str11 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "java.util.GregorianCalendar[time=-61990592399000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=220,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 5\n  Month        : 7\n  Day of Month : 8\n  Day of Year  : 220\n  Week of Year : 32\n"+ "'", str11.equals("java.util.GregorianCalendar[time=-61990592399000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=220,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=0,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 5\n  Month        : 7\n  Day of Month : 8\n  Day of Year  : 220\n  Week of Year : 32\n"));

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test445"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.util.List<java.lang.Integer> list_i3 = industryData0.getRank();
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808650448,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=552,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808635993,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=4,MILLISECOND=7,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    java.lang.String str8 = industryData0.getExch();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "java.util.GregorianCalendar[time=-62164808650448,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=552,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str8.equals("java.util.GregorianCalendar[time=-62164808650448,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=552,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test446"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)'a', (int)(byte)10, (int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test447"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double[] d_array9 = tickerData0.getOiData();
    double[] d_array10 = tickerData0.getOiData();
    double d11 = tickerData0.getLow260();
    java.lang.Double d12 = tickerData0.getSma260();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array15 = tickerData0.getVolumeData();
    double d16 = tickerData0.getRsStRaw();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test448"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    double d2 = tickerData0.getCurrentPrice();
    double[] d_array3 = tickerData0.getTrueHighData();
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808650542,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=458,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    net.ajaskey.market.ta.input.Fundamentals fundamentals6 = tickerData0.getFundies();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals6);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test449"); }


    java.util.ArrayList<java.lang.String> arraylist_str0 = new java.util.ArrayList<java.lang.String>();
    java.lang.String[] str_array14 = new java.lang.String[] { "10", "java.util.GregorianCalendar[time=-62164808646907,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=53,MILLISECOND=93,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808650589,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=411,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808650199,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=801,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808648093,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=51,MILLISECOND=907,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808644708,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=292,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808649013,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=50,MILLISECOND=987,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808650277,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=723,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808644468,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=532,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808644848,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=152,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808647952,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=48,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808644863,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=137,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", "java.util.GregorianCalendar[time=-62164808645862,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=54,MILLISECOND=138,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n" };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str0, str_array14);
    net.ajaskey.market.ta.input.ParseData.setValidTickers((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData17 = net.ajaskey.market.ta.TickerData.build((java.util.List<java.lang.String>)arraylist_str0);
    java.util.List<net.ajaskey.market.ta.TickerData> list_tickerData18 = net.ajaskey.market.ta.input.ParseData.parseFiles((java.util.List<java.lang.String>)arraylist_str0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_tickerData18);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test450"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    net.ajaskey.market.ta.DailyData dailyData17 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData13, (int)(byte)10, (-1), (int)(byte)10);
    net.ajaskey.market.ta.input.Fundamentals fundamentals18 = tickerData13.getFundies();
    net.ajaskey.market.ta.TrendType trendType19 = tickerData13.getSma130Trend();
    tickerData13.generateDerived(true);
    tickerData13.setTicker("java.util.GregorianCalendar[time=-62164808630923,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=9,MILLISECOND=77,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    net.ajaskey.market.ta.TrendType trendType24 = tickerData13.getSma130Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(trendType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(trendType24);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test451"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getLow260();
    double d8 = tickerData0.getDiMinus();
    double d9 = tickerData0.getRsRaw();
    double d10 = tickerData0.getLow260();
    double d11 = tickerData0.getLrAngle260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test452"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getDiPlus();
    double[] d_array11 = tickerData0.getOiData();
    java.lang.String str12 = tickerData0.getTicker();
    double d13 = tickerData0.getChg23();
    double d14 = tickerData0.getHigh260();
    double[] d_array15 = tickerData0.getCloseData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test453"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getLow260();
    double d6 = derivedData0.getPriceOffHigh260();
    double d7 = derivedData0.getChg23();
    double d8 = derivedData0.getDiPlus();
    double d9 = derivedData0.getLrInt260();
    double d10 = derivedData0.getMfi130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test454"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.lang.Double d9 = tickerData0.getSma23();
    double d10 = tickerData0.getLrInt260();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    net.ajaskey.market.ta.DailyData dailyData15 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar14);
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    double d25 = tickerData16.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType26 = tickerData16.getSma130Trend();
    double[] d_array27 = tickerData16.getVolumeData();
    int i31 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData16, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar36 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str37 = net.ajaskey.market.misc.Utils.stringDate(calendar36);
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate2(calendar36);
    net.ajaskey.market.ta.TickerData tickerData45 = new net.ajaskey.market.ta.TickerData("hi!", calendar36, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData46 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar36);
    java.util.Calendar calendar50 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str51 = net.ajaskey.market.misc.Utils.stringDate(calendar50);
    java.lang.String str52 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar50);
    boolean b53 = net.ajaskey.market.misc.Utils.sameMonth(calendar36, calendar50);
    long long54 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar14, calendar36);
    java.lang.String str55 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "30-Jan-0001"+ "'", str37.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Fri 30-Jan-0001"+ "'", str38.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "30-Jan-0001"+ "'", str51.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "java.util.GregorianCalendar[time=-62164808596403,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=597,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str52.equals("java.util.GregorianCalendar[time=-62164808596403,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=597,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 2017L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "08-Aug-0005"+ "'", str55.equals("08-Aug-0005"));

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test455"); }


    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = net.ajaskey.market.ta.input.ParseData.getTickerList("java.util.GregorianCalendar[time=-62164808641129,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=58,MILLISECOND=871,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test456"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    double d4 = derivedData0.getChg130();
    double d5 = derivedData0.getPriceInRng260();
    double d6 = derivedData0.getRsStRaw();
    double d7 = derivedData0.getMfi130();
    double d8 = derivedData0.getChg260();
    double d9 = derivedData0.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test457"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double[] d_array14 = tickerData13.getTypicalPriceData();
    double d15 = tickerData13.getLow260();
    tickerData13.generateDerived(false);
    double d18 = tickerData13.getLrInt260();
    double[] d_array19 = tickerData13.getVolumeData();
    double d20 = tickerData13.getMfi130();
    double d21 = tickerData13.getDiMinus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test458"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    java.lang.Double d28 = tickerData13.getSma23();
    double d29 = tickerData13.getLrInt260();
    // The following exception was thrown during execution in test generation
    try {
    double d31 = tickerData13.getOi((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d28 + "' != '" + 0.0d+ "'", d28.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d29 == 0.0d);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test459"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("hi!", calendar4, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.lang.String str14 = tickerData13.getTickerExchange();
    java.util.Calendar calendar15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    boolean b25 = net.ajaskey.market.misc.Utils.sameYear(calendar15, calendar21);
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData27 = net.ajaskey.market.ta.TickerData.getSlice(tickerData13, calendar21, (int)(byte)(-1));
    java.lang.String str28 = net.ajaskey.market.misc.Utils.getDayName(calendar21);
    net.ajaskey.market.ta.DailyData dailyData35 = new net.ajaskey.market.ta.DailyData(calendar21, (double)10.0f, (double)10L, (double)(byte)1, (double)(short)(-1), (double)(byte)(-1), (double)(-1));
    java.lang.Double d36 = dailyData35.getOi();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Unknown"+ "'", str14.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "unknown-day"+ "'", str28.equals("unknown-day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d36 + "' != '" + (-1.0d)+ "'", d36.equals((-1.0d)));

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test460"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getAvgVol20();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getDiPlus();
    double d5 = derivedData0.getChg23();
    double d6 = derivedData0.getPriceInRng260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test461"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.Double d24 = dailyData20.getClose();
    double d25 = dailyData20.getDailyPercentRng();
    double d26 = dailyData20.getTrueLow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d24 + "' != '" + 1.0d+ "'", d24.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 0.0d);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test462"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    tickerData0.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType5 = tickerData0.getSma65Trend();
    double[] d_array6 = tickerData0.getTypicalPriceData();
    java.lang.String str7 = tickerData0.getTicker();
    net.ajaskey.market.ta.TrendType trendType8 = tickerData0.getSma65Trend();
    net.ajaskey.market.ta.TrendType trendType9 = tickerData0.getSma65Trend();
    java.lang.String str10 = tickerData0.getTickerName();
    double d11 = tickerData0.getChg130();
    java.lang.String str12 = tickerData0.toString();
    net.ajaskey.market.ta.TrendType trendType13 = tickerData0.getSma260Trend();
    double[] d_array14 = tickerData0.getOiData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "HI!"+ "'", str7.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "HI!\tnull\tnull\r\n"+ "'", str12.equals("HI!\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test463"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    java.lang.Double d8 = tickerData0.getSma130();
    net.ajaskey.market.ta.TickerData tickerData9 = new net.ajaskey.market.ta.TickerData();
    double[] d_array10 = tickerData9.getVolumeData();
    double d11 = tickerData9.getChg65();
    int i15 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData9, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d16 = tickerData9.getLow260();
    double d17 = tickerData9.getDiMinus();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData9);
    double d19 = tickerData0.getAvgVol65();
    java.lang.String str20 = tickerData0.getTicker();
    double d21 = tickerData0.getLr260();
    java.lang.Integer i22 = tickerData0.getDaysOfData();
    double[] d_array23 = tickerData0.getTypicalPriceData();
    double d24 = tickerData0.getRsRaw();
    java.lang.String str25 = tickerData0.getTickerName();
    // The following exception was thrown during execution in test generation
    try {
    tickerData0.generateDerived(1, true);
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test464"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    double d3 = derivedData0.getLr260();
    java.lang.Double d4 = derivedData0.getSmaPerc260();
    double d5 = derivedData0.getMfi130();
    java.lang.Double d6 = derivedData0.getSmaPerc260();
    double d7 = derivedData0.getChg65();
    java.lang.Double d8 = derivedData0.getSmaPerc23();
    java.lang.Double d9 = derivedData0.getSma65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test465"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    java.lang.Double d5 = derivedData0.getSma23();
    double d6 = derivedData0.getChg65();
    double d7 = derivedData0.getLrInt260();
    double d8 = derivedData0.getRsRaw();
    double d9 = derivedData0.getLrInt260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test466"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double d8 = tickerData0.getDiPlus();
    net.ajaskey.market.ta.TrendType trendType9 = tickerData0.getSma130Trend();
    double[] d_array10 = tickerData0.getTypicalPriceData();
    java.util.Calendar calendar14 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str15 = net.ajaskey.market.misc.Utils.stringDate(calendar14);
    net.ajaskey.market.ta.DailyData dailyData22 = new net.ajaskey.market.ta.DailyData(calendar14, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    double d23 = dailyData22.getTrueHigh();
    dailyData22.setTrueHigh((double)(short)0);
    long long26 = dailyData22.getDaysSinceBase();
    double d27 = dailyData22.getTrueHigh();
    java.util.Calendar calendar28 = dailyData22.getDate();
    net.ajaskey.market.ta.DailyData dailyData29 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar28);
    java.lang.String str30 = tickerData0.getTickerName();
    double[] d_array31 = tickerData0.getLowData();
    double[] d_array32 = tickerData0.getCloseData();
    double d33 = tickerData0.getAvgVol65();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "30-Jan-0001"+ "'", str15.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 693934L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d27 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d33 == 0.0d);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test467"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    double d7 = tickerData0.getCurrentPrice();
    double d8 = tickerData0.getChg260();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    java.lang.Double d10 = tickerData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d10);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test468"); }


    java.util.Calendar calendar4 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str5 = net.ajaskey.market.misc.Utils.stringDate(calendar4);
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate2(calendar4);
    net.ajaskey.market.ta.TickerData tickerData13 = new net.ajaskey.market.ta.TickerData("Fri 30-Jan-0001", calendar4, (double)1.0f, (double)1L, (double)0.0f, (double)(-1.0f), (double)(-1.0f), (double)(byte)0);
    double[] d_array14 = tickerData13.getTypicalPriceData();
    double d15 = tickerData13.getLow260();
    tickerData13.generateDerived(false);
    double d18 = tickerData13.getLrInt260();
    double[] d_array19 = tickerData13.getVolumeData();
    double d20 = tickerData13.getMfi130();
    double d21 = tickerData13.getHigh260();
    net.ajaskey.market.ta.TrendType trendType22 = tickerData13.getSma260Trend();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "30-Jan-0001"+ "'", str5.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Fri 30-Jan-0001"+ "'", str6.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(d_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(trendType22);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test469"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    double[] d_array9 = tickerData0.getTrueHighData();
    java.lang.String str10 = tickerData0.getTickerExchange();
    double d11 = tickerData0.getLow260();
    double d12 = tickerData0.getLrAngle260();
    double d13 = tickerData0.getRsStRaw();
    java.lang.Integer i14 = tickerData0.getDaysOfData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i14);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test470"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    double d5 = derivedData0.getRsRaw();
    java.lang.Double d6 = derivedData0.getSma23();
    double d7 = derivedData0.getLrAngle260();
    double d8 = derivedData0.getLrInt260();
    double d9 = derivedData0.getChg65();
    double d10 = derivedData0.getChg65();
    double d11 = derivedData0.getHigh260();
    double d12 = derivedData0.getAvgVol20();
    java.lang.Double d13 = derivedData0.getSmaPerc130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 0.0d+ "'", d13.equals(0.0d));

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test471"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    double[] d_array8 = tickerData0.getTrueHighData();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    net.ajaskey.market.ta.DailyData dailyData20 = new net.ajaskey.market.ta.DailyData(calendar12, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar21 = dailyData20.getDate();
    tickerData0.addData(dailyData20);
    double d23 = dailyData20.getDailyPercentRng();
    java.lang.Double d24 = dailyData20.getOpen();
    dailyData20.setVolume((double)10.0f);
    java.lang.Double d27 = dailyData20.getClose();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d24 + "' != '" + 0.0d+ "'", d24.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d27 + "' != '" + 1.0d+ "'", d27.equals(1.0d));

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test472"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    java.util.List<java.lang.Integer> list_i6 = industryData0.getRank();
    java.lang.String str7 = industryData0.getSector();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test473"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getLrInt260();
    double d7 = derivedData0.getPriceOffHigh260();
    double d8 = derivedData0.getPriceInRng260();
    double d9 = derivedData0.getChg23();
    double d10 = derivedData0.getChg260();
    double d11 = derivedData0.getLr260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test474"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)(-1), 100);
    net.ajaskey.market.ta.methods.TaMethods taMethods7 = tickerData0.getTaMethods();
    net.ajaskey.market.ta.input.Fundamentals fundamentals8 = tickerData0.getFundies();
    java.lang.String str9 = tickerData0.getTickerName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test475"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Integer i2 = tickerData0.getDaysOfData();
    double d3 = tickerData0.getPriceInRng260();
    double d4 = tickerData0.getDiMinus();
    double d5 = tickerData0.getPriceOffHigh260();
    java.lang.Double d6 = tickerData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test476"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    java.lang.Double d4 = tickerData0.getSma65();
    java.lang.Double d5 = tickerData0.getSma260();
    double d6 = tickerData0.getCurrentPrice();
    double d7 = tickerData0.getAtrPercent23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test477"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    double d2 = derivedData0.getPriceOffLow260();
    java.lang.Double d3 = derivedData0.getSmaPerc65();
    double d4 = derivedData0.getLrAngle260();
    java.lang.Double d5 = derivedData0.getSma23();
    java.lang.Double d6 = derivedData0.getSmaPerc65();
    double d7 = derivedData0.getLr260();
    double d8 = derivedData0.getChg65();
    java.lang.Double d9 = derivedData0.getSmaPerc130();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d5 + "' != '" + 0.0d+ "'", d5.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d9 + "' != '" + 0.0d+ "'", d9.equals(0.0d));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test478"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getPriceInRng260();
    int i4 = tickerData0.getDataCount();
    double d5 = tickerData0.getCurrentPrice();
    net.ajaskey.market.ta.TickerData.sortDailyData(tickerData0, true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test479"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    double d4 = tickerData0.getMfi130();
    java.lang.Double d5 = tickerData0.getSma23();
    java.lang.Double d6 = tickerData0.getSma23();
    double d7 = tickerData0.getAvgVol20();
    double d8 = tickerData0.getMfi14();
    tickerData0.rSort();
    double d10 = tickerData0.getChg23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test480"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getRsStRaw();
    java.lang.Double d2 = derivedData0.getSmaPerc260();
    java.lang.Double d3 = derivedData0.getSmaPerc260();
    double d4 = derivedData0.getAvgVol65();
    double d5 = derivedData0.getLrSlope260();
    java.lang.Double d6 = derivedData0.getSma65();
    double d7 = derivedData0.getChg130();
    java.lang.Double d8 = derivedData0.getSma23();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d2 + "' != '" + 0.0d+ "'", d2.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d8 + "' != '" + 0.0d+ "'", d8.equals(0.0d));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test481"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getRsRaw();
    java.lang.Double d6 = derivedData0.getSma23();
    java.lang.Double d7 = derivedData0.getSmaPerc130();
    double d8 = derivedData0.getRsStRaw();
    double d9 = derivedData0.getChg130();
    double d10 = derivedData0.getChg();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d6 + "' != '" + 0.0d+ "'", d6.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test482"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getTrueLow();
    tickerData0.addData(dailyData50);
    double d54 = dailyData50.getDailyPercentChg();
    java.util.Calendar calendar55 = dailyData50.getDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808596258,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=742,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808596258,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=742,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d54 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar55);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test483"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    java.util.Calendar calendar17 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str18 = net.ajaskey.market.misc.Utils.stringDate(calendar17);
    java.lang.String str19 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar17);
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    java.util.Calendar calendar34 = net.ajaskey.market.misc.Utils.makeCopy(calendar24);
    boolean b35 = net.ajaskey.market.misc.Utils.sameDate(calendar17, calendar34);
    net.ajaskey.market.ta.DailyData dailyData36 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, calendar34);
    tickerData0.setTicker("Fri");
    java.util.Calendar calendar42 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str43 = net.ajaskey.market.misc.Utils.stringDate(calendar42);
    net.ajaskey.market.ta.DailyData dailyData50 = new net.ajaskey.market.ta.DailyData(calendar42, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d51 = dailyData50.getClose();
    double d52 = dailyData50.getTrueLow();
    tickerData0.addData(dailyData50);
    java.lang.String str54 = tickerData0.getTicker();
    net.ajaskey.market.ta.TrendType trendType55 = tickerData0.getSma23Trend();
    net.ajaskey.market.ta.TickerData tickerData56 = new net.ajaskey.market.ta.TickerData();
    double[] d_array57 = tickerData56.getVolumeData();
    double d58 = tickerData56.getChg65();
    net.ajaskey.market.ta.TrendType trendType59 = tickerData56.getSma23Trend();
    java.lang.Integer i60 = tickerData56.getDaysOfData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals61 = tickerData56.getFundies();
    java.lang.Double d62 = tickerData56.getSmaPerc260();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData56);
    double[] d_array64 = tickerData0.getCloseData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "30-Jan-0001"+ "'", str18.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=-62164808596208,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=792,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str19.equals("java.util.GregorianCalendar[time=-62164808596208,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=792,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "30-Jan-0001"+ "'", str43.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d51 + "' != '" + 1.0d+ "'", d51.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "FRI"+ "'", str54.equals("FRI"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d58 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array64);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test484"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getPriceOffLow260();
    double d5 = tickerData0.getPriceOffHigh260();
    tickerData0.setTickerExchange("java.util.GregorianCalendar[time=-62164808650542,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=458,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    double d8 = tickerData0.getChg130();
    double d9 = tickerData0.getChg65();
    double d10 = tickerData0.getMfi14();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test485"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808608417,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=31,MILLISECOND=583,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test486"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    double d13 = dailyData11.getDailyPercentChg();
    java.util.Calendar calendar14 = dailyData11.getDate();
    dailyData11.setTrueHigh((-1.0d));
    dailyData11.setVolume((double)(byte)100);
    java.lang.Double d19 = dailyData11.getOpen();
    double d20 = dailyData11.getTrueHigh();
    java.util.Calendar calendar21 = dailyData11.getDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d19 + "' != '" + 0.0d+ "'", d19.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test487"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.lang.Double d2 = tickerData0.getSmaPerc23();
    java.lang.Double d3 = tickerData0.getSma260();
    net.ajaskey.market.ta.methods.TaMethods taMethods4 = tickerData0.getTaMethods();
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDataOfDate(tickerData0, (int)(short)(-1), (int)'#', (int)'#');
    double d9 = tickerData0.getAtrPercent23();
    double d10 = tickerData0.getHigh260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(taMethods4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test488"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getRsRaw();
    double d7 = derivedData0.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 0.0d);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test489"); }


    // The following exception was thrown during execution in test generation
    try {
    net.ajaskey.market.ta.TickerData tickerData2 = net.ajaskey.market.ta.input.ParseData.parseOneFile("java.util.GregorianCalendar[time=-62164808647281,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=52,MILLISECOND=719,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n", (-1));
      org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.io.FileNotFoundException")) {
        org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test490"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getTrueLowData();
    java.util.Calendar calendar5 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str6 = net.ajaskey.market.misc.Utils.stringDate(calendar5);
    java.lang.String str7 = net.ajaskey.market.misc.Utils.stringDate2(calendar5);
    net.ajaskey.market.ta.DailyData dailyData8 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar5);
    double d9 = tickerData0.getAtrPercent23();
    tickerData0.fillDataArrays((int)(short)100, false);
    double[] d_array13 = tickerData0.getTrueHighData();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    double d15 = tickerData0.getAtrPercent23();
    java.util.Calendar calendar16 = null;
    java.util.List<net.ajaskey.market.ta.DailyData> list_dailyData18 = net.ajaskey.market.ta.TickerData.getSlice(tickerData0, calendar16, (int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "30-Jan-0001"+ "'", str6.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Fri 30-Jan-0001"+ "'", str7.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_dailyData18);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test491"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double d3 = tickerData0.getMfi130();
    net.ajaskey.market.ta.TickerData tickerData4 = new net.ajaskey.market.ta.TickerData();
    double[] d_array5 = tickerData4.getTrueLowData();
    java.util.Calendar calendar9 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str10 = net.ajaskey.market.misc.Utils.stringDate(calendar9);
    java.lang.String str11 = net.ajaskey.market.misc.Utils.stringDate2(calendar9);
    net.ajaskey.market.ta.DailyData dailyData12 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData4, calendar9);
    double d13 = tickerData4.getAtrPercent23();
    net.ajaskey.market.ta.TrendType trendType14 = tickerData4.getSma130Trend();
    double[] d_array15 = tickerData4.getVolumeData();
    int i19 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData4, (int)'a', (int)(byte)(-1), (int)(byte)(-1));
    java.util.Calendar calendar24 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str25 = net.ajaskey.market.misc.Utils.stringDate(calendar24);
    java.lang.String str26 = net.ajaskey.market.misc.Utils.stringDate2(calendar24);
    net.ajaskey.market.ta.TickerData tickerData33 = new net.ajaskey.market.ta.TickerData("hi!", calendar24, (double)(short)(-1), (double)(byte)10, (double)1, (-1.0d), (double)100.0f, (double)1);
    net.ajaskey.market.ta.DailyData dailyData34 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData4, calendar24);
    java.util.Calendar calendar38 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str39 = net.ajaskey.market.misc.Utils.stringDate(calendar38);
    net.ajaskey.market.ta.DailyData dailyData46 = new net.ajaskey.market.ta.DailyData(calendar38, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.String str47 = net.ajaskey.market.misc.Utils.stringDate2(calendar38);
    long long48 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar24, calendar38);
    java.util.Calendar calendar52 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    java.util.Calendar calendar56 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str57 = net.ajaskey.market.misc.Utils.stringDate(calendar56);
    java.lang.String str58 = net.ajaskey.market.misc.Utils.stringDate2(calendar56);
    boolean b59 = net.ajaskey.market.misc.Utils.sameYear(calendar52, calendar56);
    java.lang.String str60 = net.ajaskey.market.misc.Utils.getString(calendar56);
    boolean b61 = net.ajaskey.market.misc.Utils.sameYear(calendar38, calendar56);
    java.lang.String str62 = net.ajaskey.market.misc.Utils.stringDate2(calendar56);
    java.lang.String str63 = net.ajaskey.market.misc.Utils.getMonthName(calendar56);
    java.lang.String str64 = net.ajaskey.market.misc.Utils.stringDate2(calendar56);
    net.ajaskey.market.ta.DailyData dailyData65 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData0, calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "30-Jan-0001"+ "'", str10.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Fri 30-Jan-0001"+ "'", str11.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "30-Jan-0001"+ "'", str25.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Fri 30-Jan-0001"+ "'", str26.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "30-Jan-0001"+ "'", str39.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Fri 30-Jan-0001"+ "'", str47.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long48 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "30-Jan-0001"+ "'", str57.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Fri 30-Jan-0001"+ "'", str58.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "30-Jan-0001"+ "'", str60.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Fri 30-Jan-0001"+ "'", str62.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "unknown-month"+ "'", str63.equals("unknown-month"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Fri 30-Jan-0001"+ "'", str64.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData65);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test492"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    int i6 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData0, (int)(short)(-1), (int)(byte)100, (int)(short)100);
    net.ajaskey.market.ta.TrendType trendType7 = tickerData0.getSma130Trend();
    net.ajaskey.market.ta.TickerData tickerData8 = new net.ajaskey.market.ta.TickerData();
    double[] d_array9 = tickerData8.getVolumeData();
    double d10 = tickerData8.getChg65();
    double[] d_array11 = tickerData8.getOiData();
    double d12 = tickerData8.getMfi65();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData0, tickerData8);
    java.lang.String str14 = tickerData8.getTicker();
    double[] d_array15 = tickerData8.getVolumeData();
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    double d18 = tickerData16.getCurrentPrice();
    double d19 = tickerData16.getAtr23();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData16);
    double d21 = tickerData16.getRsRaw();
    net.ajaskey.market.ta.TickerData.mergeData(tickerData8, tickerData16);
    double d23 = tickerData16.getDiPlus();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test493"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    double d4 = derivedData0.getRsi14();
    double d5 = derivedData0.getCurrentPrice();
    double d6 = derivedData0.getLrSlope260();
    java.lang.Double d7 = derivedData0.getSmaPerc23();
    double d8 = derivedData0.getRsRaw();
    double d9 = derivedData0.getLrInt260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d7 + "' != '" + 0.0d+ "'", d7.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test494"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    double d2 = tickerData0.getChg65();
    double[] d_array3 = tickerData0.getOiData();
    double d4 = tickerData0.getMfi65();
    tickerData0.fillDataArrays((int)(byte)0, true);
    java.lang.String str8 = tickerData0.toString();
    double d9 = tickerData0.getPriceOffHigh260();
    double d10 = tickerData0.getAvgVol65();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "null\tnull\tnull\r\n"+ "'", str8.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d10 == 0.0d);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test495"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRawRs((double)100);
    industryData0.setExch("java.util.GregorianCalendar[time=-62164808605859,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=34,MILLISECOND=141,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test496"); }


    net.ajaskey.market.ta.DerivedData derivedData0 = new net.ajaskey.market.ta.DerivedData();
    double d1 = derivedData0.getChg130();
    double d2 = derivedData0.getAvgVol20();
    java.lang.Double d3 = derivedData0.getSma130();
    java.lang.Double d4 = derivedData0.getSmaPerc65();
    double d5 = derivedData0.getRsRaw();
    double d6 = derivedData0.getLrInt260();
    net.ajaskey.market.ta.TickerData tickerData7 = new net.ajaskey.market.ta.TickerData();
    double[] d_array8 = tickerData7.getVolumeData();
    double d9 = tickerData7.getChg65();
    tickerData7.setTicker("hi!");
    net.ajaskey.market.ta.TrendType trendType12 = tickerData7.getSma65Trend();
    double[] d_array13 = tickerData7.getTypicalPriceData();
    java.lang.String str14 = tickerData7.getTicker();
    net.ajaskey.market.ta.TrendType trendType15 = tickerData7.getSma65Trend();
    net.ajaskey.market.ta.TrendType trendType16 = tickerData7.getSma65Trend();
    java.lang.String str17 = tickerData7.getTickerName();
    java.lang.Double d18 = tickerData7.getSma65();
    double[] d_array19 = tickerData7.getHighData();
    // The following exception was thrown during execution in test generation
    try {
    derivedData0.build(tickerData7);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NoClassDefFoundError")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d3 + "' != '" + 0.0d+ "'", d3.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d4 + "' != '" + 0.0d+ "'", d4.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "HI!"+ "'", str14.equals("HI!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(trendType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array19);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test497"); }


    net.ajaskey.market.ta.IndustryData industryData0 = new net.ajaskey.market.ta.IndustryData();
    industryData0.setChg260((double)(byte)(-1));
    java.lang.String str3 = industryData0.getSector();
    industryData0.setRank(100);
    industryData0.setRawRs((double)100);
    java.lang.String str8 = industryData0.getSector();
    industryData0.setPriceInRange260((double)10L);
    java.lang.String str11 = industryData0.getSector();
    industryData0.setMarketCap("NotFound");
    double d14 = industryData0.getAvgVol();
    long long15 = industryData0.getfShares();
    java.lang.String str16 = industryData0.getRanks();
    industryData0.setMarketCap("java.util.GregorianCalendar[time=-62164808644691,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=55,MILLISECOND=309,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setName("java.util.GregorianCalendar[time=-62164808650589,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=35,SECOND=49,MILLISECOND=411,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n");
    industryData0.setRawRsSt(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "101  "+ "'", str16.equals("101  "));

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test498"); }


    java.util.Calendar calendar3 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str4 = net.ajaskey.market.misc.Utils.stringDate(calendar3);
    net.ajaskey.market.ta.DailyData dailyData11 = new net.ajaskey.market.ta.DailyData(calendar3, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.lang.Double d12 = dailyData11.getClose();
    java.lang.Double d13 = dailyData11.getLow();
    java.util.Calendar calendar14 = dailyData11.getDate();
    dailyData11.setVolume((double)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "30-Jan-0001"+ "'", str4.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d12 + "' != '" + 1.0d+ "'", d12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + d13 + "' != '" + 0.0d+ "'", d13.equals(0.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar14);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test499"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    java.lang.Double d1 = tickerData0.getSma130();
    double[] d_array2 = tickerData0.getLowData();
    double d3 = tickerData0.getChg23();
    net.ajaskey.market.ta.TickerData.clearTickerData(tickerData0);
    java.lang.Integer i5 = tickerData0.getDaysOfData();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(i5);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test500"); }


    net.ajaskey.market.ta.TickerData tickerData0 = new net.ajaskey.market.ta.TickerData();
    double[] d_array1 = tickerData0.getVolumeData();
    net.ajaskey.market.ta.input.Fundamentals fundamentals2 = tickerData0.getFundies();
    double d3 = tickerData0.getDiMinus();
    net.ajaskey.market.ta.TickerData tickerData4 = new net.ajaskey.market.ta.TickerData();
    double[] d_array5 = tickerData4.getVolumeData();
    double d6 = tickerData4.getChg65();
    double[] d_array7 = tickerData4.getOiData();
    double d8 = tickerData4.getMfi65();
    java.util.Calendar calendar12 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str13 = net.ajaskey.market.misc.Utils.stringDate(calendar12);
    java.lang.String str14 = net.ajaskey.market.misc.Utils.calendarToLongString(calendar12);
    net.ajaskey.market.ta.TickerData tickerData15 = null;
    net.ajaskey.market.ta.TickerData tickerData16 = new net.ajaskey.market.ta.TickerData();
    double[] d_array17 = tickerData16.getTrueLowData();
    java.util.Calendar calendar21 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str22 = net.ajaskey.market.misc.Utils.stringDate(calendar21);
    java.lang.String str23 = net.ajaskey.market.misc.Utils.stringDate2(calendar21);
    net.ajaskey.market.ta.DailyData dailyData24 = net.ajaskey.market.ta.TickerData.getDailyDate(tickerData16, calendar21);
    int i25 = net.ajaskey.market.ta.TickerData.getIndexOfDate(tickerData15, calendar21);
    boolean b26 = net.ajaskey.market.misc.Utils.sameYear(calendar12, calendar21);
    java.util.Calendar calendar30 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str31 = net.ajaskey.market.misc.Utils.stringDate(calendar30);
    java.lang.String str32 = net.ajaskey.market.misc.Utils.stringDate2(calendar30);
    int i33 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData4, calendar21, calendar30);
    java.util.Calendar calendar37 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    java.lang.String str38 = net.ajaskey.market.misc.Utils.stringDate(calendar37);
    net.ajaskey.market.ta.DailyData dailyData45 = new net.ajaskey.market.ta.DailyData(calendar37, (double)(short)0, (double)(byte)10, (double)(byte)0, (double)(short)1, (double)0L, (double)0.0f);
    java.util.Calendar calendar49 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)0, 1, (int)(short)(-1));
    boolean b50 = net.ajaskey.market.misc.Utils.sameYear(calendar37, calendar49);
    long long51 = net.ajaskey.market.misc.Utils.getTimeSpan(calendar30, calendar49);
    java.util.Calendar calendar55 = net.ajaskey.market.misc.Utils.buildCalendar((int)(byte)1, (int)'4', (int)(short)100);
    int i56 = net.ajaskey.market.ta.TickerData.getTradingDays(tickerData0, calendar49, calendar55);
    java.lang.String str57 = tickerData0.toString();
    double d58 = tickerData0.getChg260();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(fundamentals2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "30-Jan-0001"+ "'", str13.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "java.util.GregorianCalendar[time=-62164808596068,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=932,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"+ "'", str14.equals("java.util.GregorianCalendar[time=-62164808596068,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Denver\",offset=-25200000,dstSavings=3600000,useDaylight=true,transitions=157,lastRule=java.util.SimpleTimeZone[id=America/Denver,offset=-25200000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=36,SECOND=43,MILLISECOND=932,ZONE_OFFSET=-25200000,DST_OFFSET=0]\n  Year         : 1\n  Month        : 0\n  Day of Month : 30\n  Day of Year  : 30\n  Week of Year : 5\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(d_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "30-Jan-0001"+ "'", str22.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Fri 30-Jan-0001"+ "'", str23.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dailyData24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "30-Jan-0001"+ "'", str31.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Fri 30-Jan-0001"+ "'", str32.equals("Fri 30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "30-Jan-0001"+ "'", str38.equals("30-Jan-0001"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long51 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(calendar55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "null\tnull\tnull\r\n"+ "'", str57.equals("null\tnull\tnull\r\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d58 == 0.0d);

  }

}
